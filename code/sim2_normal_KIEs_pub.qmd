---
title: "Sim2_data_no_KIE_normal_KIE_pub"
author: "Elise Rivett"
date: "2023-02-19"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

#Goal: Generate simulated Dataset 2 (no-error) and 1000 derivatives at each error level.

Dataset 2: Normal KIE ^15^N^$\alpha$^, normal KIE ^15^N^$\beta$^

#Load packages:
```{r load}
library(tidyverse)
library(ggplot2)
library(nlstools)
library(modelr) #provides rmse() function
library(egg) #provides a way to save ggplots with specified sizes
library(moments) #allows skewness and kurtosis calculations
library(plotrix) #allows for standard error of the mean calculations
library(sn) #This is a package that can generate skewed distributions.
library(here) #Used to create file paths relative to top-level directory.
```

#Naming conventions and abbreviations

Throughout this file, bulk N is abbreviated as "p" (for "product").
For example, `delta_p` refers to $\delta$^15^N^bulk^.

"Fractionation factor" (normally abbreviated as $\alpha$) is abbreviated as `ff` to avoid confusion with N^$\alpha$^.

$\alpha$~N-bulk~ = `ff_p`

$\alpha$~N-$\alpha$~ = `ff_alpha`

$\alpha$~N-$\beta$~ = `ff_beta`

Other Greek letters are spelled out in object names. For example:

Enrichment factor ($\epsilon$) = `epsilon`

Other abbreviations

- lm    linear regression model

- nls   nonlinear least square regression model

- sd    standard deviation

- se    standard error

#Dataset 2: Normal KIE ^15^N^$\alpha$^, normal KIE ^15^N^$\beta$^

Set $\rho$ equal to 0.5050 (similar to experimental P450 value)

Use pre-determined $\rho$ and mean $\tau$ to calculate ($\alpha$~N-$\alpha$~) (`ff_alpha`)

$$\alpha_{N-\alpha} = \rho/\tau*\alpha_{N-bulk}$$

and $\alpha$~N-$\beta$~ (`ff_beta`)

$$\alpha_{N-\beta} = (1-\rho)/(1-\tau)*\alpha_{N-bulk}$$

#Generate full simulated, error-free dataset
```{r sim2}
sim2 <- tibble(
  #Make three replicates with evenly-spaced values of f
  #Simulate additional values of f that are greater than 0.7 or less than 0.3 for graphing purposes only (not used for calculations).
  f = c(c(1, 0.999, 0.99, 0.9), 
        seq(from = 0.8, to = 0.1, by = -0.1),
        seq(from = 0.8, to = 0.1, by = -0.1),
       seq(from = 0.8, to = 0.1, by = -0.1)),
  replicate = c(
    "NA", "NA", "NA", "NA",
    rep(1, 8),
    rep(2, 8),
    rep(3, 8)
  ),
  one_minus_f = 1 - f,
  `-flnf/(1-f)` = -f*log(f)/(1-f),
  
  #Define pre-determined values.
  epsilon_bulk = -20,
  delta_s0 = 0,
  N_s0 = 10000, #Initial nmol of substrate for simulated experiment
  R_std = 0.0036765, #R value for atmospheric N
  rho = 0.505,
  
  #Calculate values for substrate and bulk N
  ##Use standard Rayleigh model
  N_s = f*N_s0,
  delta_s = delta_s0 + epsilon_bulk*log(f), #Eq. (18)
  delta_p = delta_s0 - epsilon_bulk*(f*log(f)/(1 - f)), #Eq. (2)
  R_s = (delta_s/1000+1)*R_std,
  R_p = (delta_p/1000+1)*R_std,
  N_p = (1 - f)*N_s0,
  `14N_p` = N_p/(1 + R_p),
  `15N_p` = R_p*`14N_p`,
  ff_p = 1 + epsilon_bulk/1000, #ff_p = bulk fractionation factor
  KIE_p = 1000/(epsilon_bulk+1000),

  #Calculate values for N_alpha and N_beta
  ##Use nonlinear expansion of the Rayleigh model
  R_alpha = (rho*`15N_p`)/(0.5*N_p - rho*`15N_p`), #Eq. (25)
  delta_alpha = (R_alpha/R_std - 1)*1000,
  N_alpha = 0.5*N_p,
  `15N_alpha` = rho*`15N_p`,
  `14N_alpha` = N_alpha - `15N_alpha`,
  
  R_beta = ((1 - rho)*`15N_p`)/
    (0.5*N_p - (1 - rho)*`15N_p`), #Eq. (26)
  delta_beta = (R_beta/R_std - 1)*1000,
  N_beta = 0.5*(1 - f)*N_s0,
  `15N_beta` = (1 - rho)*`15N_p`,
  `14N_beta` = N_beta - `15N_beta`,

  #Compare delta_p values calculated with Eq. (2) and Eq. (15)
  avg_delta = 0.5*(delta_alpha + delta_beta),
  delta_check = delta_p - avg_delta,
  
  #Calculate SP and tau
  SP = delta_alpha - delta_beta,
  tau = `14N_alpha`/`14N_p`
)

#Subset sim2 (f = 0.7 to f = 0.2).
##sim2_tb2 includes only f values used for calc of ff_alpha and ff_beta.
sim2_tb2 <- filter(sim2, f <= 0.75, f >= 0.25)

#Calculate ff_alpha, ff_beta, etc.
sim2_tb2 <- sim2_tb2 %>% mutate(
  ff_alpha = (rho/mean(sim2_tb2$tau, na.rm = TRUE))*ff_p,
  epsilon_alpha = 1000*(ff_alpha - 1),
  KIE_alpha = 1000/(epsilon_alpha+1000),
  
  ff_beta = (1-rho)/(1-mean(sim2_tb2$tau, na.rm = TRUE))*ff_p,
  epsilon_beta = 1000*(ff_beta - 1),
  KIE_beta = 1000/(epsilon_beta + 1000)
)

#Double-check: (rho/tau) + (1-rho)/(1-tau) = 2

((sim2_tb2$rho[1:5]/sim2_tb2$tau[1:5]) + (1-sim2_tb2$rho[1:5])/(1-sim2_tb2$tau[1:5]))

#This is true!
```
##Table S5: Simulated no-error values for Dataset 2
```{r write_no_error_table}
#Select delta values and values calculated for the Expanded Rayleigh model
table_s5 <- sim2_tb2 %>% select(
  replicate, f, delta_s, delta_p, delta_alpha, delta_beta, N_p, `14N_p`, `15N_p`, `14N_alpha`, `15N_alpha`
) 

write.csv(table_s5, here("data/output/sim2/table_s4.csv"), row.names = FALSE)
```


##Compare delta values calculated with Eq. (27) and Eq. (28) to delta values calculated with Eq. (S17) and Eq. (S18)
```{r delta_eq_check}
sim2_tb2_check <- sim2_tb2 %>% mutate(
  #Eq. (27)
  delta_alpha_2 =
    (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000,
  
  #Eq. (28)
  delta_beta_2 =
    ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000
)

(sim2_tb2_check$delta_alpha - sim2_tb2_check$delta_alpha_2)

(sim2_tb2_check$delta_beta - sim2_tb2_check$delta_beta_2)
```

##Graph delta_p, delta_s, delta_alpha, and delta_beta vs (1-f) with smooth lines and points.

geom_point: plot data where 0.25 < f < 0.75 (v3)
```{r plot_sim2_delta_v3, warning=FALSE}
sim2_tidy <- sim2 %>% 
  pivot_longer(c(delta_s, delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

sim2_tidy$delta_15N <- factor(sim2_tidy$delta_15N, levels = c("delta_s", "delta_p", "delta_alpha", "delta_beta"))


(sim2_delta_v3 <- ggplot(data = sim2_tidy, mapping = 
         aes(x = one_minus_f, y = delta_15N_values, shape = delta_15N, color = delta_15N))+
  geom_smooth(data = sim2_tidy, lty = 1, se = FALSE)+
  geom_point(data = filter(sim2_tidy, f <= 0.75, f >= 0.25), size = 2)+
  scale_color_manual(name = "delta values",
    values = c("darkorange2", "grey48", "blue", "green4"),
    labels = c(
    expression(paste(bold(delta^15),bold(N^s), sep="")),
    expression(paste(bold(delta^15),bold(N^bulk), sep="")),
    expression(paste(bold(delta^15),bold(N^alpha), sep="")),
    expression(paste(bold(delta^15),bold(N^beta), sep=""))
  ))+
 
  scale_shape_manual(name = "delta values",
    values = c(18, 16, 15, 17),
    labels = c(
    expression(paste(bold(delta^15),bold(N^s), sep="")),
    expression(paste(bold(delta^15),bold(N^bulk), sep="")),
    expression(paste(bold(delta^15),bold(N^alpha), sep="")),
    expression(paste(bold(delta^15),bold(N^beta), sep=""))
  ))+    
    
  xlim(0, 1)+
  ylim(-60, 50)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  
    #format axis titles
  theme(axis.title = element_text(size = 16))+
  theme(axis.text = element_text(size = 16))+
  xlab(expression(paste(bold("Fraction Reduced (1-"), italic("f"), bold(")"))))+
  ylab(expression(paste(bold(delta^15),bold(N),bold(" (\u2030)"),sep="")))+
  
  #format plot title
  theme(plot.title = element_text(size = 16))+
  theme(plot.title = element_text(face = "bold", vjust = -5))+
  theme(plot.subtitle = element_text(vjust = -10, hjust = 0.1))+  
  labs(
    title = expression(paste(bold("Normal "), bold(KIE^15), bold(N^alpha), bold(", Normal "), bold(KIE^15), bold(N^beta))),
    subtitle = expression(paste(bold("Dataset 2"))))+
 
  #format legend
  theme(legend.title = element_blank())
)

#save figure
ggsave(sim2_delta_v3, filename = here("graphs/sim2/sim2_delta_v3.tiff"), height = 3, width = 5, units = "in")
```

#Subset sim2 (f = 0.7 to 0.2).

sim2_tb1: similar to sim2_tb2, but sim2_tb1 doesnâ€™t have rho values
```{r sim2_tb1}
sim2_tb1 <- filter(sim2, f <= 0.75, f >= 0.25)

sim2_tb1 <- sim2_tb1 %>% select(-rho)
```

#Apply the standard Rayleigh model to delta_p, delta_alpha, and delta_beta

Name each version of the standard Rayleigh model.

f values: 0.7-0.2
```{r sim2_lm_delta}
sim2_lm_delta_p <- lm(delta_p ~ `-flnf/(1-f)`, data = sim2_tb1)

sim2_lm_delta_alpha <- lm(delta_alpha ~ `-flnf/(1-f)`, data = sim2_tb1)

sim2_lm_delta_beta <- lm(delta_beta ~ `-flnf/(1-f)`, data = sim2_tb1)
```

##Check the summary for each standard Rayleigh linear regression model (sim data subset).
```{r summary_sim2_lm}
(summary(sim2_lm_delta_p))
(rmse(sim2_lm_delta_p, sim2_tb1))

(summary(sim2_lm_delta_alpha))

(summary(sim2_lm_delta_beta))
```


##Graph no-error standard Rayleigh plots (x = [-flnf/(1-f)])

x = `-flnf/(1-f)`

y = `delta_p`, `delta_alpha`, or `delta_beta`

f values: 0.7-0.2
```{r plot_Rayleigh_leg, warning=FALSE}
sim2_tidy_2 <- sim2 %>% 
  pivot_longer(c(delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

sim2_tidy_2$delta_15N <- factor(sim2_tidy_2$delta_15N, levels = c("delta_p", "delta_alpha", "delta_beta"))


(sim2_Rayleigh <- ggplot(data = sim2_tidy_2, mapping = 
         aes(x = `-flnf/(1-f)`, y = delta_15N_values, shape = delta_15N, color = delta_15N))+
  geom_smooth(data = sim2_tidy_2, lty = 1, se = FALSE)+
  geom_point(data = filter(sim2_tidy_2, f <= 0.75, f >= 0.25), size = 2)+
  scale_color_manual(name = "delta values",
    values = c("grey48", "blue", "green4"),
    labels = c(
    expression(paste(bold(delta^15),bold(N^bulk), sep="")),
    expression(paste(bold(delta^15),bold(N^alpha), sep="")),
    expression(paste(bold(delta^15),bold(N^beta), sep=""))
  ))+
 
  scale_shape_manual(name = "delta values",
    values = c(16, 15, 17),
    labels = c(
    expression(paste(bold(delta^15),bold(N^bulk), sep="")),
    expression(paste(bold(delta^15),bold(N^alpha), sep="")),
    expression(paste(bold(delta^15),bold(N^beta), sep=""))
  ))+    
    
  xlim(0, 1)+
  ylim(-60, 50)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  
    #format axis titles
  theme(axis.title = element_text(size = 16))+
  theme(axis.text = element_text(size = 16))+
  xlab(expression(paste(bold("[-flnf/(1-f)]"))))+
  ylab(expression(paste(bold(delta^15),bold(N),bold(" (\u2030)"),sep="")))+
  
  #format plot title
  theme(plot.title = element_text(size = 16))+
  theme(plot.title = element_text(face = "bold", vjust = -5))+
  theme(plot.subtitle = element_text(vjust = -10, hjust = 0.1))+  
  labs(
    title = expression(paste(bold("Normal "), bold(KIE^15), bold(N^alpha), bold(", Normal "), bold(KIE^15), bold(N^beta))),
    subtitle = expression(paste(bold("Dataset 2"))))+
  
  #format legend
  theme(legend.title = element_blank())
)

#save figure
ggsave(sim2_Rayleigh, filename = here("graphs/sim2/sim2_Rayleigh.tiff"), height = 3, width = 5, units = "in")
```

##Calculate no-error KIEs using standard Rayleigh slope (epsilon).
```{r sim2_std_Ray_KIE}
(sim2_KIE_p_std <- 1000/(coef(sim2_lm_delta_p)["`-flnf/(1-f)`"] + 1000))

(sim2_KIE_alpha_std <- 1000/
  (coef(sim2_lm_delta_alpha)["`-flnf/(1-f)`"] + 1000))

(sim2_KIE_beta_std2 <- 1000/
  (coef(sim2_lm_delta_beta)["`-flnf/(1-f)`"] + 1000))
```


#Nonlinear model 1.2 (nls1.2, Eq. (29)) with simulated data, no error.

Use nonlinear model to determine rho

nls1.2: delta_p = 0.5*(delta_alpha + delta_beta) where delta_alpha is replaced by the rho equation (but delta_beta is not) and N_p is used as a variable instead of (1-f)*N_so
```{r sim2_nls1.2}
#Define nonlinear model 1 (nls1.2)
##Eq. (29)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 +
    delta_beta)
)

#Preview
##variable = `15N_p` (column 16)
preview(sim_formula_nls1.2, data = sim2_tb1,
        start = list(rho = 0.500), variable = 16)

sim2_nls1.2 <- nls(sim_formula_nls1.2, data = sim2_tb1,
    start = list(rho = 0.500)
)

overview(sim2_nls1.2)

(rmse(sim2_nls1.2, data = sim2_tb1))
```

##Plot predicted values (in red, sim2_nls1.2) and actual simulated values (no error) (in gray).
```{r predict_sim2_nls1.2}
sim2_tb1 <- sim2_tb1 %>%
  dplyr::mutate(delta_p_pred_nls1.2 = predict(sim2_nls1.2))

ggplot(data = sim2_tb1, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls1.2), color = "red",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  ggtitle("sim2 (no error) nls1.2")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())
```

##Store results for Expanded Rayleigh model 1 (sim2 no error)
```{r sim2_nls1.2_tb}
#Specify dataset
data = sim2_tb1

#Define formula: nls1.2 uses N_p instead of (1-f)*N_s0
##Eq. (29)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#Apply nonlinear model 1.2 (sim_formula_nls1.2) (defined above)
  sim2_nls1.2 <- nls(sim_formula_nls1.2, data = data,
    start = list(rho = 0.500)
)
  
#Store results in table
sim2_nls1.2_tb <- tibble(
    rho = as.numeric(coef(sim2_nls1.2)),
    se_rho = summary(sim2_nls1.2)$coefficients[1,2],
  
    #tau = `14N_alpha`/`14N_p`
    tau = mean(sim2_tb2$tau, na.rm = TRUE),
    se_tau = std.error(sim2_tb2$tau, na.rm = TRUE),
    
    #Add standard Rayleigh values for bulk delta_p to table  
    epsilon_p = as.numeric(sim2_lm_delta_p$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
    #Add values from nls1.2 to table
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )
```

#Nonlinear model 2.2 (nls2.2, Eq. (30)) with simulated data, no error.

nls2.2: delta_p = 0.5*(delta_alpha + delta_beta), where delta_beta is replaced by an equation with rho.
```{r sim2_nls2.2}
#Nonlinear model 2.2
##Eq. (30)
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

preview(sim_formula_nls2.2, data = sim2_tb1,
        start = list(rho = 0.500), variable = 16)

sim2_nls2.2 <- nls(sim_formula_nls2.2, data = sim2_tb1,
    start = list(rho = 0.500)
)

overview(sim2_nls2.2)

(rmse(sim2_nls2.2, data = sim2_tb1))
```

##Plot predicted values (in orange, sim2_nls2.2) and actual simulated values (sim2 no error) (gray).
```{r predict_sim2_nls2.2}
sim2_tb1 <- sim2_tb1 %>%
  dplyr::mutate(delta_p_pred_nls2.2 = predict(sim2_nls2.2))

ggplot(data = sim2_tb1, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls2.2), color = "darkorange2",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())
```

##Store results for Expanded Rayleigh model 2 (sim2 no error)
```{r nls2.2}
#Specify dataset
data = sim2_tb1

#Define formula: nls2.2 uses N_p instead of (1-f)*N_s0
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#Apply nonlinear model 2.2 (sim_formula_nls2.2) (defined above)
  sim2_nls2.2 <- nls(sim_formula_nls2.2, data = data,
    start = list(rho = 0.500)
)

sim2_nls2.2_tb <- tibble(
  
  #Add values from nls2.2 to table
    rho = as.numeric(coef(sim2_nls2.2)),
    se_rho = summary(sim2_nls2.2)$coefficients[1,2],
  
    tau = mean(sim2_tb2$tau, na.rm = TRUE),
    se_tau = std.error(sim2_tb2$tau, na.rm = TRUE),
    
  #Add standard Rayleigh values for bulk delta_p to table
    epsilon_p = as.numeric(sim2_lm_delta_p$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls2.2 to table
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )
```

#sim2_e1: Make another version of the table with error (low level, no skew) added to N_s, delta_p, and delta_alpha (0.25 < f < 0.75)

Make error for delta_beta dependent on the error for delta_p and delta_alpha.

Make error for delta_s dependent on delta_p and f.
  
Low-level error: Estimated experimental error level

  - sd (low) for N_s = 1.5% of max substrate (10000 nmol NO)
  
  - sd (low) for delta_p = 0.5 per mil (exp. (analytical) value)

  - sd (low) for delta_alpha = 0.7 per mil (exp. (analytical) value)
```{r sim2_e1}
set.seed(313)

#Subset data
sim2_e1 <- sim2 %>% 
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, delta_beta, replicate)


#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 0.015*sim2$N_s0[1], 0), "SN")  
error_1 <- rsn(n = length(sim2_e1$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 0.5, 0), "SN")  
error_2 <- rsn(n = length(sim2_e1$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 0.7, 0), "SN")  
error_3 <- rsn(n = length(sim2_e1$N_s), dp = params_3)


sim2_e1 <- sim2_e1 %>%  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        
        #Add R values, etc, for nonlinear modeling (nls1 and nls2)
        R_std = 0.0036765,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`,
        SP = delta_alpha - delta_beta
         )
```

##Graph delta_s, delta_p, delta_alpha, and delta_beta vs 1-f (sim2_e1)
```{r plot_sim2_e1, warning=FALSE}
(sim2_e1_delta <- ggplot(data = sim2_e1, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_s), color = "darkorange2",
             shape = 18)+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  xlab("1 - f")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)+
  ggtitle("Low Error, No Skew")
)
```

##Graph standard Rayleigh plots (x = -flnf/(1-f)) for delta_p, delta_alpha, and delta_beta (sim2_e1).
```{r plot_Std_Rayleigh_sim2_e1, warning=FALSE}
(sim2_e1_Ray <- ggplot(data = sim2_e1, mapping = 
         aes(x = `-flnf/(1-f)`))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  geom_smooth(mapping = aes(y = delta_p), color = "grey48",
              method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_alpha), color = "blue",
            method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_beta), color = "green4",
              method = lm, se = FALSE)+
  xlab("-flnf/(1-f)")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)

```

#Standard Rayleigh linear regression (delta N vs -flnf/(1-f)) (sim2_e1)
```{r lm_delta_p_e1}
sim2_lm_delta_p_e1 <- lm(delta_p ~ `-flnf/(1-f)`, data = sim2_e1)

sim2_lm_delta_alpha_e1 <- lm(delta_alpha ~ `-flnf/(1-f)`, data = sim2_e1)

sim2_lm_delta_beta_e1 <- lm(delta_beta ~ `-flnf/(1-f)`, data = sim2_e1)
```

##Check the summary for each standard Rayleigh linear regression model (sim2_e1).

The p-value for the slope comes from a two-tailed t test where the null hypothesis is that the slope is equal to 0.
```{r sim2_summary_lm_e1}
summary(sim2_lm_delta_p_e1)
summary(sim2_lm_delta_alpha_e1)
summary(sim2_lm_delta_beta_e1)
```

##Statistical tests for linear Rayleigh model (sim2_e1)
```{r stat_test_sim2_lm_delta_p_e1}
#sim2_e1
##Non-constant error variance test
car::ncvTest(sim2_lm_delta_p_e1)

##Levene's Test for Homogeneity of Variance (center = median)
sim2_e1$residuals <- sim2_lm_delta_p_e1$residuals
car::leveneTest(residuals ~ replicate, data = sim2_e1)

##Warning: group coerced to factor. (This is fine.)

##Jarque-Bera Normality Test
jarque.test(as.vector(sim2_lm_delta_p_e1$residuals))

##skewness of residuals
(sim2_e1_lm_stats <- tibble(
  lm_skew = skewness(sim2_lm_delta_p_e1$residuals),
  lm_delta_alpha_skew = skewness(sim2_lm_delta_alpha_e1$residuals),
  lm_delta_beta_skew = skewness(sim2_lm_delta_beta_e1$residuals)
)
)

##Plot histogram of residuals
hist(sim2_lm_delta_p_e1$residuals)
```

#Nonlinear model 1.2 (nls1.2) with simulated data with low error, no skew (sim2_e1)

nls1.2: delta_p = 0.5*(delta_alpha + delta_beta)
where delta_alpha is replaced by the rho equation (but delta_beta is not).

sim2_e1 = Low error (f range 0.75 to 0.25). (5 observations/replicate)
```{r sim2_e1_nls1.2}
#Define formula
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )


#sim2_e1 (5 observations/replicate)
preview(sim_formula_nls1.2, data = sim2_e1,
        start = list(rho = 0.500), variable = 18)

sim2_nls1.2_e1 <- nls(sim_formula_nls1.2, data = sim2_e1,
    start = list(rho = 0.500)
)

overview(sim2_nls1.2_e1)

(rmse(sim2_nls1.2_e1, data = sim2_e1))
```

##Plot predicted values (in red, sim2_nls1.2_e1) and actual simulated values (sim2_e1) (gray).
```{r predict_sim2_nls1.2_e1}
sim2_e1 <- sim2_e1 %>%
  dplyr::mutate(delta_p_pred_nls1.2 = predict(sim2_nls1.2_e1))

ggplot(data = sim2_e1, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls1.2), color = "red",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```

##Assess the goodness of fit through residuals for sim2_nls1.2_e1

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e1 = Low error, no skew (f range 0.75 to 0.25). (5 observations/replicate)
```{r sim2_e1_nls1.2_res}
#sim2_e1
sim2_nls1.2_res_e1 <- nlsResiduals(sim2_nls1.2_e1)

plot(sim2_nls1.2_res_e1)
```
##Plot residuals as histogram, assess distribution, and calculate p-value for rho (sim2_e1)

Convert t-test statistic to p-value for two-tailed t-test using pt()

p-value calculation: null hypothesis is rho = 0.5
t_test_statistic = (rho - rho_null)/se_rho

q = t-test statistic (one-sample, null hypothesis: rho = 0.5)

df = degrees of freedom, lower.tail = if true, calculate the probability to the left of q; if FALSE, calculate the probablity to the right of q

pt() calculates one-tailed p-value; multiply result by 2 to get two-tailed p-value.
```{r hist_sim2_e1_nls1.2}
#sim2_e1
sim2_nls1.2_res_e1_df1 <- as.data.frame(sim2_nls1.2_res_e1$resi1) 

hist(sim2_nls1.2_res_e1_df1$Residuals)

sim2_nls1.2_res_e1_df1$Replicate <- rep(c("A", "B", "C"), each = 5)

(sim2_nls1.2_res_e1_df2 <- tibble(
  nls_resid_min = min(sim2_nls1.2_res_e1_df1$Residuals),
  nls_resid_max = max(sim2_nls1.2_res_e1_df1$Residuals),
  nls_resid_sd = sd(sim2_nls1.2_res_e1_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls1.2_res_e1_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls1.2_res_e1_df1$Residuals),
  
 #p-value calculation: null hypothesis is rho = 0.5
 #t_test_statistic = (rho - rho_null)/se_rho
  nls_resid_t_test = (summary(sim2_nls1.2_e1)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls1.2_e1)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls1.2_e1), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls1.2_res_e1_df1$Residuals)

(summary(sim2_nls1.2_res_e1_df1$Residuals))
```

##Store results for Expanded Rayleigh model 1 (sim2_e1)

sim2_e1 = Low error, no skew (f range 0.75 to 0.25).
```{r sim2_nls1.2_e1_tb}

sim2_nls1.2_e1_tb <- tibble(
  
  #Add values from nls1.2 to table
    rho = as.numeric(coef(sim2_nls1.2_e1)),
    se_rho = summary(sim2_nls1.2_e1)$coefficients[1,2],
  
    tau = mean(sim2_e1 %>% .$tau),
    se_tau = std.error(sim2_e1 %>% .$tau),
    
  #Add standard Rayleigh values for bulk delta_p to table
    epsilon_p = as.numeric(sim2_lm_delta_p_e1$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e1)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e1$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls1.2 to table
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls1.2_e1_tb <- cbind(
  sim2_nls1.2_e1_tb,
  sim2_e1_lm_stats,
  sim2_nls1.2_res_e1_df2
)
```

#Nonlinear model 2.2 (nls2.2) with simulated data with low error, no skew (sim2_e1)

nls2.2: delta_p = 0.5*(delta_alpha + delta_beta), where delta_beta is replaced by an equation with rho.
```{r sim2_e1_nls2.2}
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#sim2_e1 (5 observations/replicate)
preview(sim_formula_nls2.2, data = sim2_e1,
        start = list(rho = 0.500), variable = 18)

sim2_nls2.2_e1 <- nls(sim_formula_nls2.2, data = sim2_e1,
    start = list(rho = 0.500)
)

overview(sim2_nls2.2_e1)

(rmse(sim2_nls2.2_e1, data = sim2_e1))
```

##Plot predicted values (in orange, sim2_nls2.2_e1) and actual simulated values (sim2_e1) (gray).

sim2_e1 = Low error (f range 0.75 to 0.25).
```{r predict_sim2_nls2.2_e1}
#sim2_e1
sim2_e1 <- sim2_e1 %>%
  dplyr::mutate(delta_p_pred_nls2.2 = predict(sim2_nls2.2_e1))

ggplot(data = sim2_e1, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls2.2), color = "darkorange2",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```

##Assess the goodness of fit through residuals for sim2_nls2.2_e1 
Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e1 = Low error, no skew (f range 0.75 to 0.25).
```{r sim2_e1_nls2.2_res}
#sim2_e1
sim2_nls2.2_res_e1 <- nlsResiduals(sim2_nls2.2_e1)

plot(sim2_nls2.2_res_e1)
```

##Plot residuals for nls2.2 as histogram, assess the distribution, and calculate p-value for rho (sim2_e1)
```{r hist_sim2_e1_nls2.2}
#sim2_e1
sim2_nls2.2_res_e1_df1 <- as.data.frame(sim2_nls2.2_res_e1$resi1) 

hist(sim2_nls2.2_res_e1_df1$Residuals)

(sim2_nls2.2_res_e1_df2 <- tibble(
  nls_resid_min = min(sim2_nls2.2_res_e1_df1$Residuals),
  nls_resid_max = max(sim2_nls2.2_res_e1_df1$Residuals),
  nls_resid_sd = sd(sim2_nls2.2_res_e1_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls2.2_res_e1_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls2.2_res_e1_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
 #t_test_statistic = (rho - rho_null)/se_rho
  nls_resid_t_test = 
   (summary(sim2_nls2.2_e1)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls2.2_e1)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls2.2_e1), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls2.2_res_e1_df1$Residuals)

(summary(sim2_nls2.2_res_e1_df1$Residuals))
```

##Store results for Expanded Rayleigh model 2 (sim2_e1)

sim2_e1 = Low error, no skew (f range 0.75 to 0.25).
```{r sim2_nls2.2_e1_tb}

sim2_nls2.2_e1_tb <- tibble(
    
  #Add values from nls2.2 to table
    rho = as.numeric(coef(sim2_nls2.2_e1)),
    se_rho = summary(sim2_nls2.2_e1)$coefficients[1,2],
  
    tau = mean(sim2_e1$tau, na.rm = TRUE),
    se_tau = std.error(sim2_e1$tau, na.rm = TRUE),
    
  #Add standard Rayleigh values for bulk delta_p to table      
    epsilon_p = as.numeric(sim2_lm_delta_p_e1$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e1)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e1$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls2.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls2.2_e1_tb <- cbind(
  sim2_nls2.2_e1_tb,
  sim2_e1_lm_stats,
  sim2_nls2.2_res_e1_df2
)
```

#sim2_e2: Make another version of the table with error (medium level, no skew) added to N_s, delta_p, and delta_alpha: sim2_e2 (0.25 < f < 0.75)

Make error for delta_beta dependent on the error for delta_p and delta_alpha.
Make error for delta_s dependent on delta_p and f.

  - sd (medium) for N_s = 3% of max substrate (10000 nmol NO) (2X greater than low-level error)

$$sd = 2*0.015*N_{s0} = 0.03*N_{s0}$$
  
  - sd (medium) for delta values: 2.5X greater than low-level values

    - sd (medium) for delta_p = 2.5*0.5 per mil = 1.25 per mil
  
    - sd (medium) for delta_alpha = 2.5*0.7 per mil  = 1.75 per mil
```{r sim2_e2}
set.seed(313)

#Subset data
sim2_e2 <- sim2 %>% 
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)


#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 2*0.015*sim2$N_s0[1], 0), "SN")  
error_1 <- rsn(n = length(sim2_e2$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 2.5*0.5, 0), "SN")  
error_2 <- rsn(n = length(sim2_e2$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 2.5*0.7, 0), "SN")  
error_3 <- rsn(n = length(sim2_e2$N_s), dp = params_3)


sim2_e2 <- sim2_e2 %>%  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        
        #Add R values, etc, for nonlinear modeling (nls1 and nls2)
        R_std = 0.0036765,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`,
        SP = delta_alpha - delta_beta
         )
```

##Graph delta_s, delta_p, delta_alpha, and delta_beta vs 1-f (sim2_e2)

sim2_e2: Medium-level error added to N_s, delta_p, and delta_s
```{r plot_sim2_e2, warning=FALSE}
(sim2_e2_delta <- ggplot(data = sim2_e2, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_s), color = "darkorange2",
             shape = 18)+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  xlab("1 - f")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)+
  ggtitle("Medium Error")
)

```

##Graph standard Rayleigh plots (x = -flnf/(1-f)) for delta_p, delta_alpha, and delta_beta (sim2_e2).

sim2_e2: Medium-level error added to N_s, delta_p, and delta_s
```{r plot_Std_Rayleigh_sim2_e2, warning=FALSE}
(sim2_e2_Ray <- ggplot(data = sim2_e2, mapping = 
         aes(x = `-flnf/(1-f)`))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  geom_smooth(mapping = aes(y = delta_p), color = "grey48",
              method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_alpha), color = "blue",
            method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_beta), color = "green4",
              method = lm, se = FALSE)+
  xlab("-flnf/(1-f)")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0, 1)
)
```
#Standard Rayleigh linear regression (delta N vs -flnf/(1-f)) (sim2_e2)
```{r lm_delta_p_e2}
sim2_lm_delta_p_e2 <- lm(delta_p ~ `-flnf/(1-f)`, data = sim2_e2)

sim2_lm_delta_alpha_e2 <- lm(delta_alpha ~ `-flnf/(1-f)`, data = sim2_e2)

sim2_lm_delta_beta_e2 <- lm(delta_beta ~ `-flnf/(1-f)`, data = sim2_e2)
```

##Check the summary for each standard Rayleigh linear regression model (sim2_e2).
```{r sim2_summary_lm_e2}
summary(sim2_lm_delta_p_e2)
summary(sim2_lm_delta_alpha_e2)
summary(sim2_lm_delta_beta_e2)
```
##Statistical tests for linear Rayleigh model (sim2_e2)
```{r stat_test_sim2_lm_delta_p_e2}
#sim2_e2
##Non-constant error variance test
car::ncvTest(sim2_lm_delta_p_e2)

##Levene's Test for Homogeneity of Variance (center = median)
sim2_e2$residuals <- sim2_lm_delta_p_e2$residuals
car::leveneTest(residuals ~ replicate, data = sim2_e2)

##Warning: group coerced to factor. (This is fine.)

##Jarque-Bera Normality Test
jarque.test(as.vector(sim2_lm_delta_p_e2$residuals))

##skewness of residuals
(sim2_e2_lm_stats <- tibble(
  lm_skew = skewness(sim2_lm_delta_p_e2$residuals),
  lm_delta_alpha_skew = skewness(sim2_lm_delta_alpha_e2$residuals),
  lm_delta_beta_skew = skewness(sim2_lm_delta_beta_e2$residuals)
)
)

##Plot histogram of residuals
hist(sim2_lm_delta_p_e2$residuals)
```

#Nonlinear model 1.2 (nls1.2) with simulated data with medium error, no skew (sim2_e2)

nls1.2: delta_p = 0.5*(delta_alpha + delta_beta) where delta_alpha is replaced by the rho equation (but delta_beta is not).

sim2_e2 = Medium error, no skew (f range 0.75 to 0.25) (5 observations/replicate)
```{r sim2_e2_nls1.2}
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#sim2_e2
preview(sim_formula_nls1.2, data = sim2_e2,
        start = list(rho = 0.500), variable = 18)

sim2_nls1.2_e2 <- nls(sim_formula_nls1.2, data = sim2_e2,
    start = list(rho = 0.500)
)

overview(sim2_nls1.2_e2)

(rmse(sim2_nls1.2_e2, data = sim2_e2))
```
##Plot predicted values (in red, sim2_nls1_e2) and actual simulated values (sim2_e2) (gray).
```{r predict_sim2_nls1.2_e2}
#sim2_e2 (5 observations/replicate)
sim2_e2 <- sim2_e2 %>%
  dplyr::mutate(delta_p_pred_nls1.2 = predict(sim2_nls1.2_e2))

ggplot(data = sim2_e2, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls1.2), color = "red",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```
##Assess the goodness of fit through residuals for sim2_nls1_e2 (R_alpha replaced by rho eqn).

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e2 = Medium error, no skew (f range 0.75 to 0.25).
```{r sim2_e2_nls1.2_res}
#sim2_e2
sim2_nls1.2_res_e2 <- nlsResiduals(sim2_nls1.2_e2)

plot(sim2_nls1.2_res_e2)
```

##Plot residuals for nls1.2 as histogram, assess distribution, and calculate p-value for rho (sim2_e2).
```{r hist_sim2_e2_nls1.2}
#sim2_e2 (5 observations/replicate)
sim2_nls1.2_res_e2_df1 <- as.data.frame(sim2_nls1.2_res_e2$resi1) 

hist(sim2_nls1.2_res_e2_df1$Residuals)

(sim2_nls1.2_res_e2_df2 <- tibble(
  nls_resid_min = min(sim2_nls1.2_res_e2_df1$Residuals),
  nls_resid_max = max(sim2_nls1.2_res_e2_df1$Residuals),
  nls_resid_sd = sd(sim2_nls1.2_res_e2_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls1.2_res_e2_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls1.2_res_e2_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls1.2_e2)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls1.2_e2)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls1.2_e2), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls1.2_res_e2_df1$Residuals)

(summary(sim2_nls1.2_res_e2_df1$Residuals))
```

##Store results for Expanded Rayleigh model 1 (sim2_e2)

sim2_e2 = Medium error, no skew (f range 0.75 to 0.25).
```{r sim2_nls1.2_e2_tb}

sim2_nls1.2_e2_tb <- tibble(
    
  #Add values from nls1.2 to table
    rho = as.numeric(coef(sim2_nls1.2_e2)),
    se_rho = summary(sim2_nls1.2_e2)$coefficients[1,2],
  
    tau = mean(sim2_e2 %>% .$tau),
    se_tau = std.error(sim2_e2 %>% .$tau),
    
  #Add standard Rayleigh values for bulk delta_p to table    
    epsilon_p = as.numeric(sim2_lm_delta_p_e2$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e2)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e2$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls1.2 to table
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls1.2_e2_tb <- cbind(
  sim2_nls1.2_e2_tb,
  sim2_e2_lm_stats,
  sim2_nls1.2_res_e2_df2
)
```

#Nonlinear model 2.2 (nls2.2) with simulated data with medium error, no skew (sim2_e2)

nls2.2: delta_p = 0.5*(delta_alpha + delta_beta), where delta_beta is replaced by an equation with rho.

sim2_e2 = Medium error, no skew (f range 0.75 to 0.25).
```{r sim2_e2_nls2.2}
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#sim2_e2 (5 observations/replicate)
preview(sim_formula_nls2.2, data = sim2_e2,
        start = list(rho = 0.500), variable = 18)

sim2_nls2.2_e2 <- nls(sim_formula_nls2.2, data = sim2_e2,
    start = list(rho = 0.500)
)

overview(sim2_nls2.2_e2)

(rmse(sim2_nls2.2_e2, data = sim2_e2))
```

##Plot predicted values (in orange, sim2_nls2.2_e2) and actual simulated values (sim2_e2) (gray).

sim2_e2 = Medium error, no skew (f range 0.75 to 0.25).
```{r predict_sim2_nls2.2_e2}
sim2_e2 <- sim2_e2 %>%
  dplyr::mutate(delta_p_pred_nls2.2 = predict(sim2_nls2.2_e2))

ggplot(data = sim2_e2, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls2.2), color = "darkorange2",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())
```
##Assess the goodness of fit through residuals for sim2_nls2.2_e2

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e2 = Medium error, no skew (f range 0.75 to 0.25).
```{r sim2_e2_nls2.2_res}
#sim2_e2 (5 observations/replicate)
sim2_nls2.2_res_e2 <- nlsResiduals(sim2_nls2.2_e2)

plot(sim2_nls2.2_res_e2)
```

##Plot residuals for nls2.2 as histogram, assess the distribution, and calculate p-value for rho (sim2_e2)
```{r hist_sim2_e2_nls2.2}
#sim2_e2
sim2_nls2.2_res_e2_df1 <- as.data.frame(sim2_nls2.2_res_e2$resi1) 

hist(sim2_nls2.2_res_e2_df1$Residuals)

(sim2_nls2.2_res_e2_df2 <- tibble(
  nls_resid_min = min(sim2_nls2.2_res_e2_df1$Residuals),
  nls_resid_max = max(sim2_nls2.2_res_e2_df1$Residuals),
  nls_resid_sd = sd(sim2_nls2.2_res_e2_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls2.2_res_e2_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls2.2_res_e2_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho
  nls_resid_t_test = (summary(sim2_nls2.2_e2)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls2.2_e2)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls2.2_e2), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls2.2_res_e2_df1$Residuals)

(summary(sim2_nls2.2_res_e2_df1$Residuals))
```

##Store results for Expanded Rayleigh model 2 (sim2_e2)

sim2_e2 = Medium error, no skew (f range 0.75 to 0.25).
```{r sim2_nls2.2_e2_tb}

sim2_nls2.2_e2_tb <- tibble(
  
  #Add values from nls2.2 to table
    rho = as.numeric(coef(sim2_nls2.2_e2)),
    se_rho = summary(sim2_nls2.2_e2)$coefficients[1,2],
  
    tau = mean(sim2_e2$tau, na.rm = TRUE),
    se_tau = std.error(sim2_e2$tau, na.rm = TRUE),
    
  #Add standard Rayleigh values for bulk delta_p to table  
    epsilon_p = as.numeric(sim2_lm_delta_p_e2$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e2)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e2$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls2.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls2.2_e2_tb <- cbind(
  sim2_nls2.2_e2_tb,
  sim2_e2_lm_stats,
  sim2_nls2.2_res_e2_df2
)
```

#sim2_e3: Make another version of the table with error (high level, no skew) added to N_s, delta_p, and delta_alpha: sim2_e3 (0.25 < f < 0.75)

Make error for delta_beta dependent on the error for delta_p and delta_alpha.

Make error for delta_s dependent on delta_p and f.

  - sd (high) for N_s = 4.5% of max substrate (10000 nmol NO) (3X greater than low-level error)

$$sd = 3*0.015*N_{s0} = 0.045*N_{s0}$$
  - sd (high) for delta values: 5X greater than low-level values
  
    - sd (high) for delta_p = 5*0.5 per mil = 2.5 per mil

    - sd (high) for delta_alpha = 5*0.7 per mil = 3.5 per mil
```{r sim2_e3}
set.seed(313)

#Subset data
sim2_e3 <- sim2 %>% 
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)


#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 3*0.015*sim2$N_s0[1], 0), "SN")  
error_1 <- rsn(n = length(sim2_e3$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 5*0.5, 0), "SN")  
error_2 <- rsn(n = length(sim2_e3$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 5*0.7, 0), "SN")  
error_3 <- rsn(n = length(sim2_e3$N_s), dp = params_3)

sim2_e3 <- sim2_e3 %>%  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        
        #Add R values, etc, for nonlinear modeling (nls1 and nls2)
        R_std = 0.0036765,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`,
        SP = delta_alpha - delta_beta
         )
```

##Graph delta_s, delta_p, delta_alpha, and delta_beta vs 1-f (sim2_e3)

sim2_e3: High-level error, no skew added to N_s, delta_p, and delta_s
```{r plot_sim2_e3, warning=FALSE}
(sim2_e3_delta <- ggplot(data = sim2_e3, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_s), color = "darkorange2",
             shape = 18)+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  xlab("1 - f")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)+
  ggtitle("High Error")
)
```

##Graph standard Rayleigh plots (x = -flnf/(1-f)) for delta_p, delta_alpha, and delta_beta (sim2_e3)

sim2_e3: High-level error, no skew added to N_s, delta_p, and delta_s
```{r plot_Std_Rayleigh_sim2_e3, warning=FALSE}
(sim2_e3_Ray <- ggplot(data = sim2_e3, mapping = 
         aes(x = `-flnf/(1-f)`))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  geom_smooth(mapping = aes(y = delta_p), color = "grey48",
              method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_alpha), color = "blue",
            method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_beta), color = "green4",
              method = lm, se = FALSE)+
  xlab("-flnf/(1-f)")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```

#Standard Rayleigh linear regression (delta N vs -flnf/(1-f)) (sim2_e3)
```{r lm_delta_p_e3}
sim2_lm_delta_p_e3 <- lm(delta_p ~ `-flnf/(1-f)`, data = sim2_e3)

sim2_lm_delta_alpha_e3 <- lm(delta_alpha ~ `-flnf/(1-f)`, data = sim2_e3)

sim2_lm_delta_beta_e3 <- lm(delta_beta ~ `-flnf/(1-f)`, data = sim2_e3)
```

##Check the summary for each standard Rayleigh linear regression model (sim2_e3).
```{r sim2_summary_lm_e3}
summary(sim2_lm_delta_p_e3)
summary(sim2_lm_delta_alpha_e3)
summary(sim2_lm_delta_beta_e3)
```
##Statistical tests for linear Rayleigh model (sim2_e3)
```{r stat_test_sim2_lm_delta_p_e3}
#sim2_e3
##Non-constant error variance test
car::ncvTest(sim2_lm_delta_p_e3)

##Levene's Test for Homogeneity of Variance (center = median)
sim2_e3$residuals <- sim2_lm_delta_p_e3$residuals
car::leveneTest(residuals ~ replicate, data = sim2_e3)

##Warning: group coerced to factor. (This is fine.)

##Jarque-Bera Normality Test
jarque.test(as.vector(sim2_lm_delta_p_e3$residuals))

##skewness of residuals
(sim2_e3_lm_stats <- tibble(
  lm_skew = skewness(sim2_lm_delta_p_e3$residuals),
  lm_delta_alpha_skew = skewness(sim2_lm_delta_alpha_e3$residuals),
  lm_delta_beta_skew = skewness(sim2_lm_delta_beta_e3$residuals)
)
)

##Plot histogram of residuals
hist(sim2_lm_delta_p_e3$residuals)
```

#Nonlinear model 1.2 (nls1.2) with simulated data with high error, no skew (sim2_e3)

nls1.2: delta_p = 0.5*(delta_alpha + delta_beta) where delta_alpha is replaced by the rho equation (but delta_beta is not).

sim2_e3 = High error (f range 0.75 to 0.25)
```{r sim2_e3_nls1.2}
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#sim2_e3
preview(sim_formula_nls1.2, data = sim2_e3,
        start = list(rho = 0.500), variable = 18)

sim2_nls1.2_e3 <- nls(sim_formula_nls1.2, data = sim2_e3,
    start = list(rho = 0.500)
)

overview(sim2_nls1.2_e3)

(rmse(sim2_nls1.2_e3, data = sim2_e3))
```

##Plot predicted values (in red, sim2_nls1_e3) and actual simulated values (sim2_e3) (gray).

sim2_e3 = High error, no skew (f range 0.75 to 0.25)
```{r predict_sim2_nls1.2_e3}
#sim2_e3
sim2_e3 <- sim2_e3 %>%
  dplyr::mutate(delta_p_pred_nls1.2 = predict(sim2_nls1.2_e3))

ggplot(data = sim2_e3, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls1.2), color = "red",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```

##Assess the goodness of fit through residuals for sim2_nls1_e3

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e3 = High error, no skew (f range 0.75 to 0.25)
```{r sim2_e3_nls1.2_res}
#sim2_e3
sim2_nls1.2_res_e3 <- nlsResiduals(sim2_nls1.2_e3)

plot(sim2_nls1.2_res_e3)
```

#Plot residuals as histogram, assess distribution, and calculate p-value for rho (sim2_e3).

sim2_e3 = High error, no skew (f range 0.75 to 0.25)
```{r hist_sim2_e3_nls1.2}
#sim2_e3
sim2_nls1.2_res_e3_df1 <- as.data.frame(sim2_nls1.2_res_e3$resi1) 

hist(sim2_nls1.2_res_e3_df1$Residuals)

(sim2_nls1.2_res_e3_df2 <- tibble(
  nls_resid_min = min(sim2_nls1.2_res_e3_df1$Residuals),
  nls_resid_max = max(sim2_nls1.2_res_e3_df1$Residuals),
  nls_resid_sd = sd(sim2_nls1.2_res_e3_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls1.2_res_e3_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls1.2_res_e3_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls1.2_e3)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls1.2_e3)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls1.2_e3), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls1.2_res_e3_df1$Residuals)

(summary(sim2_nls1.2_res_e3_df1$Residuals))
```

##Store results for Expanded Rayleigh model 1 (sim2_e3)

sim2_e3 = High error, no skew (f range 0.75 to 0.25).
```{r sim2_nls1.2_e3_tb}

sim2_nls1.2_e3_tb <- tibble(
  
  #Add values from nls1.2 to table
    rho = as.numeric(coef(sim2_nls1.2_e3)),
    se_rho = summary(sim2_nls1.2_e3)$coefficients[1,2],
  
    tau = mean(sim2_e3 %>% .$tau),
    se_tau = std.error(sim2_e3 %>% .$tau),
    
  #Add standard Rayleigh values for bulk delta_p to table
    epsilon_p = as.numeric(sim2_lm_delta_p_e3$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e3)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e3$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
   #Add values from nls1.2 to table
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls1.2_e3_tb <- cbind(
  sim2_nls1.2_e3_tb,
  sim2_e3_lm_stats,
  sim2_nls1.2_res_e3_df2
)
```

#Nonlinear model 2.2 (nls2.2) with simulated data with high error, no skew (sim2_e3)

nls2.2: delta_p = 0.5*(delta_alpha + delta_beta), where delta_beta is replaced by an equation with rho.

sim2_e3 = High error, no skew (f range 0.75 to 0.25)
```{r sim2_e3_nls2.2}
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#sim2_e3
preview(sim_formula_nls2.2, data = sim2_e3,
        start = list(rho = 0.500), variable = 18)

sim2_nls2.2_e3 <- nls(sim_formula_nls2.2, data = sim2_e3,
    start = list(rho = 0.500)
)

overview(sim2_nls2.2_e3)

(rmse(sim2_nls2.2_e3, data = sim2_e3))

```

##Plot predicted values (in orange, sim2_nls2.2_e3) and actual simulated values (sim2_e3) (gray).

sim2_e3 = High error, no skew (f range 0.75 to 0.25)
```{r predict_sim2_nls2.2_e3}

#sim2_e3
sim2_e3 <- sim2_e3 %>%
  dplyr::mutate(delta_p_pred_nls2.2 = predict(sim2_nls2.2_e3))

ggplot(data = sim2_e3, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls2.2), color = "darkorange2",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```

##Assess the goodness of fit through residuals for sim2_nls2.1_e3

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e3 = High error, no skew (f range 0.75 to 0.25)
```{r sim2_e3_nls2.2_res}
#sim2_e3
sim2_nls2.2_res_e3 <- nlsResiduals(sim2_nls2.2_e3)

plot(sim2_nls2.2_res_e3)
```

##Plot residuals as histogram, assess the distribution, and calculate p-value for rho (sim2_e3)

sim2_e3 = High error, no skew (f range 0.75 to 0.25)
```{r hist_sim2_e3_nls2.2}
#sim2_e3
sim2_nls2.2_res_e3_df1 <- as.data.frame(sim2_nls2.2_res_e3$resi1) 

hist(sim2_nls2.2_res_e3_df1$Residuals)

(sim2_nls2.2_res_e3_df2 <- tibble(
  nls_resid_min = min(sim2_nls2.2_res_e3_df1$Residuals),
  nls_resid_max = max(sim2_nls2.2_res_e3_df1$Residuals),
  nls_resid_sd = sd(sim2_nls2.2_res_e3_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls2.2_res_e3_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls2.2_res_e3_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls2.2_e3)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls2.2_e3)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls2.2_e3), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls2.2_res_e3_df1$Residuals)

(summary(sim2_nls2.2_res_e3_df1$Residuals))
```
##Store results for Expanded Rayleigh model 2 (sim2_e3).

sim2_e3 = High error, no skew (f range 0.75 to 0.25).
```{r sim2_nls2.2_e3_tb}

sim2_nls2.2_e3_tb <- tibble(
  
  #Add values from nls2.2 to table
    rho = as.numeric(coef(sim2_nls2.2_e3)),
    se_rho = summary(sim2_nls2.2_e3)$coefficients[1,2],
  
    tau = mean(sim2_e3$tau, na.rm = TRUE),
    se_tau = std.error(sim2_e3$tau, na.rm = TRUE),
    
  #Add standard Rayleigh values for bulk delta_p to table    
    epsilon_p = as.numeric(sim2_lm_delta_p_e3$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e3)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e3$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls2.2 to table
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls2.2_e3_tb <- cbind(
  sim2_nls2.2_e3_tb,
  sim2_e3_lm_stats,
  sim2_nls2.2_res_e3_df2
)
```

#sim2_e4: Make a table with low error, left skewed added to N_s, delta_p, and delta_alpha: sim2_e4 (0.25 < f < 0.75)

Make error for delta_beta dependent on the error for delta_p and delta_alpha.

Make error for delta_s dependent on delta_p and f.

Low-level error: Estimated experimental error level

  - sd (low) for N_s = 1.5% of max substrate (10000 nmol NO)
  
  - sd (low) for delta_p = 0.5 per mil (exp. (analytical) value)

  - sd (low) for delta_alpha = 0.7 per mil (exp. (analytical) value)

Skewness: Aiming for skewness of residuals for linear model < -0.5

Set omega (skewness) to -0.99

Assume measured [N2O] is lower than actual value (due to gas leaking from serum bottle). This would make calculated N_s values and f values higher than the actual values.

N_s = N_s0 - 2*[N2O]

f = N_s/N_s0
```{r sim2_e4}
set.seed(314)

#Subset data
sim2_e4 <- sim2 %>% 
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)


#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 0.015*sim2$N_s0[1], -0.99), "SN")  
error_1 <- rsn(n = length(sim2_e4$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 0.5, -0.99), "SN")  
error_2 <- rsn(n = length(sim2_e4$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 0.7, -0.99), "SN")  
error_3 <- rsn(n = length(sim2_e4$N_s), dp = params_3)


sim2_e4 <- sim2_e4 %>%  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        
        #Add R values, etc, for nonlinear modeling (nls1 and nls2)
        R_std = 0.0036765,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`,
        SP = delta_alpha - delta_beta
         )
```

##Graph delta_s, delta_p, delta_alpha, and delta_beta vs 1-f (sim2_e4)

sim2_e4: Low-level, left-skewed error added to N_s, delta_p, and delta_alpha
```{r plot_sim2_e4, warning=FALSE}
(sim2_e4_delta <- ggplot(data = sim2_e4, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_s), color = "darkorange2",
             shape = 18)+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  xlab("1 - f")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)+
  ggtitle("Low Error, Left Skew")
)
```

##Graph standard Rayleigh plots (x = -flnf/(1-f)) for delta_p,
#delta_alpha, and delta_beta (sim2_e4).

sim2_e4: Low error, left skew added to N_s, delta_p, and delta_alpha
```{r plot_Std_Rayleigh_sim2_e4, warning=FALSE}
(sim2_e4_Ray <- ggplot(data = sim2_e4, mapping = 
         aes(x = `-flnf/(1-f)`))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  geom_smooth(mapping = aes(y = delta_p), color = "grey48",
              method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_alpha), color = "blue",
            method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_beta), color = "green4",
              method = lm, se = FALSE)+
  xlab("-flnf/(1-f)")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```
#Standard Rayleigh linear regression (delta N vs -flnf/(1-f)) (sim2_e4)
```{r lm_delta_p_e4}
sim2_lm_delta_p_e4 <- lm(delta_p ~ `-flnf/(1-f)`, data = sim2_e4)

sim2_lm_delta_alpha_e4 <- lm(delta_alpha ~ `-flnf/(1-f)`, data = sim2_e4)

sim2_lm_delta_beta_e4 <- lm(delta_beta ~ `-flnf/(1-f)`, data = sim2_e4)
```

##Check the summary for each standard Rayleigh linear regression model (sim data with error randomly added to f, delta_p, and delta_alpha).
```{r sim2_summary_lm_e4}
summary(sim2_lm_delta_p_e4)
summary(sim2_lm_delta_alpha_e4)
summary(sim2_lm_delta_beta_e4)
```
##Statistical tests for linear Rayleigh model (sim2_e4)
```{r stat_test_sim2_lm_delta_p_e4}
#sim2_e4
##Non-constant error variance test
car::ncvTest(sim2_lm_delta_p_e4)

##Levene's Test for Homogeneity of Variance (center = median)
sim2_e4$residuals <- sim2_lm_delta_p_e4$residuals
car::leveneTest(residuals ~ replicate, data = sim2_e4)

##Warning: group coerced to factor. (This is fine.)

##Jarque-Bera Normality Test
jarque.test(as.vector(sim2_lm_delta_p_e4$residuals))

##skewness of residuals
(sim2_e4_lm_stats <- tibble(
  lm_skew = skewness(sim2_lm_delta_p_e4$residuals),
  lm_delta_alpha_skew = skewness(sim2_lm_delta_alpha_e4$residuals),
  lm_delta_beta_skew = skewness(sim2_lm_delta_beta_e4$residuals)
)
)

##Plot histogram of residuals
hist(sim2_lm_delta_p_e4$residuals)
```

#Nonlinear model 1.2 (nls1.2) with simulated data with low error, left-skewed (sim2_e4).

nls1.2: delta_p = 0.5*(delta_alpha + delta_beta) where delta_alpha is replaced by the rho equation (but delta_beta is not).

sim2_e4 = Low level, left-skewed error (f range 0.75 to 0.25)
```{r sim2_e4_nls1.2}
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#sim2_e4
preview(sim_formula_nls1.2, data = sim2_e4,
        start = list(rho = 0.500), variable = 18)

sim2_nls1.2_e4 <- nls(sim_formula_nls1.2, data = sim2_e4,
    start = list(rho = 0.500)
)

overview(sim2_nls1.2_e4)

(rmse(sim2_nls1.2_e4, data = sim2_e4))

```
##Plot predicted values (in red, sim2_nls1_e4) and actual simulated values (sim2_e4) (gray).

sim2_e4 = Low level, left-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_nls_e4}
#sim2_e4
sim2_e4 <- sim2_e4 %>%
  dplyr::mutate(delta_p_pred_nls1.2 = predict(sim2_nls1.2_e4))

ggplot(data = sim2_e4, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls1.2), color = "red",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```
##Assess the goodness of fit through residuals for sim2_nls1_e4

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e4 = Low level, left-skewed error (f range 0.75 to 0.25)
```{r sim2_e4_nls1.2_res_e4}
#sim2_e4
sim2_nls1.2_res_e4 <- nlsResiduals(sim2_nls1.2_e4)

plot(sim2_nls1.2_res_e4)
```
#Plot residuals as histogram, assess distribution, and calculate p-value for rho (sim2_e1)

sim2_e4 = Medium level, left-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e4_nls1.2}
#sim2_e4
sim2_nls1.2_res_e4_df1 <- as.data.frame(sim2_nls1.2_res_e4$resi1) 

hist(sim2_nls1.2_res_e4_df1$Residuals)

(sim2_nls1.2_res_e4_df2 <- tibble(
  nls_resid_min = min(sim2_nls1.2_res_e4_df1$Residuals),
  nls_resid_max = max(sim2_nls1.2_res_e4_df1$Residuals),
  nls_resid_sd = sd(sim2_nls1.2_res_e4_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls1.2_res_e4_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls1.2_res_e4_df1$Residuals),
  
 #p-value calculation: null hypothesis is rho = 0.5
 #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls1.2_e4)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls1.2_e4)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls1.2_e4), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls1.2_res_e4_df1$Residuals)

(summary(sim2_nls1.2_res_e4_df1$Residuals))
```
##Store results for Expanded Rayleigh model 1 (sim2_e4)

sim2_e4 = Low-level, left-skewed error (f range 0.75 to 0.25).
```{r sim2_nls1.2_e4_tb}

sim2_nls1.2_e4_tb <- tibble(
  
  #Add values from nls1.2 to table
    rho = as.numeric(coef(sim2_nls1.2_e4)),
    se_rho = summary(sim2_nls1.2_e4)$coefficients[1,2],
  
    tau = mean(sim2_e4 %>% .$tau),
    se_tau = std.error(sim2_e4 %>% .$tau),
    
  #Add standard Rayleigh values for bulk delta_p to table  
    epsilon_p = as.numeric(sim2_lm_delta_p_e4$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e4)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e4$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls1.2 to table
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls1.2_e4_tb <- cbind(
  sim2_nls1.2_e4_tb,
  sim2_e4_lm_stats,
  sim2_nls1.2_res_e4_df2
)
```

#Nonlinear model 2.2 (nls2.2) with sim2_e4 (low level, left-skewed error)

nls2.2: delta_p = 0.5*(delta_alpha + delta_beta), where delta_beta is replaced by an equation with rho.

sim2_e4 = Low-level, left-skewed eror (f range 0.75 to 0.25)
```{r sim2_e4_nls2.2}
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#sim2_e4
preview(sim_formula_nls2.2, data = sim2_e4,
        start = list(rho = 0.500), variable = 18)

sim2_nls2.2_e4 <- nls(sim_formula_nls2.2, data = sim2_e4,
    start = list(rho = 0.500)
)

overview(sim2_nls2.2_e4)

(rmse(sim2_nls2.2_e4, data = sim2_e4))
```

##Plot predicted values (in orange, sim2_nls2.2_e4) and actual simulated values (sim2_e4) (gray).

sim2_e4 = Low-level, left-skewed eror (f range 0.75 to 0.25)
```{r predict_sim2_nls2.2_e4}
#sim2_e4
sim2_e4 <- sim2_e4 %>%
  dplyr::mutate(delta_p_pred_nls2.2 = predict(sim2_nls2.2_e4))

ggplot(data = sim2_e4, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls2.2), color = "darkorange2",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```
##Assess the goodness of fit through residuals for sim2_nls2.2_e4

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e4 = Low-level, left-skewed eror (f range 0.75 to 0.25)
```{r sim2_e4_nls2.2_res_e4}
#sim2_e4
sim2_nls2.2_res_e4 <- nlsResiduals(sim2_nls2.2_e4)

plot(sim2_nls2.2_res_e4)

```

#Plot residuals as histogram, assess the distribution, and calculate p-value for rho (sim2_e4).

sim2_e4 = Low-level, left-skewed eror (f range 0.75 to 0.25)
```{r hist_sim2_e4_nls2.2}
#sim2_e4
sim2_nls2.2_res_e4_df1 <- as.data.frame(sim2_nls2.2_res_e4$resi1) 

hist(sim2_nls2.2_res_e4_df1$Residuals)

(sim2_nls2.2_res_e4_df2 <- tibble(
  nls_resid_min = min(sim2_nls2.2_res_e4_df1$Residuals),
  nls_resid_max = max(sim2_nls2.2_res_e4_df1$Residuals),
  nls_resid_sd = sd(sim2_nls2.2_res_e4_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls2.2_res_e4_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls2.2_res_e4_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls2.2_e4)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls2.2_e4)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls2.2_e4), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls2.2_res_e4_df1$Residuals)

(summary(sim2_nls2.2_res_e4_df1$Residuals))
```

##Store results for Expanded Rayleigh model 2 (sim2_e4)

sim2_e4 = Low-level, left-skewed eror (f range 0.75 to 0.25).
```{r sim2_nls2.2_e4_tb}

sim2_nls2.2_e4_tb <- tibble(
  
  #Add values from nls2.2 to table
    rho = as.numeric(coef(sim2_nls2.2_e4)),
    se_rho = summary(sim2_nls2.2_e4)$coefficients[1,2],
  
    tau = mean(sim2_e4$tau, na.rm = TRUE),
    se_tau = std.error(sim2_e4$tau, na.rm = TRUE),
    
  #Add standard Rayleigh values for bulk delta_p to table   
    epsilon_p = as.numeric(sim2_lm_delta_p_e4$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e4)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e4$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls2.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls2.2_e4_tb <- cbind(
  sim2_nls2.2_e4_tb,
  sim2_e4_lm_stats,
  sim2_nls2.2_res_e4_df2
)
```

#sim2_e5: Make a table with medium error, left skewed added to N_s, delta_p, and delta_alpha: sim2_e5 (0.25 < f < 0.75)

Make error for delta_beta dependent on the error for delta_p and delta_alpha.

Make error for delta_s dependent on delta_p and f.

  - sd (medium) for N_s = 3% of max substrate (10000 nmol NO) (2X greater than low-level error)

$$sd = 2*0.015*N_{s0} = 0.03*N_{s0}$$
  
  - sd (medium) for delta values: 2.5X greater than low-level values
  
    - sd (medium) for delta_p = 2.5*0.5 per mil = 1.25 per mil
    
    - sd (medium) for delta_alpha = 2.5*0.7 per mil = 1.75 per mil

Skewness: Aiming for skewness of residuals for linear model < -0.5

Set omega (skewness) to -0.99
```{r sim2_e5}
set.seed(314)

#Subset data
sim2_e5 <- sim2 %>% 
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)


#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 2*0.015*sim2$N_s0[1], -0.99), "SN")  
error_1 <- rsn(n = length(sim2_e5$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 2.5*0.5, -0.99), "SN")  
error_2 <- rsn(n = length(sim2_e5$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 2.5*0.7, -0.99), "SN")  
error_3 <- rsn(n = length(sim2_e5$N_s), dp = params_3)

sim2_e5 <- sim2_e5 %>%  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        
        #Add R values, etc, for nonlinear modeling (nls1 and nls2)
        R_std = 0.0036765,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`,
        SP = delta_alpha - delta_beta
         )
```

##Graph delta_s, delta_p, delta_alpha, and delta_beta vs 1-f (sim2_e5)

sim2_e5: Medium-level, left-skewed error added to N_s0, and N_s, delta_p, and delta_s
```{r plot_sim2_e5, warning=FALSE}
(sim2_e5_delta <- ggplot(data = sim2_e5, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_s), color = "darkorange2",
             shape = 18)+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  xlab("1 - f")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```

##Graph standard Rayleigh plots (x = -flnf/(1-f)) for delta_p, delta_alpha, and delta_beta (sim2_e5).

sim2_e5: Medium-level error added to N_s, delta_p, and delta_alpha
```{r plot_Std_Rayleigh_sim2_e5, warning=FALSE}
(sim2_e5_Ray <- ggplot(data = sim2_e5, mapping = 
         aes(x = `-flnf/(1-f)`))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  geom_smooth(mapping = aes(y = delta_p), color = "grey48",
              method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_alpha), color = "blue",
            method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_beta), color = "green4",
              method = lm, se = FALSE)+
  xlab("-flnf/(1-f)")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```
#Standard Rayleigh linear regression (delta N vs -flnf/(1-f)) (sim2_e5)
```{r lm_delta_p_e5}
sim2_lm_delta_p_e5 <- lm(delta_p ~ `-flnf/(1-f)`, data = sim2_e5)

sim2_lm_delta_alpha_e5 <- lm(delta_alpha ~ `-flnf/(1-f)`, data = sim2_e5)

sim2_lm_delta_beta_e5 <- lm(delta_beta ~ `-flnf/(1-f)`, data = sim2_e5)
```

##Check the summary for each standard Rayleigh linear regression model (sim2_e5)
```{r sim2_summary_lm_e5}
summary(sim2_lm_delta_p_e5)
summary(sim2_lm_delta_alpha_e5)
summary(sim2_lm_delta_beta_e5)
```

##Statistical tests for linear Rayleigh model (sim2_e5)
```{r stat_test_sim2_lm_delta_p_e5}
#sim2_e5
##Non-constant error variance test
car::ncvTest(sim2_lm_delta_p_e5)

##Levene's Test for Homogeneity of Variance (center = median)
sim2_e5$residuals <- sim2_lm_delta_p_e5$residuals
car::leveneTest(residuals ~ replicate, data = sim2_e5)

##Warning: group coerced to factor. (This is fine.)

##Jarque-Bera Normality Test
jarque.test(as.vector(sim2_lm_delta_p_e5$residuals))

##skewness of residuals
(sim2_e5_lm_stats <- tibble(
  lm_skew = skewness(sim2_lm_delta_p_e5$residuals),
  lm_delta_alpha_skew = skewness(sim2_lm_delta_alpha_e5$residuals),
  lm_delta_beta_skew = skewness(sim2_lm_delta_beta_e5$residuals)
)
)

##Plot histogram of residuals
hist(sim2_lm_delta_p_e5$residuals)
```

#Nonlinear model 1. (nls1.2) with simulated data with medium error, left-skewed.

nls1.2: delta_p = 0.5*(delta_alpha + delta_beta) where delta_alpha is replaced by the rho equation (but delta_beta is not).

sim2_e5 = Medium-level, left-skewed error
```{r sim2_e5_nls1.2}
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#sim2_e5
preview(sim_formula_nls1.2, data = sim2_e5,
        start = list(rho = 0.500), variable = 18)

sim2_nls1.2_e5 <- nls(sim_formula_nls1.2, data = sim2_e5,
    start = list(rho = 0.500)
)

overview(sim2_nls1.2_e5)

(rmse(sim2_nls1.2_e5, data = sim2_e5))
```

##Plot predicted values (in red, sim2_nls1_e5) and actual simulated values (sim2_e5) (gray).

sim2_e5 = Medium-level, left-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_nls_e5}
#sim2_e5
sim2_e5 <- sim2_e5 %>%
  dplyr::mutate(delta_p_pred_nls1.2 = predict(sim2_nls1.2_e5))

ggplot(data = sim2_e5, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls1.2), color = "red",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```

##Assess the goodness of fit through residuals for sim2_nls1_e5

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e5 = Medium-level, left-skewed error (f range 0.75 to 0.25)
```{r sim2_e5_nls1.2_res}
#sim2_e5
sim2_nls1.2_res_e5 <- nlsResiduals(sim2_nls1.2_e5)

plot(sim2_nls1.2_res_e5)

```
##Plot residuals as histogram,  assess distribution, and calculate p-value for rho (sim2_e5).

sim2_e5 = Medium-level, left-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e5_nls1.2}
#sim2_e5
sim2_nls1.2_res_e5_df1 <- as.data.frame(sim2_nls1.2_res_e5$resi1) 

hist(sim2_nls1.2_res_e5_df1$Residuals)

(sim2_nls1.2_res_e5_df2 <- tibble(
  nls_resid_min = min(sim2_nls1.2_res_e5_df1$Residuals),
  nls_resid_max = max(sim2_nls1.2_res_e5_df1$Residuals),
  nls_resid_sd = sd(sim2_nls1.2_res_e5_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls1.2_res_e5_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls1.2_res_e5_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho    
  nls_resid_t_test = (summary(sim2_nls1.2_e5)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls1.2_e5)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls1.2_e5), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls1.2_res_e5_df1$Residuals)

(summary(sim2_nls1.2_res_e5_df1$Residuals))
```
##Store results for Expanded Rayleigh model 1 (sim2_e5)

sim2_e5 = Medium-level, left-skewed error (f range 0.75 to 0.25).
```{r sim2_nls1.2_e5_tb}

sim2_nls1.2_e5_tb <- tibble(

  #Add values from nls1.2 to table    
    rho = as.numeric(coef(sim2_nls1.2_e5)),
    se_rho = summary(sim2_nls1.2_e5)$coefficients[1,2],
  
    tau = mean(sim2_e5 %>% .$tau),
    se_tau = std.error(sim2_e5 %>% .$tau),
    
  #Add standard Rayleigh values for bulk delta_p to table    
    epsilon_p = as.numeric(sim2_lm_delta_p_e5$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e5)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e5$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls1.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls1.2_e5_tb <- cbind(
  sim2_nls1.2_e5_tb,
  sim2_e5_lm_stats,
  sim2_nls1.2_res_e5_df2
)
```

#Nonlinear model 2.2 (nls2.2) with sim2_e5 (medium, left-skewed error)

nls2.2: delta_p = 0.5*(delta_alpha + delta_beta), where delta_beta is replaced by an equation with rho.

sim2_e5 = medium-level, left-skewed error (f range 0.75 to 0.25)
```{r sim2_e5_nls2.2}
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#sim2_e5
preview(sim_formula_nls2.2, data = sim2_e5,
        start = list(rho = 0.500), variable = 18)

sim2_nls2.2_e5 <- nls(sim_formula_nls2.2, data = sim2_e5,
    start = list(rho = 0.500)
)

overview(sim2_nls2.2_e5)

(rmse(sim2_nls2.2_e5, data = sim2_e5))
```
##Plot predicted values (in orange, sim2_nls2.2_e5) and actual simulated values (sim2_e5) (gray).

sim2_e5 = medium-level, left-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_nls2.2_e5}
#sim2_e5
sim2_e5 <- sim2_e5 %>%
  dplyr::mutate(delta_p_pred_nls2.2 = predict(sim2_nls2.2_e5))

ggplot(data = sim2_e5, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls2.2), color = "darkorange2",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```

##Assess the goodness of fit through residuals for sim2_nls1_e5

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e5 = medium-level, left-skewed error (f range 0.75 to 0.25)
```{r sim2_e5_nls2.2_res}
#sim2_e5
sim2_nls2.2_res_e5 <- nlsResiduals(sim2_nls2.2_e5)

plot(sim2_nls2.2_res_e5)

```

##Plot residuals as histogram, assess the distribution, and calculate p-value for rho (sim2_e5)

sim2_e5 = medium-level, left-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e5_nls2.2}
#sim2_e5
sim2_nls2.2_res_e5_df1 <- as.data.frame(sim2_nls2.2_res_e5$resi1) 

hist(sim2_nls2.2_res_e5_df1$Residuals)

(sim2_nls2.2_res_e5_df2 <- tibble(
  nls_resid_min = min(sim2_nls2.2_res_e5_df1$Residuals),
  nls_resid_max = max(sim2_nls2.2_res_e5_df1$Residuals),
  nls_resid_sd = sd(sim2_nls2.2_res_e5_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls2.2_res_e5_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls2.2_res_e5_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls2.2_e5)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls2.2_e5)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls2.2_e5), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls2.2_res_e5_df1$Residuals)

(summary(sim2_nls2.2_res_e5_df1$Residuals))
```

##Store results for Expanded Rayleigh model 2 (sim2_e5)

sim2_e5 = medium-level, left-skewed error (f range 0.75 to 0.25).
```{r sim2_nls2.2_e5_tb}

sim2_nls2.2_e5_tb <- tibble(
  
  #Add values from nls2.2 to table  
    rho = as.numeric(coef(sim2_nls2.2_e5)),
    se_rho = summary(sim2_nls2.2_e5)$coefficients[1,2],
  
    tau = mean(sim2_e5$tau, na.rm = TRUE),
    se_tau = std.error(sim2_e5$tau, na.rm = TRUE),
    
  #Add standard Rayleigh values for bulk delta_p to table    
    epsilon_p = as.numeric(sim2_lm_delta_p_e5$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e5)$coefficients[2,2],
    
  #Add values from nls2.2 to table  
    ff_p = 1 + sim2_lm_delta_p_e5$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls2.2_e5_tb <- cbind(
  sim2_nls2.2_e5_tb,
  sim2_e5_lm_stats,
  sim2_nls2.2_res_e5_df2
)
```

#sim2_e6: Make a table with high error, left skewed added to N_s, delta_p, and delta_alpha: sim2_e6 (0.25 < f < 0.75)

Make error for delta_beta dependent on the error for delta_p and delta_alpha.

Make error for delta_s dependent on delta_p and f.

  - sd (high) for N_s = 4.5% of max substrate (10000 nmol NO) (3X greater than low-level error)

$$sd = 3*0.015*N_{s0} = 0.045*N_{s0}$$
  
  - error for delta values: 5X greater than low-level values

    - sd (high) for delta_p = 5*0.5 per mil = 2.5 per mil
sd (high) for delta_alpha = 5*0.7 per mil = 3.5 per mil

Skewness: Aiming for skewness of residuals for linear model < -0.5

Set omega (skewness) to -0.99
```{r sim2_e6}
set.seed(314)

#Subset data
sim2_e6 <- sim2 %>% 
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)


#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 3*0.015*sim2$N_s0[1], -0.99), "SN")  
error_1 <- rsn(n = length(sim2_e6$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 5*0.5, -0.99), "SN")  
error_2 <- rsn(n = length(sim2_e6$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 5*0.7, -0.99), "SN")  
error_3 <- rsn(n = length(sim2_e6$N_s), dp = params_3)


sim2_e6 <- sim2_e6 %>%  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        
        #Add R values, etc, for nonlinear modeling (nls1 and nls2)
        R_std = 0.0036765,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`,
        SP = delta_alpha - delta_beta
         )
```

##Graph delta_s, delta_p, delta_alpha, and delta_beta vs 1-f (sim2_e6)

sim2_e6: High-level, left-skewed error
```{r plot_sim2_e6, warning=FALSE}
(sim2_e6_delta <- ggplot(data = sim2_e6, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_s), color = "darkorange2",
             shape = 18)+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  xlab("1 - f")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```

##Graph standard Rayleigh plots (x = -flnf/(1-f)) for delta_p, delta_alpha, and delta_beta (sim2_e6).

sim2_e6:  High-level, left-skewed error
```{r plot_Std_Rayleigh_sim2_e6, warning=FALSE}
(sim2_e6_Ray <- ggplot(data = sim2_e6, mapping = 
         aes(x = `-flnf/(1-f)`))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  geom_smooth(mapping = aes(y = delta_p), color = "grey48",
              method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_alpha), color = "blue",
            method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_beta), color = "green4",
              method = lm, se = FALSE)+
  xlab("-flnf/(1-f)")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```

#Standard Rayleigh linear regression (delta N vs -flnf/(1-f)) (sim2_e6)
```{r lm_delta_p_e6}
sim2_lm_delta_p_e6 <- lm(delta_p ~ `-flnf/(1-f)`, data = sim2_e6)

sim2_lm_delta_alpha_e6 <- lm(delta_alpha ~ `-flnf/(1-f)`, data = sim2_e6)

sim2_lm_delta_beta_e6 <- lm(delta_beta ~ `-flnf/(1-f)`, data = sim2_e6)
```

##Check the summary for each standard Rayleigh linear regression model sim2_e6.
```{r sim2_summary_lm_e6}
summary(sim2_lm_delta_p_e6)
summary(sim2_lm_delta_alpha_e6)
summary(sim2_lm_delta_beta_e6)
```
##Statistical tests for linear Rayleigh model (sim2_e6)
```{r stat_test_sim2_lm_delta_p_e6}
#sim2_e6
##Non-constant error variance test
car::ncvTest(sim2_lm_delta_p_e6)

##Levene's Test for Homogeneity of Variance (center = median)
sim2_e6$residuals <- sim2_lm_delta_p_e6$residuals
car::leveneTest(residuals ~ replicate, data = sim2_e6)

##Warning: group coerced to factor. (This is fine.)

##Jarque-Bera Normality Test
jarque.test(as.vector(sim2_lm_delta_p_e6$residuals))

##skewness of residuals
(sim2_e6_lm_stats <- tibble(
  lm_skew = skewness(sim2_lm_delta_p_e6$residuals),
  lm_delta_alpha_skew = skewness(sim2_lm_delta_alpha_e6$residuals),
  lm_delta_beta_skew = skewness(sim2_lm_delta_beta_e6$residuals)
)
)

##Plot histogram of residuals
hist(sim2_lm_delta_p_e6$residuals)
```

#Nonlinear model 1.2 (nls1.1) with sim2_e6 (high-level, left-skewed error)

nls1.2: delta_p = 0.5*(delta_alpha + delta_beta) where delta_alpha is replaced by the rho equation (but delta_beta is not).

sim2_e6 = high-level, left-skewed error (f range 0.75 to 0.25)
```{r sim2_e6_nls1.2}
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#sim2_e6
preview(sim_formula_nls1.2, data = sim2_e6,
        start = list(rho = 0.500), variable = 18)

sim2_nls1.2_e6 <- nls(sim_formula_nls1.2, data = sim2_e6,
    start = list(rho = 0.500)
)

overview(sim2_nls1.2_e6)

(rmse(sim2_nls1.2_e6, data = sim2_e6))
```
##Plot predicted values (in red, sim2_nls1_e6) and actual simulated values (sim2_e6) (gray).

sim2_e6 = high-level, left-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_e6_nls1.2}
#sim2_e6
sim2_e6 <- sim2_e6 %>%
  dplyr::mutate(delta_p_pred_nls1.2 = predict(sim2_nls1.2_e6))

ggplot(data = sim2_e6, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls1.2), color = "red",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())
```
##Assess the goodness of fit through residuals for sim2_nls1_e6.

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e6 =high-level, left-skewed error (f range 0.75 to 0.25)
```{r sim2_e6_nls1.2_res}
#sim2_e6
sim2_nls1.2_res_e6 <- nlsResiduals(sim2_nls1.2_e6)

plot(sim2_nls1.2_res_e6)

```
#Plot residuals as histogram, assess distribution, and calculate p-value for rho (sim2_e6).

sim2_e6 = high-level, left-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e6_nls1.2}
#sim2_e6
sim2_nls1.2_res_e6_df1 <- as.data.frame(sim2_nls1.2_res_e6$resi1) 

hist(sim2_nls1.2_res_e6_df1$Residuals)

(sim2_nls1.2_res_e6_df2 <- tibble(
  nls_resid_min = min(sim2_nls1.2_res_e6_df1$Residuals),
  nls_resid_max = max(sim2_nls1.2_res_e6_df1$Residuals),
  nls_resid_sd = sd(sim2_nls1.2_res_e6_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls1.2_res_e6_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls1.2_res_e6_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho    
  nls_resid_t_test = (summary(sim2_nls1.2_e6)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls1.2_e6)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls1.2_e6), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls1.2_res_e6_df1$Residuals)

(summary(sim2_nls1.2_res_e6_df1$Residuals))
```
##Store results for Expanded Rayleigh model 1 (sim2_e6)

sim2_e6 = high-level, left-skewed error (f range 0.75 to 0.25).
```{r sim2_nls1.2_e6_tb}

sim2_nls1.2_e6_tb <- tibble(
  
  #Add values from nls1.2 to table
    rho = as.numeric(coef(sim2_nls1.2_e6)),
    se_rho = summary(sim2_nls1.2_e6)$coefficients[1,2],
  
    tau = mean(sim2_e6 %>% .$tau),
    se_tau = std.error(sim2_e6 %>% .$tau),
    
  #Add standard Rayleigh values for bulk delta_p to table  
    epsilon_p = as.numeric(sim2_lm_delta_p_e6$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e6)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e6$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls1.2 to table
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls1.2_e6_tb <- cbind(
  sim2_nls1.2_e6_tb,
  sim2_e6_lm_stats,
  sim2_nls1.2_res_e6_df2
)
```

#Nonlinear model 2.2 (nls2.2) with simulated data with high error, left-skewed.

nls2.2: delta_p = 0.5*(delta_alpha + delta_beta), where delta_beta is replaced by an equation with rho.

sim2_e6 = high-level, left-skewed error (f range 0.75 to 0.25)
```{r sim2_e6_nls2.2}
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#sim2_e6
preview(sim_formula_nls2.2, data = sim2_e6,
        start = list(rho = 0.500), variable = 18)

sim2_nls2.2_e6 <- nls(sim_formula_nls2.2, data = sim2_e6,
    start = list(rho = 0.500)
)

overview(sim2_nls2.2_e6)

(rmse(sim2_nls2.2_e6, data = sim2_e6))
```

##Plot predicted values (in orange, sim2_nls2.2_e6) and actual simulated values (sim2_e6) (gray).

sim2_e6 = high-level, left-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_nls2.2_e6}
#sim2_e6
sim2_e6 <- sim2_e6 %>%
  dplyr::mutate(delta_p_pred_nls2.2 = predict(sim2_nls2.2_e6))

ggplot(data = sim2_e6, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls2.2), color = "darkorange2",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```
##Assess the goodness of fit through residuals for sim2_nls2.2_e6

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e6 = high-level, left-skewed error (f range 0.75 to 0.25)
```{r sim2_e6_nls2.2_res}
#sim2_e6
sim2_nls2.2_res_e6 <- nlsResiduals(sim2_nls2.2_e6)

plot(sim2_nls2.2_res_e6)

```

##Plot residuals as histogram, assess the distribution, and calculate p-value for rho (sim2_e6)

sim2_e6 = high-level, left-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e6_nls2.2}
#sim2_e6
sim2_nls2.2_res_e6_df1 <- as.data.frame(sim2_nls2.2_res_e6$resi1) 

hist(sim2_nls2.2_res_e6_df1$Residuals)

(sim2_nls2.2_res_e6_df2 <- tibble(
  nls_resid_min = min(sim2_nls2.2_res_e6_df1$Residuals),
  nls_resid_max = max(sim2_nls2.2_res_e6_df1$Residuals),
  nls_resid_sd = sd(sim2_nls2.2_res_e6_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls2.2_res_e6_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls2.2_res_e6_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls2.2_e6)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls2.2_e6)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls2.2_e6), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls2.2_res_e6_df1$Residuals)

(summary(sim2_nls2.2_res_e6_df1$Residuals))
```
##Store results for Expanded Rayleigh model 2 (sim2_e6)

sim2_e6 = high-level, left-skewed error (f range 0.75 to 0.25).
```{r sim2_nls2.2_e6_tb}

sim2_nls2.2_e6_tb <- tibble(
  
  #Add values from nls2.2 to table
    rho = as.numeric(coef(sim2_nls2.2_e6)),
    se_rho = summary(sim2_nls2.2_e6)$coefficients[1,2],
  
    tau = mean(sim2_e6$tau, na.rm = TRUE),
    se_tau = std.error(sim2_e6$tau, na.rm = TRUE),
    
  #Add standard Rayleigh values for bulk delta_p to table    
    epsilon_p = as.numeric(sim2_lm_delta_p_e6$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e6)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e6$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls2.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls2.2_e6_tb <- cbind(
  sim2_nls2.2_e6_tb,
  sim2_e6_lm_stats,
  sim2_nls2.2_res_e6_df2
)
```

#sim2_e7: Make a table with low-level, right-skewed error added to N_s, delta_p, and delta_alpha (0.25 < f < 0.75)

Make error for delta_beta dependent on the error for delta_p and delta_alpha.

Make error for delta_s dependent on delta_p and f.

Low-level error: Estimated experimental error level

  - sd (low) for N_s = 1.5% of max substrate (10000 nmol NO)

  - sd (low) for delta_p = 0.5 per mil (exp. (analytical) value)

  - sd (low) for delta_alpha = 0.7 per mil (exp. (analytical) value)

Skewness: Aiming for skewness of residuals for linear model > 0.5

Set omega (skewness) to 0.99
```{r sim2_e7}
set.seed(314)

#Subset data
sim2_e7 <- sim2 %>% 
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)


#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 0.015*sim2$N_s0[1], 0.99), "SN")  
error_1 <- rsn(n = length(sim2_e7$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 0.5, 0.99), "SN")  
error_2 <- rsn(n = length(sim2_e7$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 0.7, 0.99), "SN")  
error_3 <- rsn(n = length(sim2_e7$N_s), dp = params_3)

sim2_e7 <- sim2_e7 %>%  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        
        #Add R values, etc, for nonlinear modeling (nls1 and nls2)
        R_std = 0.0036765,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`,
        SP = delta_alpha - delta_beta
         )
```

##Graph delta_s, delta_p, delta_alpha, and delta_beta vs 1-f (sim2_e7)

sim2_e7: Low-level, right-skewed error
```{r plot_sim2_e7, warning=FALSE}
(sim2_e7_delta <- ggplot(data = sim2_e7, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_s), color = "darkorange2",
             shape = 18)+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  xlab("1 - f")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)+
  ggtitle("Low Error, Right-Skewed")
)
```

##Graph standard Rayleigh plots (x = -flnf/(1-f)) for delta_p, delta_alpha, and delta_beta (sim2_e7)

sim2_e7: Low-level, right-skewed error
```{r plot_Std_Rayleigh_sim2_e7, warning=FALSE}
(sim2_e7_Ray <- ggplot(data = sim2_e7, mapping = 
         aes(x = `-flnf/(1-f)`))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  geom_smooth(mapping = aes(y = delta_p), color = "grey48",
              method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_alpha), color = "blue",
            method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_beta), color = "green4",
              method = lm, se = FALSE)+
  xlab("-flnf/(1-f)")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```
#Standard Rayleigh linear regression (delta N vs -flnf/(1-f))
```{r lm_delta_p_e7}
sim2_lm_delta_p_e7 <- lm(delta_p ~ `-flnf/(1-f)`, data = sim2_e7)

sim2_lm_delta_alpha_e7 <- lm(delta_alpha ~ `-flnf/(1-f)`, data = sim2_e7)

sim2_lm_delta_beta_e7 <- lm(delta_beta ~ `-flnf/(1-f)`, data = sim2_e7)
```

##Check the summary for each standard Rayleigh linear regression model (sim data with error randomly added to delta_s0 and N_s, delta_p, and delta_alpha).
```{r sim2_summary_lm_e7}
summary(sim2_lm_delta_p_e7)
summary(sim2_lm_delta_alpha_e7)
summary(sim2_lm_delta_beta_e7)
```
##Statistical tests for linear Rayleigh model (sim2_e7)
```{r stat_test_sim2_lm_delta_p_e7}
#sim2_e7
##Non-constant error variance test
car::ncvTest(sim2_lm_delta_p_e7)

##Levene's Test for Homogeneity of Variance (center = median)
sim2_e7$residuals <- sim2_lm_delta_p_e7$residuals
car::leveneTest(residuals ~ replicate, data = sim2_e7)

##Warning: group coerced to factor. (This is fine.)

##Jarque-Bera Normality Test
jarque.test(as.vector(sim2_lm_delta_p_e7$residuals))

##skewness of residuals
(sim2_e7_lm_stats <- tibble(
  lm_skew = skewness(sim2_lm_delta_p_e7$residuals),
  lm_delta_alpha_skew = skewness(sim2_lm_delta_alpha_e7$residuals),
  lm_delta_beta_skew = skewness(sim2_lm_delta_beta_e7$residuals)
)
)

##Plot histogram of residuals
hist(sim2_lm_delta_p_e7$residuals)
```

#Nonlinear model 1.2 (nls1.2) with sim2_e7 (low error, right-skewed)

nls1.2: delta_p = 0.5*(delta_alpha + delta_beta) where delta_alpha is replaced by the rho equation (but delta_beta is not).

sim2_e7 = Low-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e7_nls1.2}
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#sim2_e7
preview(sim_formula_nls1.2, data = sim2_e7,
        start = list(rho = 0.500), variable = 18)

sim2_nls1.2_e7 <- nls(sim_formula_nls1.2, data = sim2_e7,
    start = list(rho = 0.500)
)

overview(sim2_nls1.2_e7)

(rmse(sim2_nls1.2_e7, data = sim2_e7))
```
##Plot predicted values (in red, sim2_nls1_e7) and actual simulated values (sim2_e7) (gray).

sim2_e7 = Low-level, right-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_e7_nls1.2}
#sim2_e7
sim2_e7 <- sim2_e7 %>%
  dplyr::mutate(delta_p_pred_nls1.2 = predict(sim2_nls1.2_e7))

ggplot(data = sim2_e7, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls1.2), color = "red",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```

##Assess the goodness of fit through residuals for sim2_nls1_e7.

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e7 = Low-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e7_nls1.2_res}
#sim2_e7
sim2_nls1.2_res_e7 <- nlsResiduals(sim2_nls1.2_e7)

plot(sim2_nls1.2_res_e7)

```

##Plot residuals as histogram, assess distribution, and calculate p-value for rho (sim2_e7)

sim2_e7 = Low-level, right-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e7_nls1.2}
#sim2_e7
sim2_nls1.2_res_e7_df1 <- as.data.frame(sim2_nls1.2_res_e7$resi1) 

hist(sim2_nls1.2_res_e7_df1$Residuals)

(sim2_nls1.2_res_e7_df2 <- tibble(
  nls_resid_min = min(sim2_nls1.2_res_e7_df1$Residuals),
  nls_resid_max = max(sim2_nls1.2_res_e7_df1$Residuals),
  nls_resid_sd = sd(sim2_nls1.2_res_e7_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls1.2_res_e7_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls1.2_res_e7_df1$Residuals),
  
 #p-value calculation: null hypothesis is rho = 0.5
 #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls1.2_e7)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls1.2_e7)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls1.2_e7), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls1.2_res_e7_df1$Residuals)

(summary(sim2_nls1.2_res_e7_df1$Residuals))
```

##Store results for Expanded Rayleigh model 1 (sim2_e7)

sim2_e7 = Low-level, right-skewed error (f range 0.75 to 0.25).
```{r sim2_nls1.2_e7_tb}

sim2_nls1.2_e7_tb <- tibble(
  
  #Add values from nls1.2 to table
    rho = as.numeric(coef(sim2_nls1.2_e7)),
    se_rho = summary(sim2_nls1.2_e7)$coefficients[1,2],
  
    tau = mean(sim2_e7 %>% .$tau),
    se_tau = std.error(sim2_e7 %>% .$tau),
    
  #Add standard Rayleigh values for bulk delta_p to table    
    epsilon_p = as.numeric(sim2_lm_delta_p_e7$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e7)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e7$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls1.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls1.2_e7_tb <- cbind(
  sim2_nls1.2_e7_tb,
  sim2_e7_lm_stats,
  sim2_nls1.2_res_e7_df2
)
```

#Nonlinear model 2.2 (nls2.2) with sim2_e7 (Low-level, right-skewed error)

nls2.2: delta_p = 0.5*(delta_alpha + delta_beta), where delta_beta is replaced by an equation with rho.

sim2_e7 = Low-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e7_nls2.2}
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#sim2_e7
preview(sim_formula_nls2.2, data = sim2_e7,
        start = list(rho = 0.500), variable = 18)

sim2_nls2.2_e7 <- nls(sim_formula_nls2.2, data = sim2_e7,
    start = list(rho = 0.500)
)

overview(sim2_nls2.2_e7)

(rmse(sim2_nls2.2_e7, data = sim2_e7))
```

##Plot predicted values (in orange, sim2_nls2.2_e7) and actual simulated values (sim2_e7) (gray).

sim2_e7 = Low-level, right-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_nls2.2_e7}
#sim2_e7
sim2_e7 <- sim2_e6 %>%
  dplyr::mutate(delta_p_pred_nls2.2 = predict(sim2_nls2.2_e7))

ggplot(data = sim2_e7, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls2.2), color = "darkorange2",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```
##Assess the goodness of fit through residuals for sim2_nls1_e7

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e7 = Low-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e7_nls2.2_res}
#sim2_e7
sim2_nls2.2_res_e7 <- nlsResiduals(sim2_nls2.2_e7)

plot(sim2_nls2.2_res_e7)
```

##Plot residuals as histogram, assess the distribution, and calculate p-value for rho (sim2_e7)

sim2_e7 = Low-level, right-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e7_nls2.2}
#sim2_e7
sim2_nls2.2_res_e7_df1 <- as.data.frame(sim2_nls2.2_res_e7$resi1) 

hist(sim2_nls2.2_res_e7_df1$Residuals)

(sim2_nls2.2_res_e7_df2 <- tibble(
  nls_resid_min = min(sim2_nls2.2_res_e7_df1$Residuals),
  nls_resid_max = max(sim2_nls2.2_res_e7_df1$Residuals),
  nls_resid_sd = sd(sim2_nls2.2_res_e7_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls2.2_res_e7_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls2.2_res_e7_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls2.2_e7)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls2.2_e7)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls2.2_e7), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls2.2_res_e7_df1$Residuals)

(summary(sim2_nls2.2_res_e7_df1$Residuals))
```

##Store results for Expanded Rayleigh model 2 (sim2_e7)

sim2_e7 = Low-level, right-skewed error (f range 0.75 to 0.25).
```{r sim2_nls2.2_e7_tb}

sim2_nls2.2_e7_tb <- tibble(
  
  #Add values from nls2.2 to table  
    rho = as.numeric(coef(sim2_nls2.2_e7)),
    se_rho = summary(sim2_nls2.2_e7)$coefficients[1,2],
  
    tau = mean(sim2_e7$tau, na.rm = TRUE),
    se_tau = std.error(sim2_e7$tau, na.rm = TRUE),
    
  #Add standard Rayleigh values for bulk delta_p to table    
    epsilon_p = as.numeric(sim2_lm_delta_p_e7$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e7)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e7$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls2.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls2.2_e7_tb <- cbind(
  sim2_nls2.2_e7_tb,
  sim2_e7_lm_stats,
  sim2_nls2.2_res_e7_df2
)
```

#sim2_e8: Make a table with medium-level, right-skewed error added to N_s, delta_p, and delta_alpha (0.25 < f < 0.75)

Make error for delta_beta dependent on the error for delta_p and delta_alpha.

Make error for delta_s dependent on delta_p and f.

  - sd (medium) for N_s = 3% of max substrate (10000 nmol NO, exp. value) (2X greater than low-level error)

$$sd = 2*0.015*N_{s0} = 0.03*N_{s0}$$
  
  - sd (medium) for delta values: 2.5X greater than low-level values
  
    - sd (medium) for delta_p = 2.5*0.5 per mil = 1.25 per mil
    
    - sd (medium) for delta_alpha = 2.5*0.7 per mil = 1.75 per mil

Skewness: Aiming for skewness of residuals for linear model > 0.5

Set omega (skewness) to 0.99
```{r sim2_e8}
set.seed(314)

#Subset data
sim2_e8 <- sim2 %>% 
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)


#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 2*0.015*sim2$N_s0[1], 0.99), "SN")  
error_1 <- rsn(n = length(sim2_e8$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 2.5*0.5, 0.99), "SN")  
error_2 <- rsn(n = length(sim2_e8$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 2.5*0.7, 0.99), "SN")  
error_3 <- rsn(n = length(sim2_e8$N_s), dp = params_3)

sim2_e8 <- sim2_e8 %>%  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        
        #Add R values, etc, for nonlinear modeling (nls1 and nls2)
        R_std = 0.0036765,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`,
        SP = delta_alpha - delta_beta
         )
```

##Graph delta_s, delta_p, delta_alpha, and delta_beta vs 1-f (sim2_e8)

sim2_e8: Medium-level, right-skewed error added to N_s0, and N_s, delta_p, and delta_s
```{r plot_sim2_e8, warning=FALSE}
(sim2_e8_delta <- ggplot(data = sim2_e8, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_s), color = "darkorange2",
             shape = 18)+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  xlab("1 - f")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```

##Graph standard Rayleigh plots (x = -flnf/(1-f)) for delta_p, delta_alpha, and delta_beta (sim2_e8).

sim2_e8: Medium-level, right-skewed error added to N_s, delta_p, and delta_alpha
```{r plot_Std_Rayleigh_sim2_e8, warning=FALSE}
(sim2_e8_Ray <- ggplot(data = sim2_e8, mapping = 
         aes(x = `-flnf/(1-f)`))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  geom_smooth(mapping = aes(y = delta_p), color = "grey48",
              method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_alpha), color = "blue",
            method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_beta), color = "green4",
              method = lm, se = FALSE)+
  xlab("-flnf/(1-f)")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```
#Standard Rayleigh linear regression (delta N vs -flnf/(1-f)) (sim2_e8)
```{r lm_delta_p_e8}
sim2_lm_delta_p_e8 <- lm(delta_p ~ `-flnf/(1-f)`, data = sim2_e8)

sim2_lm_delta_alpha_e8 <- lm(delta_alpha ~ `-flnf/(1-f)`, data = sim2_e8)

sim2_lm_delta_beta_e8 <- lm(delta_beta ~ `-flnf/(1-f)`, data = sim2_e8)
```

##Check the summary for each standard Rayleigh linear regression model (sim2_e8)
```{r sim2_summary_lm_e8}
summary(sim2_lm_delta_p_e8)
summary(sim2_lm_delta_alpha_e8)
summary(sim2_lm_delta_beta_e8)
```
##Statistical tests for linear Rayleigh model (sim2_e8)
```{r stat_test_sim2_lm_delta_p_e8}
#sim2_e8
##Non-constant error variance test
car::ncvTest(sim2_lm_delta_p_e8)

##Levene's Test for Homogeneity of Variance (center = median)
sim2_e8$residuals <- sim2_lm_delta_p_e8$residuals
car::leveneTest(residuals ~ replicate, data = sim2_e8)

##Warning: group coerced to factor. (This is fine.)

##Jarque-Bera Normality Test
jarque.test(as.vector(sim2_lm_delta_p_e8$residuals))

##skewness of residuals
(sim2_e8_lm_stats <- tibble(
  lm_skew = skewness(sim2_lm_delta_p_e8$residuals),
  lm_delta_alpha_skew = skewness(sim2_lm_delta_alpha_e8$residuals),
  lm_delta_beta_skew = skewness(sim2_lm_delta_beta_e8$residuals)
)
)

##Plot histogram of residuals
hist(sim2_lm_delta_p_e8$residuals)
```
#Nonlinear model 1.2 (nls1.2) with sim2_e8.

nls1.2: delta_p = 0.5*(delta_alpha + delta_beta) where delta_alpha is replaced by the rho equation (but delta_beta is not).

sim2_e8 = Medium-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e8_nls1.2}
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#sim2_e8
preview(sim_formula_nls1.2, data = sim2_e8,
        start = list(rho = 0.500), variable = 18)

sim2_nls1.2_e8 <- nls(sim_formula_nls1.2, data = sim2_e8,
    start = list(rho = 0.500)
)

overview(sim2_nls1.2_e8)

(rmse(sim2_nls1.2_e8, data = sim2_e8))
```

##Plot predicted values (in red, sim2_nls1_e8) and actual simulated values (sim2_e8) (gray).

sim2_e8 = Medium-level, right-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_nls1.2_e8}
#sim2_e8
sim2_e8 <- sim2_e8 %>%
  dplyr::mutate(delta_p_pred_nls1.2 = predict(sim2_nls1.2_e8))

ggplot(data = sim2_e8, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls1.2), color = "red",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```

##Assess the goodness of fit through residuals for sim2_nls1.2_e8 
Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e8 = Medium-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e8_nls1.2_res}
#sim2_e8
sim2_nls1.2_res_e8 <- nlsResiduals(sim2_nls1.2_e8)

plot(sim2_nls1.2_res_e8)

```

##Plot residuals as histogram,  assess distribution, and calculate p-value for rho (sim2_e8).

sim2_e8 = Medium-level, right-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e8_nls1.2}
#sim2_e8
sim2_nls1.2_res_e8_df1 <- as.data.frame(sim2_nls1.2_res_e8$resi1) 

hist(sim2_nls1.2_res_e8_df1$Residuals)

(sim2_nls1.2_res_e8_df2 <- tibble(
  nls_resid_min = min(sim2_nls1.2_res_e8_df1$Residuals),
  nls_resid_max = max(sim2_nls1.2_res_e8_df1$Residuals),
  nls_resid_sd = sd(sim2_nls1.2_res_e8_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls1.2_res_e8_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls1.2_res_e8_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho    
  nls_resid_t_test = (summary(sim2_nls1.2_e8)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls1.2_e8)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls1.2_e8), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls1.2_res_e8_df1$Residuals)

(summary(sim2_nls1.2_res_e8_df1$Residuals))
```

##Store results for Expanded Rayleigh model 1 (sim2_e8)

sim2_e8 = Medium-level, right-skewed error (f range 0.75 to 0.25).
```{r sim2_nls1.2_e8_tb}

sim2_nls1.2_e8_tb <- tibble(
  
  #Add values from nls1.2 to table  
    rho = as.numeric(coef(sim2_nls1.2_e8)),
    se_rho = summary(sim2_nls1.2_e8)$coefficients[1,2],
  
    tau = mean(sim2_e8 %>% .$tau),
    se_tau = std.error(sim2_e8 %>% .$tau),
    
  #Add standard Rayleigh values for bulk delta_p to table     
    epsilon_p = as.numeric(sim2_lm_delta_p_e5$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e5)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e5$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls1.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls1.2_e8_tb <- cbind(
  sim2_nls1.2_e8_tb,
  sim2_e8_lm_stats,
  sim2_nls1.2_res_e8_df2
)
```

#Nonlinear model 2.2 (nls2.2) with sim2_e8 (medium, right-skewed error)

nls2.2: delta_p = 0.5*(delta_alpha + delta_beta), where delta_beta is replaced by an equation with rho.

sim2_e8 = medium-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e8_nls2.2}
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#sim2_e8
preview(sim_formula_nls2.2, data = sim2_e8,
        start = list(rho = 0.500), variable = 18)

sim2_nls2.2_e8 <- nls(sim_formula_nls2.2, data = sim2_e8,
    start = list(rho = 0.500)
)

overview(sim2_nls2.2_e8)

(rmse(sim2_nls2.2_e8, data = sim2_e8))
```

##Plot predicted values (in orange, sim2_nls2.2_e8) and actual simulated values (sim2_e8) (gray).

sim2_e8 = medium-level, right-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_nls2.2_e8}
#sim2_e8
sim2_e8 <- sim2_e8 %>%
  dplyr::mutate(delta_p_pred_nls2.2 = predict(sim2_nls2.2_e8))

ggplot(data = sim2_e8, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls2.2), color = "darkorange2",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```

##Assess the goodness of fit through residuals for sim2_nls2.2_e8

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e8 = medium-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e8_nls2.2_res}
#sim2_e8
sim2_nls2.2_res_e8 <- nlsResiduals(sim2_nls2.2_e8)

plot(sim2_nls2.2_res_e8)

```

##Plot residuals as histogram, assess the distribution, and calculate p-value for rho (sim2_e8)

sim2_e8 = medium-level, right-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e8_nls2.2}
#sim2_e8
sim2_nls2.2_res_e8_df1 <- as.data.frame(sim2_nls2.2_res_e8$resi1) 

hist(sim2_nls2.2_res_e8_df1$Residuals)

(sim2_nls2.2_res_e8_df2 <- tibble(
  nls_resid_min = min(sim2_nls2.2_res_e8_df1$Residuals),
  nls_resid_max = max(sim2_nls2.2_res_e8_df1$Residuals),
  nls_resid_sd = sd(sim2_nls2.2_res_e8_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls2.2_res_e8_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls2.2_res_e8_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls2.2_e8)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls2.2_e8)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls2.2_e8), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls2.2_res_e8_df1$Residuals)

(summary(sim2_nls2.2_res_e8_df1$Residuals))
```

##Store results for Expanded Rayleigh model 2 (sim2_e8)

sim2_e8 = medium-level, right-skewed error (f range 0.75 to 0.25).
```{r sim2_nls2.2_e8_tb}

sim2_nls2.2_e8_tb <- tibble(
  
  #Add values from nls2.2 to table
    rho = as.numeric(coef(sim2_nls2.2_e8)),
    se_rho = summary(sim2_nls2.2_e8)$coefficients[1,2],
  
    tau = mean(sim2_e8$tau, na.rm = TRUE),
    se_tau = std.error(sim2_e8$tau, na.rm = TRUE),
    
  #Add standard Rayleigh values for bulk delta_p to table    
    epsilon_p = as.numeric(sim2_lm_delta_p_e8$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e8)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e8$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls2.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls2.2_e8_tb <- cbind(
  sim2_nls2.2_e8_tb,
  sim2_e8_lm_stats,
  sim2_nls2.2_res_e8_df2
)
```

#sim2_e9: Make a table with high-level, right-skewed error added to N_s, delta_p, and delta_alpha (0.25 < f < 0.75)

Make error for delta_beta dependent on the error for delta_p and delta_alpha.

Make error for delta_s dependent on delta_p and f.

  - sd (high) for N_s = 4.5% of max substrate (10000 nmol NO) (3X greater than low-level error)

$$sd = 3*0.015*N_{s0} = 0.045*N_{s0}$$
  
  - sd (high) for delta values: 5X greater than low-level values
  
    - sd (high) for delta_p = 5*0.5 per mil = 2.5 per mil
    
    - sd (high) for delta_alpha = 5*0.7 per mil = 3.5 per mil

Skewness: Aiming for skewness of residuals for linear model > 0.5

Set omega (skewness) to 0.99
```{r sim2_e9}
set.seed(314)

#Subset data
sim2_e9 <- sim2 %>% 
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)


#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 3*0.015*sim2$N_s0[1], 0.99), "SN")  
error_1 <- rsn(n = length(sim2_e9$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 5*0.5, 0.99), "SN")  
error_2 <- rsn(n = length(sim2_e9$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 5*0.7, 0.99), "SN")  
error_3 <- rsn(n = length(sim2_e9$N_s), dp = params_3)


sim2_e9 <- sim2_e9 %>%  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        
        #Add R values, etc, for nonlinear modeling (nls1 and nls2)
        R_std = 0.0036765,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`,
        SP = delta_alpha - delta_beta
         )
```

##Graph delta_s, delta_p, delta_alpha, and delta_beta vs 1-f (sim2_e9)

sim2_e9: High-level, right-skewed error
```{r plot_sim2_e9, warning=FALSE}
(sim2_e9_delta <- ggplot(data = sim2_e9, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_s), color = "darkorange2",
             shape = 18)+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  xlab("1 - f")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```

##Graph standard Rayleigh plots (x = -flnf/(1-f)) for delta_p, delta_alpha, and delta_beta (sim2_e9).

sim2_e9:  High-level, right-skewed error
```{r plot_Std_Rayleigh_sim2_e9, warning=FALSE}
(sim2_e9_Ray <- ggplot(data = sim2_e9, mapping = 
         aes(x = `-flnf/(1-f)`))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 16)+
  geom_point(mapping = aes(y = delta_alpha), color = "blue",
             shape = 15)+
  geom_point(mapping = aes(y = delta_beta), color = "green4",
             shape = 17)+
  geom_smooth(mapping = aes(y = delta_p), color = "grey48",
              method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_alpha), color = "blue",
            method = lm, se = FALSE)+
  geom_smooth(mapping = aes(y = delta_beta), color = "green4",
              method = lm, se = FALSE)+
  xlab("-flnf/(1-f)")+ ylab("delta N")+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  xlim(0,1)
)
```

#Standard Rayleigh linear regression (delta N vs -flnf/(1-f)) (sim2_e9)
```{r lm_delta_p_e9}
sim2_lm_delta_p_e9 <- lm(delta_p ~ `-flnf/(1-f)`, data = sim2_e9)

sim2_lm_delta_alpha_e9 <- lm(delta_alpha ~ `-flnf/(1-f)`, data = sim2_e9)

sim2_lm_delta_beta_e9 <- lm(delta_beta ~ `-flnf/(1-f)`, data = sim2_e9)
```

##Check the summary for each standard Rayleigh linear regression model sim2_e9.
```{r sim2_summary_lm_e9}
summary(sim2_lm_delta_p_e9)
summary(sim2_lm_delta_alpha_e9)
summary(sim2_lm_delta_beta_e9)
```

##Statistical tests for linear Rayleigh model (sim2_e9)
```{r stat_test_sim2_lm_delta_p_e9}
#sim2_e9
##Non-constant error variance test
car::ncvTest(sim2_lm_delta_p_e9)

##Levene's Test for Homogeneity of Variance (center = median)
sim2_e9$residuals <- sim2_lm_delta_p_e9$residuals
car::leveneTest(residuals ~ replicate, data = sim2_e9)

##Warning: group coerced to factor. (This is fine.)

##Jarque-Bera Normality Test
jarque.test(as.vector(sim2_lm_delta_p_e9$residuals))

##skewness of residuals
(sim2_e9_lm_stats <- tibble(
  lm_skew = skewness(sim2_lm_delta_p_e9$residuals),
  lm_delta_alpha_skew = skewness(sim2_lm_delta_alpha_e9$residuals),
  lm_delta_beta_skew = skewness(sim2_lm_delta_beta_e9$residuals)
)
)

##Plot histogram of residuals
hist(sim2_lm_delta_p_e9$residuals)
```

#Nonlinear model 1.2 (nls1.2) with sim2_e9 (high-level, right-skewed error)

nls1.2: delta_p = 0.5*(delta_alpha + delta_beta) where delta_alpha is replaced by the rho equation (but delta_beta is not).

sim2_e9 = high-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e9_nls1.2}
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#sim2_e9
preview(sim_formula_nls1.2, data = sim2_e9,
        start = list(rho = 0.500), variable = 18)

sim2_nls1.2_e9 <- nls(sim_formula_nls1.2, data = sim2_e9,
    start = list(rho = 0.500)
)

overview(sim2_nls1.2_e9)

(rmse(sim2_nls1.2_e9, data = sim2_e9))
```

##Plot predicted values (in red, sim2_nls1_e9) and actual simulated values (sim2_e9) (gray).

sim2_e9 = high-level, right-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_e9_nls1.2}
#sim2_e9
sim2_e9 <- sim2_e9 %>%
  dplyr::mutate(delta_p_pred_nls1.2 = predict(sim2_nls1.2_e9))

ggplot(data = sim2_e9, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls1.2), color = "red",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())
```

##Assess the goodness of fit through residuals for sim2_nls1.2_e9

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e9 = high-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e9_nls1.2_res}
#sim2_e9
sim2_nls1.2_res_e9 <- nlsResiduals(sim2_nls1.2_e9)

plot(sim2_nls1.2_res_e9)

```

##Plot residuals as histogram, assess distribution, and calculate p-value for rho (sim2_e2).

sim2_e9 = high-level, right-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e9_nls1.2}
#sim2_e9
sim2_nls1.2_res_e9_df1 <- as.data.frame(sim2_nls1.2_res_e9$resi1) 

hist(sim2_nls1.2_res_e9_df1$Residuals)

(sim2_nls1.2_res_e9_df2 <- tibble(
  nls_resid_min = min(sim2_nls1.2_res_e9_df1$Residuals),
  nls_resid_max = max(sim2_nls1.2_res_e9_df1$Residuals),
  nls_resid_sd = sd(sim2_nls1.2_res_e9_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls1.2_res_e9_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls1.2_res_e9_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho   
  nls_resid_t_test = (summary(sim2_nls1.2_e9)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls1.2_e9)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls1.2_e9), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls1.2_res_e9_df1$Residuals)

(summary(sim2_nls1.2_res_e9_df1$Residuals))
```

##Store results for Expanded Rayleigh model 1 (sim2_e9)

sim2_e9 = high-level, right-skewed error (f range 0.75 to 0.25).
```{r sim2_nls1.2_e9_tb}

sim2_nls1.2_e9_tb <- tibble(
  
  #Add values from nls1.2 to table  
    rho = as.numeric(coef(sim2_nls1.2_e9)),
    se_rho = summary(sim2_nls1.2_e9)$coefficients[1,2],
  
    tau = mean(sim2_e9 %>% .$tau),
    se_tau = std.error(sim2_e9 %>% .$tau),
    
  #Add standard Rayleigh values for bulk delta_p to table     
    epsilon_p = as.numeric(sim2_lm_delta_p_e9$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e9)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e9$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls1.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls1.2_e9_tb <- cbind(
  sim2_nls1.2_e9_tb,
  sim2_e9_lm_stats,
  sim2_nls1.2_res_e9_df2
)
```

#Nonlinear model 2.2 (nls2.2) with sim2_e9 (high error, right-skewed)

nls2.2: delta_p = 0.5*(delta_alpha + delta_beta), where delta_beta is replaced by an equation with rho.

sim2_e9 = high-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e9_nls2.2}
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#sim2_e9
preview(sim_formula_nls2.2, data = sim2_e9,
        start = list(rho = 0.500), variable = 18)

sim2_nls2.2_e9 <- nls(sim_formula_nls2.2, data = sim2_e9,
    start = list(rho = 0.500)
)

overview(sim2_nls2.2_e9)

(rmse(sim2_nls2.2_e9, data = sim2_e9))
```
#Plot predicted values (in orange, sim2_nls2.2_e9) and actual simulated values (sim2_e9) (gray).

sim2_e9 = high-level, right-skewed error (f range 0.75 to 0.25)
```{r predict_sim2_nls2.2_e9}
#sim2_e9
sim2_e9 <- sim2_e9 %>%
  dplyr::mutate(delta_p_pred_nls2.2 = predict(sim2_nls2.2_e9))

ggplot(data = sim2_e9, mapping = 
         aes(x = one_minus_f))+
  geom_point(mapping = aes(y = delta_p), color = "grey48",
             shape = 1)+
  geom_point(mapping = aes(y = delta_p_pred_nls2.2), color = "darkorange2",
             shape = 3)+
  xlab("1-f")+ ylab("delta_p")+
  xlim(0, 1)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())

```

##Assess the goodness of fit through residuals for sim2_nls2.2_e9

Use nlsResiduals() to extract residuals from the nls object, and use plot() to visualize the results.

sim2_e9 = high-level, right-skewed error (f range 0.75 to 0.25)
```{r sim2_e9_nls2.2_res}
#sim2_e9
sim2_nls2.2_res_e9 <- nlsResiduals(sim2_nls2.2_e9)

plot(sim2_nls2.2_res_e9)

```

##Plot residuals as histogram, assess the distribution, and calculate p-value for rho (sim2_e9).

sim2_e9 = high-level, right-skewed error (f range 0.75 to 0.25)
```{r hist_sim2_e9_nls2.2}
#sim2_e9
sim2_nls2.2_res_e9_df1 <- as.data.frame(sim2_nls2.2_res_e9$resi1) 

hist(sim2_nls2.2_res_e9_df1$Residuals)

(sim2_nls2.2_res_e9_df2 <- tibble(
  nls_resid_min = min(sim2_nls2.2_res_e9_df1$Residuals),
  nls_resid_max = max(sim2_nls2.2_res_e9_df1$Residuals),
  nls_resid_sd = sd(sim2_nls2.2_res_e9_df1$Residuals), #sample standard deviation
  nls_resid_skewness = skewness(sim2_nls2.2_res_e9_df1$Residuals),
  nls_resid_kurtosis = kurtosis(sim2_nls2.2_res_e9_df1$Residuals),
  
  #p-value calculation: null hypothesis is rho = 0.5
  #t_test_statistic = (rho - rho_null)/se_rho  
  nls_resid_t_test = (summary(sim2_nls2.2_e9)$coefficients[1, 1] - 0.5)/
    summary(sim2_nls2.2_e9)$coefficients[1, 2],
  nls_resid_pval = 2*pt(q = nls_resid_t_test, df = df.residual(sim2_nls2.2_e9), lower.tail = FALSE)
  )
)

#Jarque-Bera test for normality
##Null hypothesis: data follows a normal distribution
jarque.test(sim2_nls2.2_res_e9_df1$Residuals)

(summary(sim2_nls2.2_res_e9_df1$Residuals))
```

##Store results for Expanded Rayleigh model 2 (sim2_e9)

sim2_e9 = high-level, right-skewed error (f range 0.75 to 0.25).
```{r sim2_nls2.2_e9_tb}

sim2_nls2.2_e9_tb <- tibble(
  
  #Add values from nls2.2 to table
    rho = as.numeric(coef(sim2_nls2.2_e9)),
    se_rho = summary(sim2_nls2.2_e9)$coefficients[1,2],
  
    tau = mean(sim2_e9$tau, na.rm = TRUE),
    se_tau = std.error(sim2_e9$tau, na.rm = TRUE),
    
  #Add standard Rayleigh values for bulk delta_p to table     
    epsilon_p = as.numeric(sim2_lm_delta_p_e9$coefficients[2]),
    se_epsilon_p = summary(sim2_lm_delta_p_e9)$coefficients[2,2],
    
    ff_p = 1 + sim2_lm_delta_p_e9$coefficients[2]/1000,
    se_ff_p = se_epsilon_p/1000,
    
  #Add values from nls2.2 to table  
    ff_alpha = (rho/tau)*ff_p,
    se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2),
    
    ff_beta = (1-rho)/(1-tau)*ff_p,
    se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2),   
 
    epsilon_alpha = 1000*(ff_alpha - 1),
    se_epsilon_alpha = 1000*se_ff_alpha,
    
    epsilon_beta = 1000*(ff_beta -1),
    se_epsilon_beta = 1000*se_ff_beta,
    
    KIE_p = 1/ff_p,
    se_KIE_p = abs(-1/(ff_p)^2*se_ff_p),
    
    KIE_alpha = 1/ff_alpha,
    se_KIE_alpha = abs(-1/(ff_alpha)^2*se_ff_alpha),
    
    KIE_beta = 1/ff_beta,
    se_KIE_beta = abs(-1/(ff_beta)^2*se_ff_beta)
  )

#Add stats for nls residuals to table.
sim2_nls2.2_e9_tb <- cbind(
  sim2_nls2.2_e9_tb,
  sim2_e9_lm_stats,
  sim2_nls2.2_res_e9_df2
)
```

#Figure S1: Combine sim2_e1-e9 into one table to make an example figure

  - Make a tidy table for each error level. (Pivot all delta values to one column, "delta_15N".)
  
  - Combine tables for e1-e9 (using rbind).
  
  - Make a facet plot showing example data for all nine combinations of error level (low, medium, high) and types of skewness (none, left, right).
```{r combine_e1-e9}
##sim2_e1
sim2_e1_tidy <- sim2_e1 %>% mutate(
  
  #Add a column describing error level to sim2_e1-e9
  `Level of error` = "Low Error, No Skew"
) %>%
  
  #Move `Level of error` column all the way to the left
  select(`Level of error`, everything()) %>%
  
  #Select columns
  select(`Level of error`, replicate, delta_s0, delta_s, delta_p, delta_alpha, delta_beta, f, one_minus_f, `-flnf/(1-f)`) %>%
  
  #Pivot table
  pivot_longer(c(delta_s, delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

  #Factor delta_15N column
sim2_e1_tidy$delta_15N <- factor(sim2_e1_tidy$delta_15N, levels = c("delta_s", "delta_p", "delta_alpha", "delta_beta"))

##sim2_e2
sim2_e2_tidy <- sim2_e2 %>% mutate(
  `Level of error` = "Medium Error, No Skew"
) %>%
  select(`Level of error`, everything())%>%
  select(`Level of error`, replicate, delta_s0, delta_s, delta_p, delta_alpha, delta_beta, f, one_minus_f, `-flnf/(1-f)`) %>%
  pivot_longer(c(delta_s, delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

sim2_e2_tidy$delta_15N <- factor(sim2_e2_tidy$delta_15N, levels = c("delta_s", "delta_p", "delta_alpha", "delta_beta"))

##sim2_e3
sim2_e3_tidy <- sim2_e3 %>% mutate(
  `Level of error` = "High Error, No Skew"
) %>%
  select(`Level of error`, everything())%>%
  select(`Level of error`, replicate, delta_s0, delta_s, delta_p, delta_alpha, delta_beta, f, one_minus_f, `-flnf/(1-f)`) %>%
  pivot_longer(c(delta_s, delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

sim2_e3_tidy$delta_15N <- factor(sim2_e3_tidy$delta_15N, levels = c("delta_s", "delta_p", "delta_alpha", "delta_beta"))

##sim2_e4
sim2_e4_tidy <- sim2_e4 %>% mutate(
  `Level of error` = "Low Error, Left Skew"
) %>%
  select(`Level of error`, everything())%>%
  select(`Level of error`, replicate, delta_s0, delta_s, delta_p, delta_alpha, delta_beta, f, one_minus_f, `-flnf/(1-f)`) %>%
  pivot_longer(c(delta_s, delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

sim2_e4_tidy$delta_15N <- factor(sim2_e4_tidy$delta_15N, levels = c("delta_s", "delta_p", "delta_alpha", "delta_beta"))

##sim2_e5
sim2_e5_tidy <- sim2_e5 %>% mutate(
  `Level of error` = "Medium Error, Left Skew"
) %>%
  select(`Level of error`, everything())%>%
  select(`Level of error`, replicate, delta_s0, delta_s, delta_p, delta_alpha, delta_beta, f, one_minus_f, `-flnf/(1-f)`) %>%
  pivot_longer(c(delta_s, delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

sim2_e5_tidy$delta_15N <- factor(sim2_e5_tidy$delta_15N, levels = c("delta_s", "delta_p", "delta_alpha", "delta_beta"))

##sim2_e6
sim2_e6_tidy <- sim2_e6 %>% mutate(
  `Level of error` = "High Error, Left Skew"
) %>%
  select(`Level of error`, everything())%>%
  select(`Level of error`, replicate, delta_s0, delta_s, delta_p, delta_alpha, delta_beta, f, one_minus_f, `-flnf/(1-f)`) %>%
  pivot_longer(c(delta_s, delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

sim2_e6_tidy$delta_15N <- factor(sim2_e6_tidy$delta_15N, levels = c("delta_s", "delta_p", "delta_alpha", "delta_beta"))

##sim2_e7
sim2_e7_tidy <- sim2_e7 %>% mutate(
  `Level of error` = "Low Error, Right Skew"
) %>%
  select(`Level of error`, everything())%>%
  select(`Level of error`, replicate, delta_s0, delta_s, delta_p, delta_alpha, delta_beta, f, one_minus_f, `-flnf/(1-f)`) %>%
  pivot_longer(c(delta_s, delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

sim2_e7_tidy$delta_15N <- factor(sim2_e7_tidy$delta_15N, levels = c("delta_s", "delta_p", "delta_alpha", "delta_beta"))

##sim2_e8
sim2_e8_tidy <- sim2_e8 %>% mutate(
  `Level of error` = "Medium Error, Right Skew"
) %>%
  select(`Level of error`, everything())%>%
  select(`Level of error`, replicate, delta_s0, delta_s, delta_p, delta_alpha, delta_beta, f, one_minus_f, `-flnf/(1-f)`) %>%
  pivot_longer(c(delta_s, delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

sim2_e8_tidy$delta_15N <- factor(sim2_e8_tidy$delta_15N, levels = c("delta_s", "delta_p", "delta_alpha", "delta_beta"))

##sim2_e9
sim2_e9_tidy <- sim2_e9 %>% mutate(
  `Level of error` = "High Error, Right Skew"
) %>%
  select(`Level of error`, everything())%>%
  select(`Level of error`, replicate, delta_s0, delta_s, delta_p, delta_alpha, delta_beta, f, one_minus_f, `-flnf/(1-f)`) %>%
  pivot_longer(c(delta_s, delta_p, delta_alpha, delta_beta), names_to = "delta_15N", values_to = "delta_15N_values")

sim2_e9_tidy$delta_15N <- factor(sim2_e9_tidy$delta_15N, levels = c("delta_s", "delta_p", "delta_alpha", "delta_beta"))

#Combine tables for e1-e9
sim2_e_combo <- rbind(
  sim2_e1_tidy,
  sim2_e2_tidy,
  sim2_e3_tidy,
  sim2_e4_tidy,
  sim2_e5_tidy,
  sim2_e6_tidy,
  sim2_e7_tidy,
  sim2_e8_tidy,
  sim2_e9_tidy
)

sim2_e_combo$`Level of error` <- factor(sim2_e_combo$`Level of error`, levels = c("Low Error, No Skew", "Medium Error, No Skew", "High Error, No Skew", "Low Error, Left Skew", "Medium Error, Left Skew", "High Error, Left Skew", "Low Error, Right Skew", "Medium Error, Right Skew", "High Error, Right Skew"))

#Plot combined figure
(sim2_e_combo_delta <- ggplot(data = sim2_e_combo, mapping = 
         aes(x = one_minus_f, y = delta_15N_values, shape = delta_15N, color = delta_15N))+
  geom_point(size = 1)+
  scale_color_manual(name = "delta values",
    values = c("darkorange2", "grey48", "blue", "green4"),
    labels = c(
    expression(paste(bold(delta^15),bold(N^s), sep="")),
    expression(paste(bold(delta^15),bold(N^bulk), sep="")),
    expression(paste(bold(delta^15),bold(N^alpha), sep="")),
    expression(paste(bold(delta^15),bold(N^beta), sep=""))
  ))+
  #theme(legend.text=element_text(size=24))+ #doesn't change font size (maybe this needs to be moved to scale_color_manual)
 
  scale_shape_manual(name = "delta values",
    values = c(8, 16, 15, 17),
    labels = c(
    expression(paste(bold(delta^15),bold(N^s), sep="")),
    expression(paste(bold(delta^15),bold(N^bulk), sep="")),
    expression(paste(bold(delta^15),bold(N^alpha), sep="")),
    expression(paste(bold(delta^15),bold(N^beta), sep=""))
  ))+
  facet_wrap(~ `Level of error`, nrow = 3)+  
  scale_x_continuous(limits = c(0, 1), breaks = c(0.5*0:2),
                     labels = paste0(c(0.5*0:2),""))+  
  ylim(-55, 45)+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  
    #format axis titles
  theme(axis.title = element_text(size = 8))+
  theme(axis.text = element_text(size = 8))+
  xlab(expression(paste(bold("Fraction Reduced (1-"), italic("f"), bold(")"))))+
  ylab(expression(paste(bold(delta^15),bold(N),bold(" (\u2030)"),sep="")))+
  
  #format plot title
  theme(plot.title = element_text(size = 10))+
  theme(plot.title = element_text(face = "bold"))+
  ggtitle(expression(paste(bold("Dataset 2: "), bold("Normal "), bold(KIE^15), bold(N^alpha), bold(", Normal "), bold(KIE^15), bold(N^beta))))+  
  
  #format legend
  theme(legend.title = element_blank())
  #theme(legend.position = c(0.825,0.2))  
)

#save figure
ggsave(sim2_e_combo_delta, filename = here("graphs/sim2/sim2_e_combo_delta.tiff"), height = 4.2, width = 7, units = "in")
```

#Make summary table with results of one example simulation for e1-9.

This table will show the results of the Expanded Rayleigh model (1 and 2) that correspond to the example datasets shown in Figure S1.

##Make empty table to store the results

```{r blank_single}

#n = number of rows

blank_single <- function(n) {
  tibble(
    rho = vector(length = n, mode = "expression"),
    se_rho = vector(length = n, mode = "expression"),
    tau = vector(length = n, mode = "expression"),
    se_tau = vector(length = n, mode = "expression"),
    
    epsilon_p = vector(length = n, mode = "expression"),
    se_epsilon_p = vector(length = n, mode = "expression"),
    ff_p = vector(length = n, mode = "expression"),
    se_ff_p = vector(length = n, mode = "expression"),
    
    ff_alpha = vector(length = n, mode = "expression"),
    se_ff_alpha = vector(length = n, mode = "expression"),
    ff_beta = vector(length = n, mode = "expression"),
    se_ff_beta = vector(length = n, mode = "expression"),
    
    epsilon_alpha = vector(length = n, mode = "expression"),
    se_epsilon_alpha = vector(length = n, mode = "expression"),
    epsilon_beta = vector(length = n, mode = "expression"),
    se_epsilon_beta = vector(length = n, mode = "expression"),
    
    KIE_p = vector(length = n, mode = "expression"),
    se_KIE_p = vector(length = n, mode = "expression"),
    KIE_alpha = vector(length = n, mode = "expression"),
    se_KIE_alpha = vector(length = n, mode = "expression"),
    KIE_beta = vector(length = n, mode = "expression"),
    se_KIE_beta = vector(length = n, mode = "expression")
  )
}

```

##Make table with results from single simulation: no error and e1-e9
```{r sim2_e1_e9_single}

#Make empty table to store results of simulation without error (n = 1 row)
sim2_no_error <- blank_single(n = 1)

#Store "actual" values (input values or values calculated directly from input values without the use of the linear or nonlinear models).

##Use tau values from sim2_tb2 (subset where 0.25 <= f <= 0.75) to calculate ff_alpha and ff_beta to avoid higher error associated with extreme f values.
  sim2_no_error$rho = mean(sim2_tb2$rho, na.rm = TRUE)
  sim2_no_error$se_rho = "NA"
  sim2_no_error$tau = mean(sim2_tb2$tau, na.rm = TRUE)
  sim2_no_error$se_tau = "NA"
  
  sim2_no_error$epsilon_p = sim2_tb2$epsilon_bulk[1]
  sim2_no_error$se_epsilon_p = "NA"
  sim2_no_error$ff_p = sim2_tb2$ff_p[1]
  sim2_no_error$se_ff_p = "NA"
  
  sim2_no_error$ff_alpha = mean(sim2_tb2$ff_alpha, na.rm = TRUE)
  sim2_no_error$se_ff_alpha = "NA"
  sim2_no_error$ff_beta = mean(sim2_tb2$ff_beta, na.rm = TRUE)
  sim2_no_error$se_ff_beta = "NA"
  
  sim2_no_error$epsilon_alpha = mean(sim2_tb2$epsilon_alpha, na.rm = TRUE)
  sim2_no_error$se_epsilon_alpha = std.error(sim2_tb2$epsilon_alpha, na.rm = TRUE)
  sim2_no_error$epsilon_beta = mean(sim2_tb2$epsilon_beta, na.rm = TRUE)
  sim2_no_error$se_epsilon_beta = std.error(sim2_tb2$epsilon_beta, na.rm = TRUE)
  
  sim2_no_error$KIE_p = mean(sim2_tb2$KIE_p, na.rm = TRUE)
  sim2_no_error$se_KIE_p = "NA"
  sim2_no_error$KIE_alpha = mean(sim2_tb2$KIE_alpha, na.rm = TRUE)
  sim2_no_error$se_KIE_alpha = std.error(sim2_tb2$KIE_alpha, na.rm = TRUE)
  sim2_no_error$KIE_beta = mean(sim2_tb2$KIE_beta, na.rm = TRUE)
  sim2_no_error$se_KIE_beta = std.error(sim2_tb2$KIE_beta, na.rm = TRUE)

  sim2_no_error$lm_skew = "NA"
  sim2_no_error$lm_delta_alpha_skew = "NA"
  sim2_no_error$lm_delta_beta_skew = "NA"
  sim2_no_error$nls_resid_min = "NA"
  sim2_no_error$nls_resid_max = "NA"
  sim2_no_error$nls_resid_sd = "NA"
  sim2_no_error$nls_resid_skewness = "NA"
  sim2_no_error$nls_resid_kurtosis = "NA"
  sim2_no_error$nls_resid_t_test = "NA"
  sim2_no_error$nls_resid_pval = "NA"

#m = number of models (expanded Rayleigh 1 and expanded Rayleigh 2)
m = 2

#Combine results for single simulations of nls1.2 and nls2.2
sim2_e1_e9_single <- tibble(
  rbind(
  sim2_nls1.2_e1_tb,
  sim2_nls1.2_e4_tb,
  sim2_nls1.2_e7_tb,
  sim2_nls1.2_e2_tb,
  sim2_nls1.2_e5_tb,
  sim2_nls1.2_e8_tb,
  sim2_nls1.2_e3_tb,
  sim2_nls1.2_e6_tb,
  sim2_nls1.2_e9_tb,
  sim2_nls2.2_e1_tb,
  sim2_nls2.2_e4_tb,
  sim2_nls2.2_e7_tb,
  sim2_nls2.2_e2_tb,
  sim2_nls2.2_e5_tb,
  sim2_nls2.2_e8_tb,
  sim2_nls2.2_e3_tb,
  sim2_nls2.2_e6_tb,
  sim2_nls2.2_e9_tb
)
)

#Make sure the column names for sim2_no_error match sim2_e1_e9_single
colnames(sim2_no_error)==colnames(sim2_e1_e9_single)

#Add no error row to sim2_e1_e9_single
sim2_e1_e9_single <- rbind(
  sim2_no_error,
  sim2_e1_e9_single
)

#Add simulation details
(sim2_e1_e9_single <- sim2_e1_e9_single %>% mutate(
    Dataset = c("sim2",
      rep(c(
     "sim2_e1",
     "sim2_e4",
     "sim2_e7",
     "sim2_e2",
     "sim2_e5",
     "sim2_e8",
     "sim2_e3",
     "sim2_e6",
     "sim2_e9"
     ), m)
     ),
 
  Description = c("No error",
    rep(c(
     "Low error, no skew",
     "Low error, left skew",
     "Low error, right skew",
     "Medium error, no skew",
     "Medium error, left skew",
     "Medium error, right skew",
     "High error, no skew",
     "High error, left skew",
     "High error, right skew"
     ), m)
    ),  
   
  Model = c("Actual",
    rep(c(
    "Rayleigh + Nls1.2",
    "Rayleigh + Nls2.2"
  ), each = 9)
  ),
  
  Resid_size = c("None",
    rep(
    rep(c(
    "Low",
    "Medium",
    "High"
  ), each = 3), m)
  ),
  
  Resid_skew = c("No",
    rep(
    rep(c(
    "No",
    "Left",
    "Right"
  ), 3), m)
  )
)%>%
    select(`Dataset`, `Description`, `Model`, `Resid_size`, `Resid_skew`, everything())
)

write.csv(sim2_e1_e9_single, here("data/output/sim2/sim2_e1_e9_single.csv"), row.names = TRUE)

```


#Make an empty table to store data from each set of 1000 simulations.
```{r blank_sim_rep}
# n = number of times simulation is repeated (loops)
n = 1000

# m = number of models
m = 3

#Make an empty tibble to store the results for each simulation tested on each model.
#Ray = standard Rayleigh model

blank_sim_rep <- function(n, m) {
  tibble(
  Multiple_R_squared = vector(length = n*m, mode = "numeric"),
  RMSE_delta_p = vector(length = n*m, mode = "numeric"),
  
  lm_delta_p_ncv = vector(length = n*m, mode = "numeric"),
  levene_delta_p_res = vector(length = n*m, mode = "numeric"),
  JB_delta_p_res = vector(length = n*m, mode = "numeric"),
  
  skew = vector(length = n*m, mode = "numeric"),
  skew_factor = vector(length = n*m, mode = "numeric"),
  lm_skew_factor = vector(length = n*m, mode = "numeric"),
  kurt = vector(length = n*m, mode = "numeric"),
  
  f_min = vector(length = n*m, mode = "numeric"),
  f_max = vector(length = n*m, mode = "numeric"),
  
  delta_s0 = vector(length = n*m, mode = "numeric"),
  se_delta_s0 = vector(length = n*m, mode = "numeric"),
  
  rho = vector(length = n*m, mode = "numeric"),
  se_rho = vector(length = n*m, mode = "numeric"),
  
  tau = vector(length = n*m, mode = "numeric"),
  se_tau = vector(length = n*m, mode = "numeric"),
  
  epsilon_p = vector(length = n*m, mode = "numeric"),
  se_epsilon_p = vector(length = n*m, mode = "numeric"),
  
  RMSE_delta_alpha = vector(length = n*m, mode = "numeric"),
  R_squared_delta_alpha = vector(length = n*m, mode = "numeric"),
  epsilon_alpha = vector(length = n*m, mode = "numeric"),
  se_epsilon_alpha = vector(length = n*m, mode = "numeric"),
  
  RMSE_delta_beta = vector(length = n*m, mode = "numeric"),
  R_squared_delta_beta = vector(length = n*m, mode = "numeric"),
  epsilon_beta = vector(length = n*m, mode = "numeric"),
  se_epsilon_beta = vector(length = n*m, mode = "numeric"),  
  
  ff_p = vector(length = n*m, mode = "numeric"),
  se_ff_p = vector(length = n*m, mode = "numeric"),
  ff_alpha = vector(length = n*m, mode = "numeric"),
  se_ff_alpha = vector(length = n*m, mode = "numeric"),
  ff_beta = vector(length = n*m, mode = "numeric"),
  se_ff_beta = vector(length = n*m, mode = "numeric"),
  
  KIE_p = vector(length = n*m, mode = "numeric"),
  se_KIE_p = vector(length = n*m, mode = "numeric"),
  KIE_alpha = vector(length = n*m, mode = "numeric"),
  se_KIE_alpha = vector(length = n*m, mode = "numeric"),
  KIE_beta = vector(length = n*m, mode = "numeric"),
  se_KIE_beta = vector(length = n*m, mode = "numeric"),
  
  #absolute relative difference = |(est-true)/true|
  diff_epsilon_p = vector(length = n*m, mode = "numeric"),
  diff_epsilon_alpha = vector(length = n*m, mode = "numeric"),
  diff_epsilon_beta = vector(length = n*m, mode = "numeric"),
  
  diff_ff_p = vector(length = n*m, mode = "numeric"),
  diff_ff_alpha = vector(length = n*m, mode = "numeric"),
  diff_ff_beta = vector(length = n*m, mode = "numeric"),
  
  diff_KIE_p = vector(length = n*m, mode = "numeric"),
  diff_KIE_alpha = vector(length = n*m, mode = "numeric"),
  diff_KIE_beta = vector(length = n*m, mode = "numeric"),
  
  diff_rho = vector(length = n*m, mode = "numeric"),
  diff_tau = vector(length = n*m, mode = "numeric"),
  
  #add p-values for each component of the Expanded Rayleigh model
  ##null hypothesis: no kinetic isotope effect (espilon = 0 or rho = 0.5 or tau = 0.5)
  pval = vector(length = n*m, mode = "numeric"),
  
  pval_slope_delta_alpha = vector(length = n*m, mode = "numeric"),
  pval_slope_delta_beta = vector(length = n*m, mode = "numeric"),
  
  ##null hypothesis: rho = 0 (extracted w/ summary function)
  pval_rho_0 = vector(length = n*m, mode = "numeric"),
  
  ##null hypothesis: mean tau = mean tau from no error dataset
  pval_tau_mean = vector(length = n*m, mode = "numeric")
)
}
```


#Do 1000 simulations w/ low error, no skew (sim2_e1) and extract the results for the standard Rayleigh model (linear) and Expanded Rayleigh models 1 and 2 (nls1.2 and nls2.2).

Low error, no skew added to N_s, delta_p, and delta_alpha

Skewness: Aiming for skewness of residuals for linear model (where y = delta_p) between -0.5 and 0.5

Set omega (skewness) to 0

If the skewness of the residuals for the standard (linear) Rayleigh model where y = delta_p is < -0.5 or greater than > 0.5, skip to the next loop.

After >1000 datasets are simulated, datasets w/ the wrong skewness type are removed. Then additional datasets are removed at random to bring the final number of datasets to 1000.

Extract results for each model

  1. Standard Rayleigh model
  
    i. KIE values were calculated from `epsilon_p` (bulk epsilon), `epsilon_alpha`, or `epsilon_beta` values obtained via linear regression of delta_bulk, delta_alpha, or delta_beta against `-flnf/(1-f)` (Eq. (2)).
    
    ##Eq. (2)
    
$${\delta}^{15}N^p = {\delta}^{15}N^{s0} - {\epsilon}_{p/s}*fln(f)/(1-f)$$
    
    ii. Statistics in this section of the table (RMSE, p-values) were calculated for standard Rayleigh linear regression model.
    
  2. Expanded Rayleigh Model 1
  
    i. Bulk values (`epsilon_p`, `ff_p`, and `KIE_p`) were deterined via the standard Rayleigh approach.
    
    ii. `rho` was determined using nonlinear model 1 (nls1.2).
    
    iii. `tau` was determined by averaging `14N_alpha`/`14N_bulk` for every value of f.
    
    iv. Fractionation factors for N^$\alpha$^ (`ff_alpha) and N^$\beta$^ (`ff_beta`) were calculated by combining `rho`, `tau`, and `ff_p` (Eq.(21) and Eq. (22)).
    
    
    ##Eq. (21)
    
$${\alpha}_{N-{\alpha}} = {\rho}/{\tau}*{\alpha}_{N-bulk}$$
  ##Eq. (22)
$${\alpha}_{N-{\beta}} = (1-{\rho})/(1-{\tau})*{\alpha}_{N-bulk}$$  
    
    v. Statistics in this section of the table (RMSE, p-values) were calculated for nonlinear model 1 (or the rho value determined using this model). p-value null hypothesis: rho = 0.5
    
  2. Expanded Rayleigh Model 2
  
    i. Bulk values (`epsilon_p`, `ff_p`, and `KIE_p`) were deterined via the standard Rayleigh approach.
    
    ii. `rho` was determined using nonlinear model 2 (nls2.2).
    
    iii. `tau` was determined by averaging `14N_alpha`/`14N_bulk` for every value of f.
    
    iv. Fractionation factors for N^$\alpha$^ (`ff_alpha) and N^$\beta$^ (`ff_beta`) were calculated by combining `rho`, `tau`, and `ff_p` (Eq.(21) and Eq. (22)).
    
    ##Eq. (21)
    
$${\alpha}_{N-{\alpha}} = {\rho}/{\tau}*{\alpha}_{N-bulk}$$
  ##Eq. (22)
$${\alpha}_{N-{\beta}} = (1-{\rho})/(1-{\tau})*{\alpha}_{N-bulk}$$  
    
    v. Statistics in this section of the table (RMSE, p-values) were calculated for nonlinear model 2 (or the rho value determine with this model). p-value null hypothesis: rho = 0.5
    
  4. Average tau "model"
    i. Tau was calculated by averaging `14N_alpha`/`14N_p` for every value of f.
    
    ii. Statistics in thi section of the table (p-values) were calculated for tau. p-valu null hypothesis: tau = 0.5
    
```{r sim_loop_e1}
#Nonlinear model 1.2 (sim_formula_nls1.2)
##Eq. (29)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#Nonlinear model 2.2 (sim_formula_nls2.2)
##Eq. (30)
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#R_std for atmospheric N2 = 0.0036765
R_std = 0.0036765

# n = number of times simulation is repeated (loops)
n = 1460

# m = number of models
m = 4

#Make an empty tibble to store the results for each simulation tested on each model.
#Ray = standard Rayleigh model

sim2_e1_rep <- blank_sim_rep(n = n, m = m)

#for loop to generate multiple simulated datasets
set.seed(313)

for (i in 1:n) {
  #Make table with randomly generated, normally distributed error (low error, sim2_e1).
  
data <- sim2 %>%
  #Subset data
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)
  
#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 0.015*sim2_tb2$N_s0[1], 0), "SN")  
error_1 <- rsn(n = length(data$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 0.5, 0), "SN")  
error_2 <- rsn(n = length(data$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 0.7, 0), "SN")  
error_3 <- rsn(n = length(data$N_s), dp = params_3)  
  
  #add normally distributed low error to N_s, delta_p, and delta_alpha
data <- data %>%
    mutate(
    N_s = N_s + error_1,
         f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
         delta_p = delta_p + error_2,
         delta_alpha = delta_alpha + error_3,
         delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f,
        SP = delta_alpha - delta_beta,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        R_std = 0.0036765,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`
         )
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_p
  lm_delta_p <- lm(delta_p ~ `-flnf/(1-f)`, data = data)
 
  #Treat replicate as factor, add lm residuals to data table.
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  lm_delta_p_residuals = lm_delta_p$residuals
)
 
#Test skewness of residuals for linear model
  if(skewness(data$lm_delta_p_residuals) < -0.5|
     skewness(data$lm_delta_p_residuals) > 0.5) {
   next
  }    
     
  sim2_e1_rep$Multiple_R_squared[i] = summary(lm_delta_p)$r.squared
  sim2_e1_rep$RMSE_delta_p[i] = rmse(model = lm_delta_p, 
                                     data = data)
  
  #Test for non-constant error variance (store p-value)
  lm_delta_p_ncv <- car::ncvTest(lm_delta_p)
  sim2_e1_rep$lm_delta_p_ncv[i] = lm_delta_p_ncv$p
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)

  lm_delta_p_lev <- car::leveneTest(lm_delta_p_residuals ~ replicate, data = data)
  sim2_e1_rep$levene_delta_p_res[i] = lm_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  lm_delta_p_JB <- jarque.test(as.vector(data$lm_delta_p_residuals))
  sim2_e1_rep$JB_delta_p_res[i] = lm_delta_p_JB$p.value
  
  #skewness and kurtosis for linear standard Rayleigh model
  sim2_e1_rep$skew[i] = skewness(lm_delta_p$residuals)
   
  if(sim2_e1_rep$skew[i] < -0.5) {
    sim2_e1_rep$skew_factor[i] = 2 #left-skew = 2
  } else if(sim2_e1_rep$skew[i] >= -0.5 & sim2_e1_rep$skew[i] <= 0.5) {
    sim2_e1_rep$skew_factor[i] = 1 #no skew = 1
  } else if (sim2_e1_rep$skew[i] > 0.5) {
    sim2_e1_rep$skew_factor[i] = 3 #right-skew = 3
  }
    
  sim2_e1_rep$lm_skew_factor[i] = sim2_e1_rep$skew_factor[i]
  
  sim2_e1_rep$kurt[i] = kurtosis(lm_delta_p$residuals)
  
  sim2_e1_rep$f_min[i] = min(data$f)
  sim2_e1_rep$f_max[i] = max(data$f)
  
  sim2_e1_rep$delta_s0[i] = summary(lm_delta_p)$coefficients[1,1]
  sim2_e1_rep$se_delta_s0[i] = summary(lm_delta_p)$coefficients[1,2]
  sim2_e1_rep$epsilon_p[i] = summary(lm_delta_p)$coefficients[2,1]
  sim2_e1_rep$se_epsilon_p[i] = summary(lm_delta_p)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_alpha
  lm_delta_alpha <- lm(delta_alpha ~ `-flnf/(1-f)`, data = data)
  
  sim2_e1_rep$RMSE_delta_alpha[i] = rmse(model = lm_delta_alpha, 
                                               data = data)
  sim2_e1_rep$R_squared_delta_alpha[i] = summary(lm_delta_alpha)$r.squared
  sim2_e1_rep$epsilon_alpha[i] =summary(lm_delta_alpha)$coefficients[2,1]
  sim2_e1_rep$se_epsilon_alpha[i] =
    summary(lm_delta_alpha)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_beta  
  lm_delta_beta <- lm(delta_beta ~ `-flnf/(1-f)`, data = data)
  
  sim2_e1_rep$RMSE_delta_beta[i] = rmse(model = lm_delta_beta, 
                                        data = data)
  sim2_e1_rep$R_squared_delta_beta[i] = summary(lm_delta_beta)$r.squared  
  sim2_e1_rep$epsilon_beta[i] = summary(lm_delta_beta)$coefficients[2,1]
  sim2_e1_rep$se_epsilon_beta[i]=summary(lm_delta_beta)$coefficients[2,2]
  
  #Convert standard Rayleigh epsilon_p to fractionation factor (ff_p)
  sim2_e1_rep$ff_p[i] = 1 + lm_delta_p$coefficients[2]/1000
  sim2_e1_rep$se_ff_p[i] = summary(lm_delta_p)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_alpha to fractionation factor (ff_alpha)
  sim2_e1_rep$ff_alpha[i] = 1 + lm_delta_alpha$coefficients[2]/1000
  sim2_e1_rep$se_ff_alpha[i] = summary(lm_delta_alpha)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_beta to fractionation factor (ff_beta)
  sim2_e1_rep$ff_beta[i] = 1 + lm_delta_beta$coefficients[2]/1000
  sim2_e1_rep$se_ff_beta[i] = summary(lm_delta_beta)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_p to KIE (KIE_p)
  sim2_e1_rep$KIE_p[i] = 1000/
    (as.numeric(coef(lm_delta_p)[2]) +1000)
  sim2_e1_rep$se_KIE_p[i] = abs(
      -1/(as.numeric(coef(lm_delta_p)[2])/1000 + 1)^2*
        summary(lm_delta_p)$coefficients[2,2]/1000) #abs(-1/(ff_p)^2*se_ff_p)
   
   #Convert standard Rayleigh epsilon_alpha to KIE (KIE_alpha)
   sim2_e1_rep$KIE_alpha[i] = 1000/
    (as.numeric(coef(lm_delta_alpha)[2]) +1000)
   sim2_e1_rep$se_KIE_alpha[i] = abs(
      -1/(as.numeric(coef(lm_delta_alpha)[2])/1000 + 1)^2*
        summary(lm_delta_alpha)$coefficients[2,2]/1000)
   
   #Convert standard Rayleigh epsilon_beta to KIE (KIE_beta)
   sim2_e1_rep$KIE_beta[i] = 1000/
    (as.numeric(coef(lm_delta_beta)[2]) +1000)
   sim2_e1_rep$se_KIE_beta[i] = abs(
      -1/(as.numeric(coef(lm_delta_beta)[2])/1000 + 1)^2*
        summary(lm_delta_beta)$coefficients[2,2]/1000)
   
  #Calculate est_diff for epsilon values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e1_rep$diff_epsilon_p[i] =
    abs((sim2_e1_rep$epsilon_p[i] - sim2_tb2$epsilon_bulk[1])/
          sim2_tb2$epsilon_bulk[1])
  
  sim2_e1_rep$diff_epsilon_alpha[i] =
    abs((sim2_e1_rep$epsilon_alpha[i] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e1_rep$diff_epsilon_beta[i] =
    abs((sim2_e1_rep$epsilon_beta[i] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e1_rep$diff_ff_p[i] =
    abs((sim2_e1_rep$ff_p[i] - sim2_tb2$ff_p[1])/
          sim2_tb2$ff_p[1])
  
  sim2_e1_rep$diff_ff_alpha[i] =
    abs((sim2_e1_rep$ff_alpha[i] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e1_rep$diff_ff_beta[i] =
    abs((sim2_e1_rep$ff_beta[i] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (standard Rayleigh equation)
  #absolute relative difference = |(est-true)/true|
  sim2_e1_rep$diff_KIE_p[i] =
    abs((sim2_e1_rep$KIE_p[i] - sim2_tb2$KIE_p[1])/
          sim2_tb2$KIE_p[1])
  
  sim2_e1_rep$diff_KIE_alpha[i] =
    abs((sim2_e1_rep$KIE_alpha[i] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e1_rep$diff_KIE_beta[i] =
    abs((sim2_e1_rep$KIE_beta[i] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #add p-value for epsilon_p from standard Rayleigh equation (slope of linear model, y = delta_p)
  sim2_e1_rep$pval[i] = summary(lm_delta_p)$coefficients[2, 4]
  
  #Add p-value for slope of linear Rayleigh where y = delta_alpha or delta_beta
  sim2_e1_rep$pval_slope_delta_alpha[i] = summary(lm_delta_alpha)$coefficients[2, 4]
  sim2_e1_rep$pval_slope_delta_beta[i] = summary(lm_delta_beta)$coefficients[2, 4]
   
#Apply nonlinear model 1.2 (sim_formula_nls1.2) (defined above)
  nls1.2 <- nls(sim_formula_nls1.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e1_rep$RMSE_delta_p[(n + i)] = rmse(nls1.2, data = data)

  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls1.2_delta_p_res <- nlsResiduals(nls1.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls1.2_delta_p_residuals = nls1.2_delta_p_res$resi1[ ,2]
)

  nls1.2_delta_p_lev <- car::leveneTest(nls1.2_delta_p_residuals ~ replicate, data = data)
  sim2_e1_rep$levene_delta_p_res[(n + i)] = nls1.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls1.2_delta_p_JB <- jarque.test(data$nls1.2_delta_p_residuals)
  sim2_e1_rep$JB_delta_p_res[(n + i)] = nls1.2_delta_p_JB$p.value
  
  #Skewness and kurtosis for nls1.2
  sim2_e1_rep$skew[(n + i)] = skewness(data$nls1.2_delta_p_residuals)
  
  if(sim2_e1_rep$skew[(n + i)] < -0.5) {
    sim2_e1_rep$skew_factor[(n + i)] = 2 #left-skew = 2
  } else if(sim2_e1_rep$skew[(n + i)] >= -0.5 & sim2_e1_rep$skew[(n + i)] <= 0.5) {
    sim2_e1_rep$skew_factor[(n + i)] = 1 #no skew = 1
  } else if (sim2_e1_rep$skew[(n + i)] > 0.5) {
    sim2_e1_rep$skew_factor[(n + i)] = 3 #right-skew = 3
  }
  
  #Add lm_skew_factor to nls1.2 rows for indexing (same for all models)
  sim2_e1_rep$lm_skew_factor[(n + i)] = sim2_e1_rep$skew_factor[i]  
  
  sim2_e1_rep$kurt[(n + i)] = kurtosis(data$nls1.2_delta_p_residuals)
  
  #Calculate rho and tau for nls1.2
  sim2_e1_rep$rho[(n + i)] = coef(nls1.2)
  sim2_e1_rep$se_rho[(n + i)] = summary(nls1.2)$coefficients[1,2]
  
  sim2_e1_rep$tau[(n + i)] = mean(data$tau)
  sim2_e1_rep$se_tau[(n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e1_rep$f_min[(n + i)] = min(data$f)
  sim2_e1_rep$f_max[(n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e1_rep$ff_alpha[(n + i)] = 
    (coef(nls1.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls1.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e1_rep$se_ff_alpha[(n+i)] = 
  sqrt((sim2_e1_rep$ff_p[i]/sim2_e1_rep$tau[(n + i)]*sim2_e1_rep$se_rho[(n + i)])^2 + (-coef(nls1.2)*sim2_e1_rep$ff_p[i]/sim2_e1_rep$tau[(n + i)]^2*sim2_e1_rep$se_tau[(n + i)])^2+ (coef(nls1.2)/sim2_e1_rep$tau[(n + i)]*sim2_e1_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_alpha and se_epsilon_alpha (nls1.2):
  sim2_e1_rep$epsilon_alpha[(n + i)] = 1000*(sim2_e1_rep$ff_alpha[(n + i)] - 1)
  
  sim2_e1_rep$se_epsilon_alpha[(n + i)] =
    1000*sim2_e1_rep$se_ff_alpha[(n + i)]
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e1_rep$ff_beta[(n + i)] = 
    (1-coef(nls1.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls1.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e1_rep$se_ff_beta[(n + i)] = sqrt((-sim2_e1_rep$ff_p[i]/(1-mean(data$tau))*sim2_e1_rep$se_rho[(n + i)])^2 + ((1-coef(nls1.2))*sim2_e1_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e1_rep$se_tau[(n + i)])^2 + ((1-coef(nls1.2))/(1-mean(data$tau))*sim2_e1_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_beta and se_epsilon_beta (nls1.2):
  sim2_e1_rep$epsilon_beta[(n + i)] = 
    1000*(sim2_e1_rep$ff_beta[(n + i)] -1)
  sim2_e1_rep$se_epsilon_beta[(n + i)] =
    1000*sim2_e1_rep$se_ff_beta[(n + i)]
  
  #Calculate KIE_alpha and KIE_beta (nls1.2):
  sim2_e1_rep$KIE_alpha[(n + i)] = 1000/(sim2_e1_rep$epsilon_alpha[(n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e1_rep$se_KIE_alpha[(n + i)] = abs((-1/sim2_e1_rep$ff_alpha[(n + i)]^2)*sim2_e1_rep$se_ff_alpha[(n+i)])
  
  sim2_e1_rep$KIE_beta[(n + i)] = 1000/(sim2_e1_rep$epsilon_beta[(n + i)] +1000)
  
  sim2_e1_rep$se_KIE_beta[(n + i)] = abs((-1/sim2_e1_rep$ff_beta[(n + i)]^2)*sim2_e1_rep$se_ff_beta[(n+i)])
  
  #Calculate est_diff for epsilon values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e1_rep$diff_epsilon_alpha[(n + i)] =
    abs((sim2_e1_rep$epsilon_alpha[(n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e1_rep$diff_epsilon_beta[(n + i)] =
    abs((sim2_e1_rep$epsilon_beta[(n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e1_rep$diff_ff_alpha[(n + i)] =
    abs((sim2_e1_rep$ff_alpha[(n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e1_rep$diff_ff_beta[(n + i)] =
    abs((sim2_e1_rep$ff_beta[(n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e1_rep$diff_KIE_alpha[(n + i)] =
    abs((sim2_e1_rep$KIE_alpha[(n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e1_rep$diff_KIE_beta[(n + i)] =
    abs((sim2_e1_rep$KIE_beta[(n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls1.2)
  sim2_e1_rep$diff_rho[(n + i)] = 
    abs((sim2_e1_rep$rho[(n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))
  
  #add p-value for rho (parameter estimated from nls1.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls1.2)$coefficients[1, 1] - 0.5)/
    summary(nls1.2)$coefficients[1, 2]
  sim2_e1_rep$pval[(n + i)] = 2*pt(q = t_test, df = df.residual(nls1.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e1_rep$pval_rho_0[(n + i)] = summary(nls1.2)$coefficients[1, 4]  
  
  
#Apply nonlinear model 2.2 (sim_formula_nls2.2) (defined above)
  nls2.2 <- nls(sim_formula_nls2.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e1_rep$RMSE_delta_p[(2*n + i)] = rmse(nls2.2, data = data)
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls2.2_delta_p_res <- nlsResiduals(nls2.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls2.2_delta_p_residuals = nls2.2_delta_p_res$resi1[ ,2]
)

  nls2.2_delta_p_lev <- car::leveneTest(nls2.2_delta_p_residuals ~ replicate, data = data)
  sim2_e1_rep$levene_delta_p_res[(2*n + i)] = nls2.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls2.2_delta_p_JB <- jarque.test(data$nls2.2_delta_p_residuals)
  sim2_e1_rep$JB_delta_p_res[(2*n + i)] = nls2.2_delta_p_JB$p.value   
  
  #Skewness and kurtosis for nls2.2
  sim2_e1_rep$skew[(2*n + i)] = skewness(data$nls2.2_delta_p_residuals)
  
  if(sim2_e1_rep$skew[(2*n + i)] < -0.5) {
    sim2_e1_rep$skew_factor[(2*n + i)] = 2 #left-skew = 2
  } else if(sim2_e1_rep$skew[(2*n + i)] >= -0.5 & sim2_e1_rep$skew[(2*n + i)] <= 0.5) {
    sim2_e1_rep$skew_factor[(2*n + i)] = 1 #no skew = 1
  } else if (sim2_e1_rep$skew[(2*n + i)] > 0.5) {
    sim2_e1_rep$skew_factor[(2*n + i)] = 3 #right-skew = 3
  }
  
  sim2_e1_rep$kurt[(2*n + i)] = kurtosis(data$nls2.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls2.2 rows for indexing (same for all models)
  sim2_e1_rep$lm_skew_factor[(2*n + i)] = sim2_e1_rep$skew_factor[i]  
  
  #Calculate rho and tau for nls2.2
  sim2_e1_rep$rho[(2*n + i)] = coef(nls2.2)
  sim2_e1_rep$se_rho[(2*n + i)] = summary(nls2.2)$coefficients[1,2]
  
  sim2_e1_rep$tau[(2*n + i)] = mean(data$tau)
  sim2_e1_rep$se_tau[(2*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e1_rep$f_min[(2*n + i)] = min(data$f)
  sim2_e1_rep$f_max[(2*n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e1_rep$ff_alpha[(2*n + i)] = 
    (coef(nls2.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls2.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e1_rep$se_ff_alpha[(2*n + i)] = 
  sqrt((sim2_e1_rep$ff_p[i]/sim2_e1_rep$tau[(2*n + i)]*sim2_e1_rep$se_rho[(2*n + i)])^2 + (-coef(nls2.2)*sim2_e1_rep$ff_p[i]/sim2_e1_rep$tau[(2*n + i)]^2*sim2_e1_rep$se_tau[(2*n + i)])^2+ (coef(nls2.2)/sim2_e1_rep$tau[(2*n + i)]*sim2_e1_rep$se_ff_p[i])^2)
    
  #Calculate epsilon_alpha and se_epsilon_alpha (nls2.2):
  sim2_e1_rep$epsilon_alpha[(2*n + i)] = 1000*(sim2_e1_rep$ff_alpha[(2*n + i)] - 1)
  
  sim2_e1_rep$se_epsilon_alpha[(2*n + i)] =
    1000*sim2_e1_rep$se_ff_alpha[(2*n + i)]  
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e1_rep$ff_beta[(2*n + i)] = 
    (1-coef(nls2.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)  
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls2.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e1_rep$se_ff_beta[(2*n + i)] = sqrt((-sim2_e1_rep$ff_p[i]/(1-mean(data$tau))*sim2_e1_rep$se_rho[(2*n + i)])^2 + ((1-coef(nls2.2))*sim2_e1_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e1_rep$se_tau[(2*n + i)])^2 + ((1-coef(nls2.2))/(1-mean(data$tau))*sim2_e1_rep$se_ff_p[i])^2) 
  
  #Calculate epsilon_beta and se_epsilon_beta (nls2.2):
  sim2_e1_rep$epsilon_beta[(2*n + i)] = 
    1000*(sim2_e1_rep$ff_beta[(2*n + i)] -1)
  sim2_e1_rep$se_epsilon_beta[(2*n + i)] =
    1000*sim2_e1_rep$se_ff_beta[(2*n + i)]  
  
  #Calculate KIE_alpha and KIE_beta (nls2.2):
  sim2_e1_rep$KIE_alpha[(2*n + i)] = 1000/(sim2_e1_rep$epsilon_alpha[(2*n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e1_rep$se_KIE_alpha[(2*n + i)] = abs((-1/sim2_e1_rep$ff_alpha[(2*n + i)]^2)*sim2_e1_rep$se_ff_alpha[(2*n + i)])
  
  sim2_e1_rep$KIE_beta[(2*n + i)] = 1000/(sim2_e1_rep$epsilon_beta[(2*n + i)] +1000)
  
  sim2_e1_rep$se_KIE_beta[(2*n + i)] = abs((-1/sim2_e1_rep$ff_beta[(2*n + i)]^2)*sim2_e1_rep$se_ff_beta[(2*n + i)])
  
  #Calculate est_diff for epsilon values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e1_rep$diff_epsilon_alpha[(2*n + i)] =
    abs((sim2_e1_rep$epsilon_alpha[(2*n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e1_rep$diff_epsilon_beta[(2*n + i)] =
    abs((sim2_e1_rep$epsilon_beta[(2*n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e1_rep$diff_ff_alpha[(2*n + i)] =
    abs((sim2_e1_rep$ff_alpha[(2*n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e1_rep$diff_ff_beta[(2*n + i)] =
    abs((sim2_e1_rep$ff_beta[(2*n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e1_rep$diff_KIE_alpha[(2*n + i)] =
    abs((sim2_e1_rep$KIE_alpha[(2*n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e1_rep$diff_KIE_beta[(2*n + i)] =
    abs((sim2_e1_rep$KIE_beta[(2*n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls2.2)
  sim2_e1_rep$diff_rho[(2*n + i)] = 
    abs((sim2_e1_rep$rho[(2*n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))  
  
  #add p-value for rho (parameter estimated from nls2.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls2.2)$coefficients[1, 1] - 0.5)/
    summary(nls2.2)$coefficients[1, 2]
  sim2_e1_rep$pval[(2*n + i)] = 2*pt(q = t_test, df = df.residual(nls2.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e1_rep$pval_rho_0[(2*n + i)] = summary(nls2.2)$coefficients[1, 4]  
  
#average tau "model"
  #Calculate tau (same for all three models)
  sim2_e1_rep$tau[(3*n + i)] = mean(data$tau)
  sim2_e1_rep$se_tau[(3*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e1_rep$f_min[(3*n + i)] = min(data$f)
  sim2_e1_rep$f_max[(3*n + i)] = max(data$f)  
  
  sim2_e1_rep$skew[(3*n + i)] = skewness(data$tau)
  
  if(sim2_e1_rep$skew[(3*n + i)] < -0.5) {
    sim2_e1_rep$skew_factor[(3*n + i)] = 2 #left-skew = 2
  } else if(sim2_e1_rep$skew[(3*n + i)] >= -0.5 & sim2_e1_rep$skew[(3*n + i)] <= 0.5) {
    sim2_e1_rep$skew_factor[(3*n + i)] = 1 #no skew = 1
  } else if (sim2_e1_rep$skew[(3*n + i)] > 0.5) {
    sim2_e1_rep$skew_factor[(3*n + i)] = 3 #right-skew = 3
  }  
    
  sim2_e1_rep$kurt[(3*n + i)] = kurtosis(data$tau)
  
  #Add lm_skew_factor to average tau rows for indexing (same for all models)
  sim2_e1_rep$lm_skew_factor[(3*n + i)] = sim2_e1_rep$skew_factor[i]    
  
  #Calculate est_diff for tau value (same for linear and nonlinear models)
  sim2_e1_rep$diff_tau[(3*n + i)] = 
    abs((sim2_e1_rep$tau[(3*n + i)] - mean(sim2_tb2$tau, na.rm = TRUE))/
          mean(sim2_tb2$tau, na.rm = TRUE))   
  
  #Calculate p-value for average tau. Null hypothesis: tau = 0.5
  sim2_e1_rep$pval[(3*n + i)] = t.test(data$tau, mu = 0.5)$p.value
  
  #Calculate pval_tau_mean. Null hypothesis: tau = mean tau value from sim2 (no error dataset)
  sim2_e1_rep$pval_tau_mean[(3*n + i)] = t.test(data$tau, mu = mean(sim2_tb2$tau, na.rm = TRUE))$p.value  
}


#Filter by skewness in each model to count how many datasets were generated for each skewness type for each model.

##Filter by skewness in linear model
sim2_e1_lm_left_skew <- filter(sim2_e1_rep[1:n, ], skew < -0.5)
sim2_e1_lm_no_skew <- filter(sim2_e1_rep[1:n, ], skew >= -0.5 & skew <= 0.5)
sim2_e1_lm_right_skew <- filter(sim2_e1_rep[1:n, ], skew > 0.5)

##Filter by skewness in nls1
sim2_e1_nls1_left_skew <- filter(sim2_e1_rep[(n + 1):(n + n), ], skew < -0.5)
sim2_e1_nls1_no_skew <- filter(sim2_e1_rep[(n + 1):(n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e1_nls1_right_skew <- filter(sim2_e1_rep[(n + 1):(n + n), ], skew > 0.5)

##Filter by skewness in nls2
sim2_e1_nls2_left_skew <- filter(sim2_e1_rep[(2*n + 1):(2*n + n), ], skew < -0.5)
sim2_e1_nls2_no_skew <- filter(sim2_e1_rep[(2*n + 1):(2*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e1_nls2_right_skew <- filter(sim2_e1_rep[(2*n + 1):(2*n + n), ], skew > 0.5)

##Filter by skewness in tau average
sim2_e1_tau_left_skew <- filter(sim2_e1_rep[(3*n + 1):(3*n + n), ], skew < -0.5)
sim2_e1_tau_no_skew <- filter(sim2_e1_rep[(3*n + 1):(3*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e1_tau_right_skew <- filter(sim2_e1_rep[(3*n + 1):(3*n + n), ], skew > 0.5)

#Filter by lm_skew_factor to select the rows for all four models (linear, nls1, nls2, and average tau) that correspond to datasets with no skew in the linear model.

#For datasets where the lm residuals are skewed, lm_skew_factor == 0 because that iteration was cut short ("next" function) before any non-zero values were stored in the table.

sim2_e1_rep2 <- filter(sim2_e1_rep, lm_skew_factor == 1)
nrep = nrow(sim2_e1_rep2)/m

##Filter by skewness in linear model
sim2_e1_lm_left_skew2 <- filter(sim2_e1_rep2[1:nrep, ], skew < -0.5)
sim2_e1_lm_no_skew2 <- filter(sim2_e1_rep2[1:nrep, ], skew >= -0.5 & skew <= 0.5)
sim2_e1_lm_right_skew2 <- filter(sim2_e1_rep2[1:nrep, ], skew > 0.5)

##Filter by skewness in nls1
sim2_e1_nls1_left_skew2 <- filter(sim2_e1_rep2[(nrep + 1):(nrep + nrep), ], skew < -0.5)
sim2_e1_nls1_no_skew2 <- filter(sim2_e1_rep2[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e1_nls1_right_skew2 <- filter(sim2_e1_rep2[(nrep + 1):(nrep + nrep), ], skew > 0.5)

##Filter by skewness in nls2
sim2_e1_nls2_left_skew2 <- filter(sim2_e1_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)
sim2_e1_nls2_no_skew2 <- filter(sim2_e1_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e1_nls2_right_skew2 <- filter(sim2_e1_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

##Filter by skewness in tau average
sim2_e1_tau_left_skew2 <- filter(sim2_e1_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)
sim2_e1_tau_no_skew2 <- filter(sim2_e1_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e1_tau_right_skew2 <- filter(sim2_e1_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

#Randomly remove extra rows from sim2_e1_rep2 so that there are 1000 replicates.
nremove <- nrow(sim2_e1_lm_no_skew2) - 1000

#Make indexing vectors to remove the same datasets for each model
v1 <- sample(1:nrow(sim2_e1_lm_no_skew2), size = nremove)
v2 <- c(v1, (v1 + nrep), (v1 + 2*nrep), (v1 + 3*nrep))

sim2_e1_rep3 <- sim2_e1_rep2[-v2, ]


#Reset nrep
nrep = nrow(sim2_e1_rep3)/m

#Count the final number of no skew, left skew, and right-skew data in sim2_e1_rep3

##Filter by skewness in linear model
sim2_e1_lm_left_skew3 <- filter(sim2_e1_rep3[1:nrep, ], skew < -0.5)
sim2_e1_lm_no_skew3 <- filter(sim2_e1_rep3[1:nrep, ], skew >= -0.5 & skew <= 0.5)
sim2_e1_lm_right_skew3 <- filter(sim2_e1_rep3[1:nrep, ], skew > 0.5)

##Filter by skewness in nls1
sim2_e1_nls1_left_skew3 <- filter(sim2_e1_rep3[(nrep + 1):(nrep + nrep), ], skew < -0.5)
sim2_e1_nls1_no_skew3 <- filter(sim2_e1_rep3[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e1_nls1_right_skew3 <- filter(sim2_e1_rep3[(nrep + 1):(nrep + nrep), ], skew > 0.5)

##Filter by skewness in nls2
sim2_e1_nls2_left_skew3 <- filter(sim2_e1_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)
sim2_e1_nls2_no_skew3 <- filter(sim2_e1_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e1_nls2_right_skew3 <- filter(sim2_e1_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

##Filter by skewness in average tau
sim2_e1_tau_left_skew3 <- filter(sim2_e1_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)
sim2_e1_tau_no_skew3 <- filter(sim2_e1_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e1_tau_right_skew3 <- filter(sim2_e1_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

##Significant p-values for linear model slope
sim2_e1_lm_pval_sig = filter(sim2_e1_rep3[1:nrep, ], pval < 0.05)
sim2_e1_lm_delta_alpha_pval_sig <- filter(sim2_e1_rep3[1:nrep, ], 
                                         pval_slope_delta_alpha < 0.05)
sim2_e1_lm_delta_beta_pval_sig <- filter(sim2_e1_rep3[1:nrep, ], 
                                         pval_slope_delta_beta < 0.05)

##Significant p-values for nls1 rho (coefficient)
sim2_e1_nls1_pval_sig <- filter(sim2_e1_rep3[(nrep + 1):(nrep + nrep), ], pval < 0.05)

##Significant p-values for nls2 rho (coefficient)
sim2_e1_nls2_pval_sig <- filter(sim2_e1_rep3[(2*nrep + 1):(2*nrep + nrep), ], pval < 0.05)

##Significant p-values for tau average
sim2_e1_tau_pval_sig <- filter(sim2_e1_rep3[(3*nrep + 1):(3*nrep + nrep), ], pval < 0.05)

#Average results and calculate standard deviation for sim2_e1_rep3 (low error, no skew) (This code needs to be in same block as the for loop so that n doesn't get reset.)

avg_sim2_e1_lm_no_skew <- tibble(
  mean_Ray = colMeans(sim2_e1_rep3[1:nrep, ]),
  mean_nls1 = colMeans(sim2_e1_rep3[(nrep + 1):(nrep + nrep), ]),
  mean_nls2 = colMeans(sim2_e1_rep3[(2*nrep + 1):(2*nrep + nrep), ]),
  mean_tau = colMeans(sim2_e1_rep3[(3*nrep + 1):(3*nrep + nrep), ]),  
  sd_Ray = sapply(sim2_e1_rep3[1:nrep, ], sd),
  sd_nls1 = sapply(sim2_e1_rep3[(nrep + 1):(nrep + nrep), ], sd),
  sd_nls2 = sapply(sim2_e1_rep3[(2*nrep + 1):(2*nrep + nrep), ], sd),
  sd_tau = sapply(sim2_e1_rep3[(3*nrep + 1):(3*nrep + nrep), ], sd)  
) %>% t()  #Flip (transpose) table

colnames(avg_sim2_e1_lm_no_skew) <- colnames(sim2_e1_lm_no_skew)

avg_sim2_e1_lm_no_skew <- as_tibble(avg_sim2_e1_lm_no_skew, rownames = NA)

```

#Do 1000 simulations w/ medium error, no skew (sim2_e2) and extract the results for the standard Rayleigh model (linear) and Expanded Rayleigh models 1 and 2 (nls1.2 and nls2.2).

Medium error, no skew added to N_s, delta_p, and delta_alpha.

Skewness: Aiming for skewness of residuals for linear model between -0.5 and 0.5

Set omega (skewness) to 0

If the skewness of the residuals for the standard (linear) Rayleigh model where y = delta_p is < -0.5 or greater than > 0.5, skip to the next loop.

See notes on sim_loop_e1 for more details.
```{r sim_loop_e2}
#Nonlinear model 1.2 (sim_formula_nls1.2)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#Nonlinear model 2.2 (sim_formula_nls2.2)
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#R_std for atmospheric N2 = 0.0036765
R_std = 0.0036765

# n = number of times simulation is repeated (loops)
#n = 1470
n = 1480

# m = number of models
m = 4

#Make an empty tibble to store the results for each simulation tested on each model.
#Ray = standard Rayleigh model

sim2_e2_rep <- blank_sim_rep(n = n, m = m)

#for loop to generate multiple simulated datasets
set.seed(313)

for (i in 1:n) {
  #Make table with randomly generated, normally distributed error (medium error, sim2_e2).
  
data <- sim2 %>%
  #Subset data
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)

#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 2*0.015*sim2_tb2$N_s0[1], 0), "SN")  
error_1 <- rsn(n = length(data$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 2.5*0.5, 0), "SN")  
error_2 <- rsn(n = length(data$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 2.5*0.7, 0), "SN")  
error_3 <- rsn(n = length(data$N_s), dp = params_3)
  
  #add normally distributed medium error to N_s, delta_p, and delta_alpha
data <- data %>%  
mutate(
        N_s = N_s + (rnorm(n = length(.$N_s), mean = 0, sd = 2*0.015*.$N_s0)),
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + 
           (rnorm(n = length(.$delta_p), mean = 0, sd = 2.5*0.5)),
        delta_alpha = delta_alpha +
           (rnorm(n = length(.$delta_p), mean = 0, sd = 2.5*0.7)),
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        SP = delta_alpha - delta_beta,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        R_std = 0.0036765,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`
         )
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_p
  lm_delta_p <- lm(delta_p ~ `-flnf/(1-f)`, data = data)
  
  #Treat replicate as factor, add lm residuals to data table.
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  lm_delta_p_residuals = lm_delta_p$residuals
)
 
#Test skewness of residuals for linear model
  if(skewness(data$lm_delta_p_residuals) < -0.5|
     skewness(data$lm_delta_p_residuals) > 0.5) {
   next
  }  
  
  sim2_e2_rep$Multiple_R_squared[i] = summary(lm_delta_p)$r.squared
  sim2_e2_rep$RMSE_delta_p[i] = rmse(model = lm_delta_p, 
                                     data = data)
  
  #Test for non-constant error variance (store p-value)
  lm_delta_p_ncv <- car::ncvTest(lm_delta_p)
  sim2_e2_rep$lm_delta_p_ncv[i] = lm_delta_p_ncv$p
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  lm_delta_p_lev <- car::leveneTest(lm_delta_p_residuals ~ replicate, data = data)
  sim2_e2_rep$levene_delta_p_res[i] = lm_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  lm_delta_p_JB <- jarque.test(as.vector(data$lm_delta_p_residuals))
  sim2_e2_rep$JB_delta_p_res[i] = lm_delta_p_JB$p.value
  
  #skewness and kurtosis for linear standard Rayleigh model
  sim2_e2_rep$skew[i] = skewness(lm_delta_p$residuals)
  
  if(sim2_e2_rep$skew[i] < -0.5) {
    sim2_e2_rep$skew_factor[i] = 2 #left-skew = 2
  } else if(sim2_e2_rep$skew[i] >= -0.5 & sim2_e2_rep$skew[i] <= 0.5) {
    sim2_e2_rep$skew_factor[i] = 1 #no skew = 1
  } else if (sim2_e2_rep$skew[i] > 0.5) {
    sim2_e2_rep$skew_factor[i] = 3 #right-skew = 3
  }

  sim2_e2_rep$lm_skew_factor[i] = sim2_e2_rep$skew_factor[i]      
  
  sim2_e2_rep$kurt[i] = kurtosis(lm_delta_p$residuals)
  
  sim2_e2_rep$f_min[i] = min(data$f)
  sim2_e2_rep$f_max[i] = max(data$f)
  
  sim2_e2_rep$delta_s0[i] = summary(lm_delta_p)$coefficients[1,1]
  sim2_e2_rep$se_delta_s0[i] = summary(lm_delta_p)$coefficients[1,2]
  sim2_e2_rep$epsilon_p[i] = summary(lm_delta_p)$coefficients[2,1]
  sim2_e2_rep$se_epsilon_p[i] = summary(lm_delta_p)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_alpha
  lm_delta_alpha <- lm(delta_alpha ~ `-flnf/(1-f)`, data = data)
  
  sim2_e2_rep$RMSE_delta_alpha[i] = rmse(model = lm_delta_alpha, 
                                               data = data)
  sim2_e2_rep$R_squared_delta_alpha[i] = summary(lm_delta_alpha)$r.squared
  sim2_e2_rep$epsilon_alpha[i] =summary(lm_delta_alpha)$coefficients[2,1]
  sim2_e2_rep$se_epsilon_alpha[i] =
    summary(lm_delta_alpha)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_beta  
  lm_delta_beta <- lm(delta_beta ~ `-flnf/(1-f)`, data = data)
  
  sim2_e2_rep$RMSE_delta_beta[i] = rmse(model = lm_delta_beta, 
                                        data = data)
  sim2_e2_rep$R_squared_delta_beta[i] = summary(lm_delta_beta)$r.squared
  sim2_e2_rep$epsilon_beta[i] = summary(lm_delta_beta)$coefficients[2,1]
  sim2_e2_rep$se_epsilon_beta[i]=summary(lm_delta_beta)$coefficients[2,2]
  
  #Convert standard Rayleigh epsilon_p to fractionation factor (ff_p)
  sim2_e2_rep$ff_p[i] = 1 + lm_delta_p$coefficients[2]/1000
  sim2_e2_rep$se_ff_p[i] = summary(lm_delta_p)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_alpha to fractionation factor (ff_alpha)
  sim2_e2_rep$ff_alpha[i] = 1 + lm_delta_alpha$coefficients[2]/1000
  sim2_e2_rep$se_ff_alpha[i] = summary(lm_delta_alpha)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_beta to fractionation factor (ff_beta)
  sim2_e2_rep$ff_beta[i] = 1 + lm_delta_beta$coefficients[2]/1000
  sim2_e2_rep$se_ff_beta[i] = summary(lm_delta_beta)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_p to KIE (KIE_p)
  sim2_e2_rep$KIE_p[i] = 1000/
    (as.numeric(coef(lm_delta_p)[2]) +1000)
  sim2_e2_rep$se_KIE_p[i] = abs(
      -1/(as.numeric(coef(lm_delta_p)[2])/1000 + 1)^2*
        summary(lm_delta_p)$coefficients[2,2]/1000) #abs(-1/(ff_p)^2*se_ff_p)
   
   #Convert standard Rayleigh epsilon_alpha to KIE (KIE_alpha)
   sim2_e2_rep$KIE_alpha[i] = 1000/
    (as.numeric(coef(lm_delta_alpha)[2]) +1000)
   sim2_e2_rep$se_KIE_alpha[i] = abs(
      -1/(as.numeric(coef(lm_delta_alpha)[2])/1000 + 1)^2*
        summary(lm_delta_alpha)$coefficients[2,2]/1000)
   
   #Convert standard Rayleigh epsilon_beta to KIE (KIE_beta)
   sim2_e2_rep$KIE_beta[i] = 1000/
    (as.numeric(coef(lm_delta_beta)[2]) +1000)
   sim2_e2_rep$se_KIE_beta[i] = abs(
      -1/(as.numeric(coef(lm_delta_beta)[2])/1000 + 1)^2*
        summary(lm_delta_beta)$coefficients[2,2]/1000)
   
  #Calculate est_diff for epsilon values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e2_rep$diff_epsilon_p[i] =
    abs((sim2_e2_rep$epsilon_p[i] - sim2_tb2$epsilon_bulk[1])/
          sim2_tb2$epsilon_bulk[1])
  
  sim2_e2_rep$diff_epsilon_alpha[i] =
    abs((sim2_e2_rep$epsilon_alpha[i] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e2_rep$diff_epsilon_beta[i] =
    abs((sim2_e2_rep$epsilon_beta[i] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e2_rep$diff_ff_p[i] =
    abs((sim2_e2_rep$ff_p[i] - sim2_tb2$ff_p[1])/
          sim2_tb2$ff_p[1])
  
  sim2_e2_rep$diff_ff_alpha[i] =
    abs((sim2_e2_rep$ff_alpha[i] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e2_rep$diff_ff_beta[i] =
    abs((sim2_e2_rep$ff_beta[i] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (standard Rayleigh equation)
  #absolute relative difference = |(est-true)/true|
  sim2_e2_rep$diff_KIE_p[i] =
    abs((sim2_e2_rep$KIE_p[i] - sim2_tb2$KIE_p[1])/
          sim2_tb2$KIE_p[1])
  
  sim2_e2_rep$diff_KIE_alpha[i] =
    abs((sim2_e2_rep$KIE_alpha[i] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e2_rep$diff_KIE_beta[i] =
    abs((sim2_e2_rep$KIE_beta[i] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #add p-value for epsilon_p from standard Rayleigh equation (slope of linear model, y = delta_p)
  sim2_e2_rep$pval[i] = summary(lm_delta_p)$coefficients[2, 4]
  
  #Add p-value for slope of linear Rayleigh where y = delta_alpha or delta_beta
  sim2_e2_rep$pval_slope_delta_alpha[i] = summary(lm_delta_alpha)$coefficients[2, 4]
  sim2_e2_rep$pval_slope_delta_beta[i] = summary(lm_delta_beta)$coefficients[2, 4]  
   
#Apply nonlinear model 1.2 (sim_formula_nls1.2) (defined above)
  nls1.2 <- nls(sim_formula_nls1.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e2_rep$RMSE_delta_p[(n + i)] = rmse(nls1.2, data = data)

  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls1.2_delta_p_res <- nlsResiduals(nls1.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls1.2_delta_p_residuals = nls1.2_delta_p_res$resi1[ ,2]
)

  nls1.2_delta_p_lev <- car::leveneTest(nls1.2_delta_p_residuals ~ replicate, data = data)
  sim2_e2_rep$levene_delta_p_res[(n + i)] = nls1.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls1.2_delta_p_JB <- jarque.test(data$nls1.2_delta_p_residuals)
  sim2_e2_rep$JB_delta_p_res[(n + i)] = nls1.2_delta_p_JB$p.value
  
  #Skewness and kurtosis for nls1.2
  sim2_e2_rep$skew[(n + i)] = skewness(data$nls1.2_delta_p_residuals)
  
  if(sim2_e2_rep$skew[(n + i)] < -0.5) {
    sim2_e2_rep$skew_factor[(n + i)] = 2 #left-skew = 2
  } else if(sim2_e2_rep$skew[(n + i)] >= -0.5 & sim2_e2_rep$skew[(n + i)] <= 0.5) {
    sim2_e2_rep$skew_factor[(n + i)] = 1 #no skew = 1
  } else if (sim2_e2_rep$skew[(n + i)] > 0.5) {
    sim2_e2_rep$skew_factor[(n + i)] = 3 #right-skew = 3
  }
  
  sim2_e2_rep$kurt[(n + i)] = kurtosis(data$nls1.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls1.2 rows for indexing (same for all models)
  sim2_e2_rep$lm_skew_factor[(n + i)] = sim2_e2_rep$skew_factor[i]  
  
  #Calculate rho and tau for nls1.2
  sim2_e2_rep$rho[(n + i)] = coef(nls1.2)
  sim2_e2_rep$se_rho[(n + i)] = summary(nls1.2)$coefficients[1,2]
  
  sim2_e2_rep$tau[(n + i)] = mean(data$tau)
  sim2_e2_rep$se_tau[(n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e2_rep$f_min[(n + i)] = min(data$f)
  sim2_e2_rep$f_max[(n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e2_rep$ff_alpha[(n + i)] = 
    (coef(nls1.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls1.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e2_rep$se_ff_alpha[(n+i)] = 
  sqrt((sim2_e2_rep$ff_p[i]/sim2_e2_rep$tau[(n + i)]*sim2_e2_rep$se_rho[(n + i)])^2 + (-coef(nls1.2)*sim2_e2_rep$ff_p[i]/sim2_e2_rep$tau[(n + i)]^2*sim2_e2_rep$se_tau[(n + i)])^2+ (coef(nls1.2)/sim2_e2_rep$tau[(n + i)]*sim2_e2_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_alpha and se_epsilon_alpha (nls1.2):
  sim2_e2_rep$epsilon_alpha[(n + i)] = 1000*(sim2_e2_rep$ff_alpha[(n + i)] - 1)
  
  sim2_e2_rep$se_epsilon_alpha[(n + i)] =
    1000*sim2_e2_rep$se_ff_alpha[(n + i)]
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e2_rep$ff_beta[(n + i)] = 
    (1-coef(nls1.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls1.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e2_rep$se_ff_beta[(n + i)] = sqrt((-sim2_e2_rep$ff_p[i]/(1-mean(data$tau))*sim2_e2_rep$se_rho[(n + i)])^2 + ((1-coef(nls1.2))*sim2_e2_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e2_rep$se_tau[(n + i)])^2 + ((1-coef(nls1.2))/(1-mean(data$tau))*sim2_e2_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_beta and se_epsilon_beta (nls1.2):
  sim2_e2_rep$epsilon_beta[(n + i)] = 
    1000*(sim2_e2_rep$ff_beta[(n + i)] -1)
  sim2_e2_rep$se_epsilon_beta[(n + i)] =
    1000*sim2_e2_rep$se_ff_beta[(n + i)]
  
  #Calculate KIE_alpha and KIE_beta (nls1.2):
  sim2_e2_rep$KIE_alpha[(n + i)] = 1000/(sim2_e2_rep$epsilon_alpha[(n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e2_rep$se_KIE_alpha[(n + i)] = abs((-1/sim2_e2_rep$ff_alpha[(n + i)]^2)*sim2_e2_rep$se_ff_alpha[(n+i)])
  
  sim2_e2_rep$KIE_beta[(n + i)] = 1000/(sim2_e2_rep$epsilon_beta[(n + i)] +1000)
  
  sim2_e2_rep$se_KIE_beta[(n + i)] = abs((-1/sim2_e2_rep$ff_beta[(n + i)]^2)*sim2_e2_rep$se_ff_beta[(n+i)])
  
  #Calculate est_diff for epsilon values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e2_rep$diff_epsilon_alpha[(n + i)] =
    abs((sim2_e2_rep$epsilon_alpha[(n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e2_rep$diff_epsilon_beta[(n + i)] =
    abs((sim2_e2_rep$epsilon_beta[(n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e2_rep$diff_ff_alpha[(n + i)] =
    abs((sim2_e2_rep$ff_alpha[(n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e2_rep$diff_ff_beta[(n + i)] =
    abs((sim2_e2_rep$ff_beta[(n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e2_rep$diff_KIE_alpha[(n + i)] =
    abs((sim2_e2_rep$KIE_alpha[(n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e2_rep$diff_KIE_beta[(n + i)] =
    abs((sim2_e2_rep$KIE_beta[(n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls1.2)
  sim2_e2_rep$diff_rho[(n + i)] = 
    abs((sim2_e2_rep$rho[(n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))
  
  #add p-value for rho (parameter estimated from nls1.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls1.2)$coefficients[1, 1] - 0.5)/
    summary(nls1.2)$coefficients[1, 2]
  sim2_e2_rep$pval[(n + i)] = 2*pt(q = t_test, df = df.residual(nls1.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e2_rep$pval_rho_0[(n + i)] = summary(nls1.2)$coefficients[1, 4] 
  
  
  #Apply nonlinear model 2.2 (sim_formula_nls2.2) (defined above)
  nls2.2 <- nls(sim_formula_nls2.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e2_rep$RMSE_delta_p[(2*n + i)] = rmse(nls2.2, data = data)
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls2.2_delta_p_res <- nlsResiduals(nls2.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls2.2_delta_p_residuals = nls2.2_delta_p_res$resi1[ ,2]
)

  nls2.2_delta_p_lev <- car::leveneTest(nls2.2_delta_p_residuals ~ replicate, data = data)
  sim2_e2_rep$levene_delta_p_res[(2*n + i)] = nls2.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls2.2_delta_p_JB <- jarque.test(data$nls2.2_delta_p_residuals)
  sim2_e2_rep$JB_delta_p_res[(2*n + i)] = nls2.2_delta_p_JB$p.value   
  
  #Skewness and kurtosis for nls2.2
  sim2_e2_rep$skew[(2*n + i)] = skewness(data$nls2.2_delta_p_residuals)
  
  if(sim2_e2_rep$skew[(2*n + i)] < -0.5) {
    sim2_e2_rep$skew_factor[(2*n + i)] = 2 #left-skew = 2
  } else if(sim2_e2_rep$skew[(2*n + i)] >= -0.5 & sim2_e2_rep$skew[(2*n + i)] <= 0.5) {
    sim2_e2_rep$skew_factor[(2*n + i)] = 1 #no skew = 1
  } else if (sim2_e2_rep$skew[(2*n + i)] > 0.5) {
    sim2_e2_rep$skew_factor[(2*n + i)] = 3 #right-skew = 3
  }
  
  sim2_e2_rep$kurt[(2*n + i)] = kurtosis(data$nls2.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls2.2 rows for indexing (same for all models)
  sim2_e2_rep$lm_skew_factor[(2*n + i)] = sim2_e2_rep$skew_factor[i]   
  
  #Calculate rho and tau for nls2.2
  sim2_e2_rep$rho[(2*n + i)] = coef(nls2.2)
  sim2_e2_rep$se_rho[(2*n + i)] = summary(nls2.2)$coefficients[1,2]
  
  sim2_e2_rep$tau[(2*n + i)] = mean(data$tau)
  sim2_e2_rep$se_tau[(2*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e2_rep$f_min[(2*n + i)] = min(data$f)
  sim2_e2_rep$f_max[(2*n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e2_rep$ff_alpha[(2*n + i)] = 
    (coef(nls2.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls2.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e2_rep$se_ff_alpha[(2*n + i)] = 
  sqrt((sim2_e2_rep$ff_p[i]/sim2_e2_rep$tau[(2*n + i)]*sim2_e2_rep$se_rho[(2*n + i)])^2 + (-coef(nls2.2)*sim2_e2_rep$ff_p[i]/sim2_e2_rep$tau[(2*n + i)]^2*sim2_e2_rep$se_tau[(2*n + i)])^2+ (coef(nls2.2)/sim2_e2_rep$tau[(2*n + i)]*sim2_e2_rep$se_ff_p[i])^2)
    
  #Calculate epsilon_alpha and se_epsilon_alpha (nls2.2):
  sim2_e2_rep$epsilon_alpha[(2*n + i)] = 1000*(sim2_e2_rep$ff_alpha[(2*n + i)] - 1)
  
  sim2_e2_rep$se_epsilon_alpha[(2*n + i)] =
    1000*sim2_e2_rep$se_ff_alpha[(2*n + i)]  
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e2_rep$ff_beta[(2*n + i)] = 
    (1-coef(nls2.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)  
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls2.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e2_rep$se_ff_beta[(2*n + i)] = sqrt((-sim2_e2_rep$ff_p[i]/(1-mean(data$tau))*sim2_e2_rep$se_rho[(2*n + i)])^2 + ((1-coef(nls2.2))*sim2_e2_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e2_rep$se_tau[(2*n + i)])^2 + ((1-coef(nls2.2))/(1-mean(data$tau))*sim2_e2_rep$se_ff_p[i])^2) 
  
  #Calculate epsilon_beta and se_epsilon_beta (nls2.2):
  sim2_e2_rep$epsilon_beta[(2*n + i)] = 
    1000*(sim2_e2_rep$ff_beta[(2*n + i)] -1)
  sim2_e2_rep$se_epsilon_beta[(2*n + i)] =
    1000*sim2_e2_rep$se_ff_beta[(2*n + i)]  
  
  #Calculate KIE_alpha and KIE_beta (nls2.2):
  sim2_e2_rep$KIE_alpha[(2*n + i)] = 1000/(sim2_e2_rep$epsilon_alpha[(2*n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e2_rep$se_KIE_alpha[(2*n + i)] = abs((-1/sim2_e2_rep$ff_alpha[(2*n + i)]^2)*sim2_e2_rep$se_ff_alpha[(2*n + i)])
  
  sim2_e2_rep$KIE_beta[(2*n + i)] = 1000/(sim2_e2_rep$epsilon_beta[(2*n + i)] +1000)
  
  sim2_e2_rep$se_KIE_beta[(2*n + i)] = abs((-1/sim2_e2_rep$ff_beta[(2*n + i)]^2)*sim2_e2_rep$se_ff_beta[(2*n + i)])
  
  #Calculate est_diff for epsilon values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e2_rep$diff_epsilon_alpha[(2*n + i)] =
    abs((sim2_e2_rep$epsilon_alpha[(2*n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e2_rep$diff_epsilon_beta[(2*n + i)] =
    abs((sim2_e2_rep$epsilon_beta[(2*n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])  
  
  #Calculate est_diff for ff values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e2_rep$diff_ff_alpha[(2*n + i)] =
    abs((sim2_e2_rep$ff_alpha[(2*n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e2_rep$diff_ff_beta[(2*n + i)] =
    abs((sim2_e2_rep$ff_beta[(2*n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e2_rep$diff_KIE_alpha[(2*n + i)] =
    abs((sim2_e2_rep$KIE_alpha[(2*n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e2_rep$diff_KIE_beta[(2*n + i)] =
    abs((sim2_e2_rep$KIE_beta[(2*n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls2.2)
  sim2_e2_rep$diff_rho[(2*n + i)] = 
    abs((sim2_e2_rep$rho[(2*n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))  
  
  #add p-value for rho (parameter estimated from nls2.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls2.2)$coefficients[1, 1] - 0.5)/
    summary(nls2.2)$coefficients[1, 2]
  sim2_e2_rep$pval[(2*n + i)] = 2*pt(q = t_test, df = df.residual(nls2.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e2_rep$pval_rho_0[(2*n + i)] = summary(nls2.2)$coefficients[1, 4] 
  
#average tau "model"
  #Calculate tau (same for all three models)
  sim2_e2_rep$tau[(3*n + i)] = mean(data$tau)
  sim2_e2_rep$se_tau[(3*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e2_rep$f_min[(3*n + i)] = min(data$f)
  sim2_e2_rep$f_max[(3*n + i)] = max(data$f)  
  
  sim2_e2_rep$skew[(3*n + i)] = skewness(data$tau)
  
  if(sim2_e2_rep$skew[(3*n + i)] < -0.5) {
    sim2_e2_rep$skew_factor[(3*n + i)] = 2 #left-skew = 2
  } else if(sim2_e2_rep$skew[(3*n + i)] >= -0.5 & sim2_e2_rep$skew[(3*n + i)] <= 0.5) {
    sim2_e2_rep$skew_factor[(3*n + i)] = 1 #no skew = 1
  } else if (sim2_e2_rep$skew[(3*n + i)] > 0.5) {
    sim2_e2_rep$skew_factor[(3*n + i)] = 3 #right-skew = 3
  }  
  
  sim2_e2_rep$kurt[(3*n + i)] = kurtosis(data$tau)
  
  #Add lm_skew_factor to average tau rows for indexing (same for all models)
  sim2_e2_rep$lm_skew_factor[(3*n + i)] = sim2_e2_rep$skew_factor[i] 
  
  #Calculate est_diff for tau value (same for linear and nonlinear models)
  sim2_e2_rep$diff_tau[(3*n + i)] = 
    abs((sim2_e2_rep$tau[(3*n + i)] - mean(sim2_tb2$tau, na.rm = TRUE))/
          mean(sim2_tb2$tau, na.rm = TRUE))   
  
  #Calculate p-value for average tau. Null hypothesis: tau = 0.5
  sim2_e2_rep$pval[(3*n + i)] = t.test(data$tau, mu = 0.5)$p.value
  
  #Calculate pval_tau_mean. Null hypothesis: tau = mean tau value from sim2 (no error dataset)
  sim2_e2_rep$pval_tau_mean[(3*n + i)] = t.test(data$tau, mu = mean(sim2_tb2$tau, na.rm = TRUE))$p.value
}


#Filter by skewness in linear model
sim2_e2_lm_left_skew <- filter(sim2_e2_rep[1:n, ], skew < -0.5)

sim2_e2_lm_no_skew <- filter(sim2_e2_rep[1:n, ], skew >= -0.5 & skew <= 0.5)

sim2_e2_lm_right_skew <- filter(sim2_e2_rep[1:n, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e2_nls1_left_skew <- filter(sim2_e2_rep[(n + 1):(n + n), ], skew < -0.5)

sim2_e2_nls1_no_skew <- filter(sim2_e2_rep[(n + 1):(n + n), ], skew >= -0.5 & skew <= 0.5)

sim2_e2_nls1_right_skew <- filter(sim2_e2_rep[(n + 1):(n + n), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e2_nls2_left_skew <- filter(sim2_e2_rep[(2*n + 1):(2*n + n), ], skew < -0.5)

sim2_e2_nls2_no_skew <- filter(sim2_e2_rep[(2*n + 1):(2*n + n), ], skew >= -0.5 & skew <= 0.5)

sim2_e2_nls2_right_skew <- filter(sim2_e2_rep[(2*n + 1):(2*n + n), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e2_tau_left_skew <- filter(sim2_e2_rep[(3*n + 1):(3*n + n), ], skew < -0.5)

sim2_e2_tau_no_skew <- filter(sim2_e2_rep[(3*n + 1):(3*n + n), ], skew >= -0.5 & skew <= 0.5)

sim2_e2_tau_right_skew <- filter(sim2_e2_rep[(3*n + 1):(3*n + n), ], skew > 0.5)

#Filter by lm_skew_factor to select the rows for all four models (linear, nls1, nls2, and average tau) that correspond to datasets with no skew in the linear model.

#For datasets where the lm residuals are skewed, lm_skew_factor == 0 because that iteration was cut short ("next" function) before any non-zero values were stored in the table.

sim2_e2_rep2 <- filter(sim2_e2_rep, lm_skew_factor == 1)
nrep = nrow(sim2_e2_rep2)/m

#Filter by skewness in linear model
sim2_e2_lm_left_skew2 <- filter(sim2_e2_rep2[1:nrep, ], skew < -0.5)

sim2_e2_lm_no_skew2 <- filter(sim2_e2_rep2[1:nrep, ], skew >= -0.5 & skew <= 0.5)

sim2_e2_lm_right_skew2 <- filter(sim2_e2_rep2[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e2_nls1_left_skew2 <- filter(sim2_e2_rep2[(nrep + 1):(nrep + nrep), ], skew < -0.5)

sim2_e2_nls1_no_skew2 <- filter(sim2_e2_rep2[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e2_nls1_right_skew2 <- filter(sim2_e2_rep2[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e2_nls2_left_skew2 <- filter(sim2_e2_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)

sim2_e2_nls2_no_skew2 <- filter(sim2_e2_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e2_nls2_right_skew2 <- filter(sim2_e2_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e2_tau_left_skew2 <- filter(sim2_e2_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)

sim2_e2_tau_no_skew2 <- filter(sim2_e2_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e2_tau_right_skew2 <- filter(sim2_e2_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

#Randomly remove extra rows from sim2_e2_rep2 so that there are 1000 replicates.
nremove <- nrow(sim2_e2_lm_no_skew2) - 1000

#Make indexing vectors to remove the same datasets for each model
v1 <- sample(1:nrow(sim2_e2_lm_no_skew2), size = nremove)
v2 <- c(v1, (v1 + nrep), (v1 + 2*nrep), (v1 + 3*nrep))

sim2_e2_rep3 <- sim2_e2_rep2[-v2, ]


#Reset nrep
nrep = nrow(sim2_e2_rep3)/m

#Count the final number of no skew, left skew, and right-skew data in sim2_e2_rep3
#Filter by skewness in linear model
sim2_e2_lm_left_skew3 <- filter(sim2_e2_rep3[1:nrep, ], skew < -0.5)
sim2_e2_lm_no_skew3 <- filter(sim2_e2_rep3[1:nrep, ], skew >= -0.5 & skew <= 0.5)
sim2_e2_lm_right_skew3 <- filter(sim2_e2_rep3[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e2_nls1_left_skew3 <- filter(sim2_e2_rep3[(nrep + 1):(nrep + nrep), ], skew < -0.5)
sim2_e2_nls1_no_skew3 <- filter(sim2_e2_rep3[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e2_nls1_right_skew3 <- filter(sim2_e2_rep3[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e2_nls2_left_skew3 <- filter(sim2_e2_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)
sim2_e2_nls2_no_skew3 <- filter(sim2_e2_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e2_nls2_right_skew3 <- filter(sim2_e2_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in average tau
sim2_e2_tau_left_skew3 <- filter(sim2_e2_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)
sim2_e2_tau_no_skew3 <- filter(sim2_e2_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e2_tau_right_skew3 <- filter(sim2_e2_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

##Significant p-values for linear model slope
sim2_e2_lm_pval_sig = filter(sim2_e2_rep3[1:nrep, ], pval < 0.05)
sim2_e2_lm_delta_alpha_pval_sig <- filter(sim2_e2_rep3[1:nrep, ], 
                                         pval_slope_delta_alpha < 0.05)
sim2_e2_lm_delta_beta_pval_sig <- filter(sim2_e2_rep3[1:nrep, ], 
                                         pval_slope_delta_beta < 0.05)

##Significant p-values for nls1 rho (coefficient)
sim2_e2_nls1_pval_sig <- filter(sim2_e2_rep3[(nrep + 1):(nrep + nrep), ], pval < 0.05)

##Significant p-values for nls2 rho (coefficient)
sim2_e2_nls2_pval_sig <- filter(sim2_e2_rep3[(2*nrep + 1):(2*nrep + nrep), ], pval < 0.05)

##Significant p-values for tau average
sim2_e2_tau_pval_sig <- filter(sim2_e2_rep3[(3*nrep + 1):(3*nrep + nrep), ], pval < 0.05)

##Average results and calculate standard deviation for sim2_e2_rep3 (medium error, no skew) (This code needs to be in same block as the for loop so that n doesn't get reset.)

avg_sim2_e2_lm_no_skew <- tibble(
  mean_Ray = colMeans(sim2_e2_rep3[1:nrep, ]),
  mean_nls1 = colMeans(sim2_e2_rep3[(nrep + 1):(nrep + nrep), ]),
  mean_nls2 = colMeans(sim2_e2_rep3[(2*nrep + 1):(2*nrep + nrep), ]),
  mean_tau = colMeans(sim2_e2_rep3[(3*nrep + 1):(3*nrep + nrep), ]),  
  sd_Ray = sapply(sim2_e2_rep3[1:nrep, ], sd),
  sd_nls1 = sapply(sim2_e2_rep3[(nrep + 1):(nrep + nrep), ], sd),
  sd_nls2 = sapply(sim2_e2_rep3[(2*nrep + 1):(2*nrep + nrep), ], sd),
  sd_tau = sapply(sim2_e2_rep3[(3*nrep + 1):(3*nrep + nrep), ], sd)  
) %>% t()  #Flip (transpose) table

colnames(avg_sim2_e2_lm_no_skew) <- colnames(sim2_e2_lm_no_skew)

avg_sim2_e2_lm_no_skew <- as_tibble(avg_sim2_e2_lm_no_skew, rownames = NA)

```

#Do 1000 simulations w/ high error, no skew (sim2_e3) and extract the results for the standard Rayleigh model (linear) and Expanded Rayleigh models 1 and 2 (nls1.2 and nls2.2).

High error added to N_s, delta_p, and delta_alpha.

Skewness: Aiming for skewness of residuals for linear model between -0.5 and 0.5

Set omega (skewness) to 0

If the skewness of the residuals for the standard (linear) Rayleigh model where y = delta_p is < -0.5 or greater than > 0.5, skip to the next loop.

See notes on sim_loop_e1 for more details.
```{r sim_loop_e3}
#Nonlinear model 1.2 (sim_formula_nls1.2)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#Nonlinear model 2.2 (sim_formula_nls2.2)
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#R_std for atmospheric N2 = 0.0036765
R_std = 0.0036765

# n = number of times simulation is repeated (loops)
n = 1415

# m = number of models
m = 4

#Make an empty tibble to store the results for each simulation tested on each model.
#Ray = standard Rayleigh model

sim2_e3_rep <- blank_sim_rep(n = n, m = m)

#for loop to generate multiple simulated datasets
set.seed(313)

for (i in 1:n) {
  #Make table with randomly generated, normally distributed error (high error, sim2_e3).
  
data <- sim2 %>%
  #Subset data
  filter(f <= 0.75, f >= 0.25) %>%
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)

#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 3*0.015*sim2_tb2$N_s0[1], 0), "SN")  
error_1 <- rsn(n = length(data$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 5*0.5, 0), "SN")  
error_2 <- rsn(n = length(data$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 5*0.7, 0), "SN")  
error_3 <- rsn(n = length(data$N_s), dp = params_3)
  
  #add normally distributed high error to N_s, delta_p, and delta_alpha
data <- data %>%    
mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        SP = delta_alpha - delta_beta,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        R_std = 0.0036765,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`
         )
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_p
  lm_delta_p <- lm(delta_p ~ `-flnf/(1-f)`, data = data)
  
  #Treat replicate as factor, add lm residuals to data table.
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  lm_delta_p_residuals = lm_delta_p$residuals
)
 
#Test skewness of residuals for linear model
  if(skewness(data$lm_delta_p_residuals) < -0.5|
     skewness(data$lm_delta_p_residuals) > 0.5) {
   next
  }  
  
  sim2_e3_rep$Multiple_R_squared[i] = summary(lm_delta_p)$r.squared
  sim2_e3_rep$RMSE_delta_p[i] = rmse(model = lm_delta_p, 
                                     data = data)
  
  #Test for non-constant error variance (store p-value)
  lm_delta_p_ncv <- car::ncvTest(lm_delta_p)
  sim2_e3_rep$lm_delta_p_ncv[i] = lm_delta_p_ncv$p
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  lm_delta_p_lev <- car::leveneTest(lm_delta_p_residuals ~ replicate, data = data)
  sim2_e3_rep$levene_delta_p_res[i] = lm_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  lm_delta_p_JB <- jarque.test(as.vector(data$lm_delta_p_residuals))
  sim2_e3_rep$JB_delta_p_res[i] = lm_delta_p_JB$p.value
  
  #skewness and kurtosis for linear standard Rayleigh model
  sim2_e3_rep$skew[i] = skewness(lm_delta_p$residuals)
  
  if(sim2_e3_rep$skew[i] < -0.5) {
    sim2_e3_rep$skew_factor[i] = 2 #left-skew = 2
  } else if(sim2_e3_rep$skew[i] >= -0.5 & sim2_e3_rep$skew[i] <= 0.5) {
    sim2_e3_rep$skew_factor[i] = 1 #no skew = 1
  } else if (sim2_e3_rep$skew[i] > 0.5) {
    sim2_e3_rep$skew_factor[i] = 3 #right-skew = 3
  }

  sim2_e3_rep$lm_skew_factor[i] = sim2_e3_rep$skew_factor[i]      
  
  sim2_e3_rep$kurt[i] = kurtosis(lm_delta_p$residuals)
  
  sim2_e3_rep$f_min[i] = min(data$f)
  sim2_e3_rep$f_max[i] = max(data$f)
  
  sim2_e3_rep$delta_s0[i] = summary(lm_delta_p)$coefficients[1,1]
  sim2_e3_rep$se_delta_s0[i] = summary(lm_delta_p)$coefficients[1,2]
  sim2_e3_rep$epsilon_p[i] = summary(lm_delta_p)$coefficients[2,1]
  sim2_e3_rep$se_epsilon_p[i] = summary(lm_delta_p)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_alpha
  lm_delta_alpha <- lm(delta_alpha ~ `-flnf/(1-f)`, data = data)
  
  sim2_e3_rep$RMSE_delta_alpha[i] = rmse(model = lm_delta_alpha, 
                                               data = data)
  sim2_e3_rep$R_squared_delta_alpha[i] = summary(lm_delta_alpha)$r.squared
  sim2_e3_rep$epsilon_alpha[i] =summary(lm_delta_alpha)$coefficients[2,1]
  sim2_e3_rep$se_epsilon_alpha[i] =
    summary(lm_delta_alpha)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_beta  
  lm_delta_beta <- lm(delta_beta ~ `-flnf/(1-f)`, data = data)
  
  sim2_e3_rep$RMSE_delta_beta[i] = rmse(model = lm_delta_beta, 
                                        data = data)
  sim2_e3_rep$R_squared_delta_beta[i] = summary(lm_delta_beta)$r.squared  
  sim2_e3_rep$epsilon_beta[i] = summary(lm_delta_beta)$coefficients[2,1]
  sim2_e3_rep$se_epsilon_beta[i]=summary(lm_delta_beta)$coefficients[2,2]
  
  #Convert standard Rayleigh epsilon_p to fractionation factor (ff_p)
  sim2_e3_rep$ff_p[i] = 1 + lm_delta_p$coefficients[2]/1000
  sim2_e3_rep$se_ff_p[i] = summary(lm_delta_p)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_alpha to fractionation factor (ff_alpha)
  sim2_e3_rep$ff_alpha[i] = 1 + lm_delta_alpha$coefficients[2]/1000
  sim2_e3_rep$se_ff_alpha[i] = summary(lm_delta_alpha)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_beta to fractionation factor (ff_beta)
  sim2_e3_rep$ff_beta[i] = 1 + lm_delta_beta$coefficients[2]/1000
  sim2_e3_rep$se_ff_beta[i] = summary(lm_delta_beta)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_p to KIE (KIE_p)
  sim2_e3_rep$KIE_p[i] = 1000/
    (as.numeric(coef(lm_delta_p)[2]) +1000)
  sim2_e3_rep$se_KIE_p[i] = abs(
      -1/(as.numeric(coef(lm_delta_p)[2])/1000 + 1)^2*
        summary(lm_delta_p)$coefficients[2,2]/1000) #abs(-1/(ff_p)^2*se_ff_p)
   
   #Convert standard Rayleigh epsilon_alpha to KIE (KIE_alpha)
   sim2_e3_rep$KIE_alpha[i] = 1000/
    (as.numeric(coef(lm_delta_alpha)[2]) +1000)
   sim2_e3_rep$se_KIE_alpha[i] = abs(
      -1/(as.numeric(coef(lm_delta_alpha)[2])/1000 + 1)^2*
        summary(lm_delta_alpha)$coefficients[2,2]/1000)
   
   #Convert standard Rayleigh epsilon_beta to KIE (KIE_beta)
   sim2_e3_rep$KIE_beta[i] = 1000/
    (as.numeric(coef(lm_delta_beta)[2]) +1000)
   sim2_e3_rep$se_KIE_beta[i] = abs(
      -1/(as.numeric(coef(lm_delta_beta)[2])/1000 + 1)^2*
        summary(lm_delta_beta)$coefficients[2,2]/1000)
   
  #Calculate est_diff for epsilon values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e3_rep$diff_epsilon_p[i] =
    abs((sim2_e3_rep$epsilon_p[i] - sim2_tb2$epsilon_bulk[1])/
          sim2_tb2$epsilon_bulk[1])
  
  sim2_e3_rep$diff_epsilon_alpha[i] =
    abs((sim2_e3_rep$epsilon_alpha[i] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e3_rep$diff_epsilon_beta[i] =
    abs((sim2_e3_rep$epsilon_beta[i] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e3_rep$diff_ff_p[i] =
    abs((sim2_e3_rep$ff_p[i] - sim2_tb2$ff_p[1])/
          sim2_tb2$ff_p[1])
  
  sim2_e3_rep$diff_ff_alpha[i] =
    abs((sim2_e3_rep$ff_alpha[i] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e3_rep$diff_ff_beta[i] =
    abs((sim2_e3_rep$ff_beta[i] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (standard Rayleigh equation)
  #absolute relative difference = |(est-true)/true|
  sim2_e3_rep$diff_KIE_p[i] =
    abs((sim2_e3_rep$KIE_p[i] - sim2_tb2$KIE_p[1])/
          sim2_tb2$KIE_p[1])
  
  sim2_e3_rep$diff_KIE_alpha[i] =
    abs((sim2_e3_rep$KIE_alpha[i] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e3_rep$diff_KIE_beta[i] =
    abs((sim2_e3_rep$KIE_beta[i] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #add p-value for epsilon_p from standard Rayleigh equation (slope of linear model)
  sim2_e3_rep$pval[i] = summary(lm_delta_p)$coefficients[2, 4]
  
  #Add p-value for slope of linear Rayleigh where y = delta_alpha or delta_beta
  sim2_e3_rep$pval_slope_delta_alpha[i] = summary(lm_delta_alpha)$coefficients[2, 4]
  sim2_e3_rep$pval_slope_delta_beta[i] = summary(lm_delta_beta)$coefficients[2, 4]  
   
#Apply nonlinear model 1.2 (sim_formula_nls1.2) (defined above)
  nls1.2 <- nls(sim_formula_nls1.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e3_rep$RMSE_delta_p[(n + i)] = rmse(nls1.2, data = data)

  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls1.2_delta_p_res <- nlsResiduals(nls1.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls1.2_delta_p_residuals = nls1.2_delta_p_res$resi1[ ,2]
)

  nls1.2_delta_p_lev <- car::leveneTest(nls1.2_delta_p_residuals ~ replicate, data = data)
  sim2_e3_rep$levene_delta_p_res[(n + i)] = nls1.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls1.2_delta_p_JB <- jarque.test(data$nls1.2_delta_p_residuals)
  sim2_e3_rep$JB_delta_p_res[(n + i)] = nls1.2_delta_p_JB$p.value
  
  #Skewness and kurtosis for nls1.2
  sim2_e3_rep$skew[(n + i)] = skewness(data$nls1.2_delta_p_residuals)
  
  if(sim2_e3_rep$skew[(n + i)] < -0.5) {
    sim2_e3_rep$skew_factor[(n + i)] = 2 #left-skew = 2
  } else if(sim2_e3_rep$skew[(n + i)] >= -0.5 & sim2_e3_rep$skew[(n + i)] <= 0.5) {
    sim2_e3_rep$skew_factor[(n + i)] = 1 #no skew = 1
  } else if (sim2_e3_rep$skew[(n + i)] > 0.5) {
    sim2_e3_rep$skew_factor[(n + i)] = 3 #right-skew = 3
  }
  
  sim2_e3_rep$kurt[(n + i)] = kurtosis(data$nls1.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls1.2 rows for indexing (same for all models)
  sim2_e3_rep$lm_skew_factor[(n + i)] = sim2_e3_rep$skew_factor[i]  
  
  #Calculate rho and tau for nls1.2
  sim2_e3_rep$rho[(n + i)] = coef(nls1.2)
  sim2_e3_rep$se_rho[(n + i)] = summary(nls1.2)$coefficients[1,2]
  
  sim2_e3_rep$tau[(n + i)] = mean(data$tau)
  sim2_e3_rep$se_tau[(n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e3_rep$f_min[(n + i)] = min(data$f)
  sim2_e3_rep$f_max[(n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e3_rep$ff_alpha[(n + i)] = 
    (coef(nls1.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls1.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e3_rep$se_ff_alpha[(n+i)] = 
  sqrt((sim2_e3_rep$ff_p[i]/sim2_e3_rep$tau[(n + i)]*sim2_e3_rep$se_rho[(n + i)])^2 + (-coef(nls1.2)*sim2_e3_rep$ff_p[i]/sim2_e3_rep$tau[(n + i)]^2*sim2_e3_rep$se_tau[(n + i)])^2+ (coef(nls1.2)/sim2_e3_rep$tau[(n + i)]*sim2_e3_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_alpha and se_epsilon_alpha (nls1.2):
  sim2_e3_rep$epsilon_alpha[(n + i)] = 1000*(sim2_e3_rep$ff_alpha[(n + i)] - 1)
  
  sim2_e3_rep$se_epsilon_alpha[(n + i)] =
    1000*sim2_e3_rep$se_ff_alpha[(n + i)]
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e3_rep$ff_beta[(n + i)] = 
    (1-coef(nls1.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls1.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e3_rep$se_ff_beta[(n + i)] = sqrt((-sim2_e3_rep$ff_p[i]/(1-mean(data$tau))*sim2_e3_rep$se_rho[(n + i)])^2 + ((1-coef(nls1.2))*sim2_e3_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e3_rep$se_tau[(n + i)])^2 + ((1-coef(nls1.2))/(1-mean(data$tau))*sim2_e3_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_beta and se_epsilon_beta (nls1.2):
  sim2_e3_rep$epsilon_beta[(n + i)] = 
    1000*(sim2_e3_rep$ff_beta[(n + i)] -1)
  sim2_e3_rep$se_epsilon_beta[(n + i)] =
    1000*sim2_e3_rep$se_ff_beta[(n + i)]
  
  #Calculate KIE_alpha and KIE_beta (nls1.2):
  sim2_e3_rep$KIE_alpha[(n + i)] = 1000/(sim2_e3_rep$epsilon_alpha[(n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e3_rep$se_KIE_alpha[(n + i)] = abs((-1/sim2_e3_rep$ff_alpha[(n + i)]^2)*sim2_e3_rep$se_ff_alpha[(n+i)])
  
  sim2_e3_rep$KIE_beta[(n + i)] = 1000/(sim2_e3_rep$epsilon_beta[(n + i)] +1000)
  
  sim2_e3_rep$se_KIE_beta[(n + i)] = abs((-1/sim2_e3_rep$ff_beta[(n + i)]^2)*sim2_e3_rep$se_ff_beta[(n+i)])
  
  #Calculate est_diff for epsilon values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e3_rep$diff_epsilon_alpha[(n + i)] =
    abs((sim2_e3_rep$epsilon_alpha[(n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e3_rep$diff_epsilon_beta[(n + i)] =
    abs((sim2_e3_rep$epsilon_beta[(n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e3_rep$diff_ff_alpha[(n + i)] =
    abs((sim2_e3_rep$ff_alpha[(n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e3_rep$diff_ff_beta[(n + i)] =
    abs((sim2_e3_rep$ff_beta[(n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e3_rep$diff_KIE_alpha[(n + i)] =
    abs((sim2_e3_rep$KIE_alpha[(n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e3_rep$diff_KIE_beta[(n + i)] =
    abs((sim2_e3_rep$KIE_beta[(n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls1.2)
  sim2_e3_rep$diff_rho[(n + i)] = 
    abs((sim2_e3_rep$rho[(n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))
  
  #add p-value for rho (parameter estimated from nls1.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls1.2)$coefficients[1, 1] - 0.5)/
    summary(nls1.2)$coefficients[1, 2]
  sim2_e3_rep$pval[(n + i)] = 2*pt(q = t_test, df = df.residual(nls1.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e3_rep$pval_rho_0[(n + i)] = summary(nls1.2)$coefficients[1, 4]
  
  #Apply nonlinear model 2.2 (sim_formula_nls2.2) (defined above)
  nls2.2 <- nls(sim_formula_nls2.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e3_rep$RMSE_delta_p[(2*n + i)] = rmse(nls2.2, data = data)
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls2.2_delta_p_res <- nlsResiduals(nls2.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls2.2_delta_p_residuals = nls2.2_delta_p_res$resi1[ ,2]
)

  nls2.2_delta_p_lev <- car::leveneTest(nls2.2_delta_p_residuals ~ replicate, data = data)
  sim2_e3_rep$levene_delta_p_res[(2*n + i)] = nls2.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls2.2_delta_p_JB <- jarque.test(data$nls2.2_delta_p_residuals)
  sim2_e3_rep$JB_delta_p_res[(2*n + i)] = nls2.2_delta_p_JB$p.value   
  
  #Skewness and kurtosis for nls2.2
  sim2_e3_rep$skew[(2*n + i)] = skewness(data$nls2.2_delta_p_residuals)
  
  if(sim2_e3_rep$skew[(2*n + i)] < -0.5) {
    sim2_e3_rep$skew_factor[(2*n + i)] = 2 #left-skew = 2
  } else if(sim2_e3_rep$skew[(2*n + i)] >= -0.5 & sim2_e3_rep$skew[(2*n + i)] <= 0.5) {
    sim2_e3_rep$skew_factor[(2*n + i)] = 1 #no skew = 1
  } else if (sim2_e3_rep$skew[(2*n + i)] > 0.5) {
    sim2_e3_rep$skew_factor[(2*n + i)] = 3 #right-skew = 3
  }
  
  sim2_e3_rep$kurt[(2*n + i)] = kurtosis(data$nls2.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls2.2 rows for indexing (same for all models)
  sim2_e3_rep$lm_skew_factor[(2*n + i)] = sim2_e3_rep$skew_factor[i]   
  
  #Calculate rho and tau for nls2.2
  sim2_e3_rep$rho[(2*n + i)] = coef(nls2.2)
  sim2_e3_rep$se_rho[(2*n + i)] = summary(nls2.2)$coefficients[1,2]
  
  sim2_e3_rep$tau[(2*n + i)] = mean(data$tau)
  sim2_e3_rep$se_tau[(2*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e3_rep$f_min[(2*n + i)] = min(data$f)
  sim2_e3_rep$f_max[(2*n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e3_rep$ff_alpha[(2*n + i)] = 
    (coef(nls2.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls2.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e3_rep$se_ff_alpha[(2*n + i)] = 
  sqrt((sim2_e3_rep$ff_p[i]/sim2_e3_rep$tau[(2*n + i)]*sim2_e3_rep$se_rho[(2*n + i)])^2 + (-coef(nls2.2)*sim2_e3_rep$ff_p[i]/sim2_e3_rep$tau[(2*n + i)]^2*sim2_e3_rep$se_tau[(2*n + i)])^2+ (coef(nls2.2)/sim2_e3_rep$tau[(2*n + i)]*sim2_e3_rep$se_ff_p[i])^2)
    
  #Calculate epsilon_alpha and se_epsilon_alpha (nls2.2):
  sim2_e3_rep$epsilon_alpha[(2*n + i)] = 1000*(sim2_e3_rep$ff_alpha[(2*n + i)] - 1)
  
  sim2_e3_rep$se_epsilon_alpha[(2*n + i)] =
    1000*sim2_e3_rep$se_ff_alpha[(2*n + i)]  
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e3_rep$ff_beta[(2*n + i)] = 
    (1-coef(nls2.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)  
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls2.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e3_rep$se_ff_beta[(2*n + i)] = sqrt((-sim2_e3_rep$ff_p[i]/(1-mean(data$tau))*sim2_e3_rep$se_rho[(2*n + i)])^2 + ((1-coef(nls2.2))*sim2_e3_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e3_rep$se_tau[(2*n + i)])^2 + ((1-coef(nls2.2))/(1-mean(data$tau))*sim2_e3_rep$se_ff_p[i])^2) 
  
  #Calculate epsilon_beta and se_epsilon_beta (nls2.2):
  sim2_e3_rep$epsilon_beta[(2*n + i)] = 
    1000*(sim2_e3_rep$ff_beta[(2*n + i)] -1)
  sim2_e3_rep$se_epsilon_beta[(2*n + i)] =
    1000*sim2_e3_rep$se_ff_beta[(2*n + i)]  
  
  #Calculate KIE_alpha and KIE_beta (nls2.2):
  sim2_e3_rep$KIE_alpha[(2*n + i)] = 1000/(sim2_e3_rep$epsilon_alpha[(2*n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e3_rep$se_KIE_alpha[(2*n + i)] = abs((-1/sim2_e3_rep$ff_alpha[(2*n + i)]^2)*sim2_e3_rep$se_ff_alpha[(2*n + i)])
  
  sim2_e3_rep$KIE_beta[(2*n + i)] = 1000/(sim2_e3_rep$epsilon_beta[(2*n + i)] +1000)
  
  sim2_e3_rep$se_KIE_beta[(2*n + i)] = abs((-1/sim2_e3_rep$ff_beta[(2*n + i)]^2)*sim2_e3_rep$se_ff_beta[(2*n + i)])
  
  #Calculate est_diff for epsilon values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e3_rep$diff_epsilon_alpha[(2*n + i)] =
    abs((sim2_e3_rep$epsilon_alpha[(2*n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e3_rep$diff_epsilon_beta[(2*n + i)] =
    abs((sim2_e3_rep$epsilon_beta[(2*n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])  
  
  #Calculate est_diff for ff values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e3_rep$diff_ff_alpha[(2*n + i)] =
    abs((sim2_e3_rep$ff_alpha[(2*n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e3_rep$diff_ff_beta[(2*n + i)] =
    abs((sim2_e3_rep$ff_beta[(2*n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e3_rep$diff_KIE_alpha[(2*n + i)] =
    abs((sim2_e3_rep$KIE_alpha[(2*n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e3_rep$diff_KIE_beta[(2*n + i)] =
    abs((sim2_e3_rep$KIE_beta[(2*n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls2.2)
  sim2_e3_rep$diff_rho[(2*n + i)] = 
    abs((sim2_e3_rep$rho[(2*n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))  
  
  #add p-value for rho (parameter estimated from nls2.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls2.2)$coefficients[1, 1] - 0.5)/
    summary(nls2.2)$coefficients[1, 2]
  sim2_e3_rep$pval[(2*n + i)] = 2*pt(q = t_test, df = df.residual(nls2.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e3_rep$pval_rho_0[(2*n + i)] = summary(nls2.2)$coefficients[1, 4] 
  
#average tau "model"
  #Calculate tau (same for all three models)
  sim2_e3_rep$tau[(3*n + i)] = mean(data$tau)
  sim2_e3_rep$se_tau[(3*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e3_rep$f_min[(3*n + i)] = min(data$f)
  sim2_e3_rep$f_max[(3*n + i)] = max(data$f)  
  
  sim2_e3_rep$skew[(3*n + i)] = skewness(data$tau)
  
  if(sim2_e3_rep$skew[(3*n + i)] < -0.5) {
    sim2_e3_rep$skew_factor[(3*n + i)] = 2 #left-skew = 2
  } else if(sim2_e3_rep$skew[(3*n + i)] >= -0.5 & sim2_e3_rep$skew[(3*n + i)] <= 0.5) {
    sim2_e3_rep$skew_factor[(3*n + i)] = 1 #no skew = 1
  } else if (sim2_e3_rep$skew[(3*n + i)] > 0.5) {
    sim2_e3_rep$skew_factor[(3*n + i)] = 3 #right-skew = 3
  }  
  
  sim2_e3_rep$kurt[(3*n + i)] = kurtosis(data$tau)
  
  #Add lm_skew_factor to average tau rows for indexing (same for all models)
  sim2_e3_rep$lm_skew_factor[(3*n + i)] = sim2_e3_rep$skew_factor[i] 
  
  #Calculate est_diff for tau value (same for linear and nonlinear models)
  sim2_e3_rep$diff_tau[(3*n + i)] = 
    abs((sim2_e3_rep$tau[(3*n + i)] - mean(sim2_tb2$tau, na.rm = TRUE))/
          mean(sim2_tb2$tau, na.rm = TRUE))   
  
  #Calculate p-value for average tau. Null hypothesis: tau = 0.5
  sim2_e3_rep$pval[(3*n + i)] = t.test(data$tau, mu = 0.5)$p.value
  
  #Calculate pval_tau_mean. Null hypothesis: tau = mean tau value from sim2 (no error dataset)
  sim2_e3_rep$pval_tau_mean[(3*n + i)] = t.test(data$tau, mu = mean(sim2_tb2$tau, na.rm = TRUE))$p.value
}


#Filter by skewness in linear model
sim2_e3_lm_left_skew <- filter(sim2_e3_rep[1:n, ], skew < -0.5)

sim2_e3_lm_no_skew <- filter(sim2_e3_rep[1:n, ], skew >= -0.5 & skew <= 0.5)

sim2_e3_lm_right_skew <- filter(sim2_e3_rep[1:n, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e3_nls1_left_skew <- filter(sim2_e3_rep[(n + 1):(n + n), ], skew < -0.5)

sim2_e3_nls1_no_skew <- filter(sim2_e3_rep[(n + 1):(n + n), ], skew >= -0.5 & skew <= 0.5)

sim2_e3_nls1_right_skew <- filter(sim2_e3_rep[(n + 1):(n + n), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e3_nls2_left_skew <- filter(sim2_e3_rep[(2*n + 1):(2*n + n), ], skew < -0.5)

sim2_e3_nls2_no_skew <- filter(sim2_e3_rep[(2*n + 1):(2*n + n), ], skew >= -0.5 & skew <= 0.5)

sim2_e3_nls2_right_skew <- filter(sim2_e3_rep[(2*n + 1):(2*n + n), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e3_tau_left_skew <- filter(sim2_e3_rep[(3*n + 1):(3*n + n), ], skew < -0.5)

sim2_e3_tau_no_skew <- filter(sim2_e3_rep[(3*n + 1):(3*n + n), ], skew >= -0.5 & skew <= 0.5)

sim2_e3_tau_right_skew <- filter(sim2_e3_rep[(3*n + 1):(3*n + n), ], skew > 0.5)

#Filter by lm_skew_factor to select the rows for all four models (linear, nls1, nls2, and average tau) that correspond to datasets with no skew in the linear model.

#For datasets where the lm residuals are skewed, lm_skew_factor == 0 because that iteration was cut short ("next" function) before any non-zero values were stored in the table.

sim2_e3_rep2 <- filter(sim2_e3_rep, lm_skew_factor == 1)
nrep = nrow(sim2_e3_rep2)/m

#Filter by skewness in linear model
sim2_e3_lm_left_skew2 <- filter(sim2_e3_rep2[1:nrep, ], skew < -0.5)

sim2_e3_lm_no_skew2 <- filter(sim2_e3_rep2[1:nrep, ], skew >= -0.5 & skew <= 0.5)

sim2_e3_lm_right_skew2 <- filter(sim2_e3_rep2[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e3_nls1_left_skew2 <- filter(sim2_e3_rep2[(nrep + 1):(nrep + nrep), ], skew < -0.5)

sim2_e3_nls1_no_skew2 <- filter(sim2_e3_rep2[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e3_nls1_right_skew2 <- filter(sim2_e3_rep2[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e3_nls2_left_skew2 <- filter(sim2_e3_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)

sim2_e3_nls2_no_skew2 <- filter(sim2_e3_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e3_nls2_right_skew2 <- filter(sim2_e3_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e3_tau_left_skew2 <- filter(sim2_e3_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)

sim2_e3_tau_no_skew2 <- filter(sim2_e3_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e3_tau_right_skew2 <- filter(sim2_e3_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

#Randomly remove extra rows from sim2_e3_rep2 so that there are 1000 replicates.
nremove <- nrow(sim2_e3_lm_no_skew2) - 1000

#Make indexing vectors to remove the same datasets for each model
v1 <- sample(1:nrow(sim2_e3_lm_no_skew2), size = nremove)
v2 <- c(v1, (v1 + nrep), (v1 + 2*nrep), (v1 + 3*nrep))

sim2_e3_rep3 <- sim2_e3_rep2[-v2, ]

#Reset nrep
nrep = nrow(sim2_e3_rep3)/m

#Count the final number of no skew, left skew, and right-skew data in sim2_e3_rep3
#Filter by skewness in linear model
sim2_e3_lm_left_skew3 <- filter(sim2_e3_rep3[1:nrep, ], skew < -0.5)
sim2_e3_lm_no_skew3 <- filter(sim2_e3_rep3[1:nrep, ], skew >= -0.5 & skew <= 0.5)
sim2_e3_lm_right_skew3 <- filter(sim2_e3_rep3[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e3_nls1_left_skew3 <- filter(sim2_e3_rep3[(nrep + 1):(nrep + nrep), ], skew < -0.5)
sim2_e3_nls1_no_skew3 <- filter(sim2_e3_rep3[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e3_nls1_right_skew3 <- filter(sim2_e3_rep3[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e3_nls2_left_skew3 <- filter(sim2_e3_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)
sim2_e3_nls2_no_skew3 <- filter(sim2_e3_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e3_nls2_right_skew3 <- filter(sim2_e3_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in average tau
sim2_e3_tau_left_skew3 <- filter(sim2_e3_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)
sim2_e3_tau_no_skew3 <- filter(sim2_e3_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e3_tau_right_skew3 <- filter(sim2_e3_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

##Significant p-values for linear model slope
sim2_e3_lm_pval_sig = filter(sim2_e3_rep3[1:nrep, ], pval < 0.05)
sim2_e3_lm_delta_alpha_pval_sig <- filter(sim2_e3_rep3[1:nrep, ], 
                                         pval_slope_delta_alpha < 0.05)
sim2_e3_lm_delta_beta_pval_sig <- filter(sim2_e3_rep3[1:nrep, ], 
                                         pval_slope_delta_beta < 0.05)

##Significant p-values for nls1 rho (coefficient)
sim2_e3_nls1_pval_sig <- filter(sim2_e3_rep3[(nrep + 1):(nrep + nrep), ], pval < 0.05)

##Significant p-values for nls2 rho (coefficient)
sim2_e3_nls2_pval_sig <- filter(sim2_e3_rep3[(2*nrep + 1):(2*nrep + nrep), ], pval < 0.05)

##Significant p-values for tau average
sim2_e3_tau_pval_sig <- filter(sim2_e3_rep3[(3*nrep + 1):(3*nrep + nrep), ], pval < 0.05)

##Average results and calculate standard deviation for sim2_e3_rep3 (high error, no skew) (This code needs to be in same block as the for loop so that n doesn't get reset.)

avg_sim2_e3_lm_no_skew <- tibble(
  mean_Ray = colMeans(sim2_e3_rep3[1:nrep, ]),
  mean_nls1 = colMeans(sim2_e3_rep3[(nrep + 1):(nrep + nrep), ]),
  mean_nls2 = colMeans(sim2_e3_rep3[(2*nrep + 1):(2*nrep + nrep), ]),
  mean_tau = colMeans(sim2_e3_rep3[(3*nrep + 1):(3*nrep + nrep), ]),  
  sd_Ray = sapply(sim2_e3_rep3[1:nrep, ], sd),
  sd_nls1 = sapply(sim2_e3_rep3[(nrep + 1):(nrep + nrep), ], sd),
  sd_nls2 = sapply(sim2_e3_rep3[(2*nrep + 1):(2*nrep + nrep), ], sd),
  sd_tau = sapply(sim2_e3_rep3[(3*nrep + 1):(3*nrep + nrep), ], sd)  
) %>% t()  #Flip (transpose) table

colnames(avg_sim2_e3_lm_no_skew) <- colnames(sim2_e3_lm_no_skew)

avg_sim2_e3_lm_no_skew <- as_tibble(avg_sim2_e3_lm_no_skew, rownames = NA)
```

#Do 1000 simulations w/ low error and left skew (sim2_e4).

Extract the results for the standard Rayleigh model (linear), Expanded Rayleigh models 1 and 2 (nls1.2 and nls2.2), and average tau.

Skewness: Aiming for skewness of residuals for linear model < -0.5

Set omega (skewness) to -0.99

If the skewness of the residuals for the standard (linear) Rayleigh model where y = delta_p is >= -0.5, skip to the next loop.

See notes on sim_loop_e1 for more details.

Left-skewed data: overestimates (Tail on the left, most of the data on the right). It is appropriate to overestimate N_s, delta_p, and delta_alpha in the same simulation. If N2O is lost from a sample vial, N_p will decrease, causing N_s to increase. N2O with 14N will also likely be preferentially lost, so the R_p and R_alpha (and thus delta_p and delta_alpha) will increase.
```{r sim_loop_e4}
#Nonlinear model 1.2 (sim_formula_nls1.2)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#Nonlinear model 2.2 (sim_formula_nls2.2)
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#R_std for atmospheric N2 = 0.0036765
R_std = 0.0036765

# n = number of times simulation is repeated (loops)
n = 2190

# m = number of models
m = 4

#Make an empty tibble to store the results for each simulation tested on each model.
#Ray = standard Rayleigh model

sim2_e4_rep <- blank_sim_rep(n = n, m = m)

#for loop to generate multiple simulated datasets
set.seed(313)

for (i in 1:n) {
  
#Make the columns in sim2_e4 the appropriate length by filtering
data <- sim2 %>% 
  #Subset data
  filter(f <= 0.75, f >= 0.25)

#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 0.015*sim2_tb2$N_s0[1], -0.99), "SN")  
error_1 <- rsn(n = length(data$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 0.5, -0.99), "SN")  
error_2 <- rsn(n = length(data$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 0.7, -0.99), "SN")  
error_3 <- rsn(n = length(data$N_s), dp = params_3)
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  data <- data %>%
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)%>%
  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        SP = delta_alpha - delta_beta,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        R_std = 0.0036765,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`
         )
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_p
  lm_delta_p <- lm(delta_p ~ `-flnf/(1-f)`, data = data)
  
  #Treat replicate as factor, add lm residuals to data table.
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  lm_delta_p_residuals = lm_delta_p$residuals
)
 
  #Test skewness of residuals for linear model. If no skew or right-skew, skip to the next iteration. (Only zeroes will be stored in rows corresponding to skipped iterations.)
  if(skewness(data$lm_delta_p_residuals) >= -0.5) {
   next
  } 
  
  sim2_e4_rep$Multiple_R_squared[i] = summary(lm_delta_p)$r.squared
  sim2_e4_rep$RMSE_delta_p[i] = rmse(model = lm_delta_p, 
                                     data = data)
  
  #Test for non-constant error variance (store p-value)
  lm_delta_p_ncv <- car::ncvTest(lm_delta_p)
  sim2_e4_rep$lm_delta_p_ncv[i] = lm_delta_p_ncv$p
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  lm_delta_p_lev <- car::leveneTest(lm_delta_p_residuals ~ replicate, data = data)
  sim2_e4_rep$levene_delta_p_res[i] = lm_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  lm_delta_p_JB <- jarque.test(as.vector(data$lm_delta_p_residuals))
  sim2_e4_rep$JB_delta_p_res[i] = lm_delta_p_JB$p.value
  
  #skewness and kurtosis for linear standard Rayleigh model
  sim2_e4_rep$skew[i] = skewness(lm_delta_p$residuals)
  
  if(sim2_e4_rep$skew[i] < -0.5) {
    sim2_e4_rep$skew_factor[i] = 2 #left-skew = 2
  } else if(sim2_e4_rep$skew[i] >= -0.5 & sim2_e4_rep$skew[i] <= 0.5) {
    sim2_e4_rep$skew_factor[i] = 1 #no skew = 1
  } else if (sim2_e4_rep$skew[i] > 0.5) {
    sim2_e4_rep$skew_factor[i] = 3 #right-skew = 3
  }

  sim2_e4_rep$lm_skew_factor[i] = sim2_e4_rep$skew_factor[i]      
  
  sim2_e4_rep$kurt[i] = kurtosis(lm_delta_p$residuals)
  
  sim2_e4_rep$f_min[i] = min(data$f)
  sim2_e4_rep$f_max[i] = max(data$f)
  
  sim2_e4_rep$delta_s0[i] = summary(lm_delta_p)$coefficients[1,1]
  sim2_e4_rep$se_delta_s0[i] = summary(lm_delta_p)$coefficients[1,2]
  sim2_e4_rep$epsilon_p[i] = summary(lm_delta_p)$coefficients[2,1]
  sim2_e4_rep$se_epsilon_p[i] = summary(lm_delta_p)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_alpha
  lm_delta_alpha <- lm(delta_alpha ~ `-flnf/(1-f)`, data = data)
  
  sim2_e4_rep$RMSE_delta_alpha[i] = rmse(model = lm_delta_alpha, 
                                               data = data)
  sim2_e4_rep$R_squared_delta_alpha[i] = summary(lm_delta_alpha)$r.squared  
  sim2_e4_rep$epsilon_alpha[i] =summary(lm_delta_alpha)$coefficients[2,1]
  sim2_e4_rep$se_epsilon_alpha[i] =
    summary(lm_delta_alpha)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_beta  
  lm_delta_beta <- lm(delta_beta ~ `-flnf/(1-f)`, data = data)
  
  sim2_e4_rep$RMSE_delta_beta[i] = rmse(model = lm_delta_beta, 
                                        data = data)
  sim2_e4_rep$R_squared_delta_beta[i] = summary(lm_delta_beta)$r.squared  
  sim2_e4_rep$epsilon_beta[i] = summary(lm_delta_beta)$coefficients[2,1]
  sim2_e4_rep$se_epsilon_beta[i]=summary(lm_delta_beta)$coefficients[2,2]
  
  #Convert standard Rayleigh epsilon_p to fractionation factor (ff_p)
  sim2_e4_rep$ff_p[i] = 1 + lm_delta_p$coefficients[2]/1000
  sim2_e4_rep$se_ff_p[i] = summary(lm_delta_p)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_alpha to fractionation factor (ff_alpha)
  sim2_e4_rep$ff_alpha[i] = 1 + lm_delta_alpha$coefficients[2]/1000
  sim2_e4_rep$se_ff_alpha[i] = summary(lm_delta_alpha)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_beta to fractionation factor (ff_beta)
  sim2_e4_rep$ff_beta[i] = 1 + lm_delta_beta$coefficients[2]/1000
  sim2_e4_rep$se_ff_beta[i] = summary(lm_delta_beta)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_p to KIE (KIE_p)
  sim2_e4_rep$KIE_p[i] = 1000/
    (as.numeric(coef(lm_delta_p)[2]) +1000)
  sim2_e4_rep$se_KIE_p[i] = abs(
      -1/(as.numeric(coef(lm_delta_p)[2])/1000 + 1)^2*
        summary(lm_delta_p)$coefficients[2,2]/1000) #abs(-1/(ff_p)^2*se_ff_p)
   
   #Convert standard Rayleigh epsilon_alpha to KIE (KIE_alpha)
   sim2_e4_rep$KIE_alpha[i] = 1000/
    (as.numeric(coef(lm_delta_alpha)[2]) +1000)
   sim2_e4_rep$se_KIE_alpha[i] = abs(
      -1/(as.numeric(coef(lm_delta_alpha)[2])/1000 + 1)^2*
        summary(lm_delta_alpha)$coefficients[2,2]/1000)
   
   #Convert standard Rayleigh epsilon_beta to KIE (KIE_beta)
   sim2_e4_rep$KIE_beta[i] = 1000/
    (as.numeric(coef(lm_delta_beta)[2]) +1000)
   sim2_e4_rep$se_KIE_beta[i] = abs(
      -1/(as.numeric(coef(lm_delta_beta)[2])/1000 + 1)^2*
        summary(lm_delta_beta)$coefficients[2,2]/1000)
   
  #Calculate est_diff for epsilon values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e4_rep$diff_epsilon_p[i] =
    abs((sim2_e4_rep$epsilon_p[i] - sim2_tb2$epsilon_bulk[1])/
          sim2_tb2$epsilon_bulk[1])
  
  sim2_e4_rep$diff_epsilon_alpha[i] =
    abs((sim2_e4_rep$epsilon_alpha[i] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e4_rep$diff_epsilon_beta[i] =
    abs((sim2_e4_rep$epsilon_beta[i] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e4_rep$diff_ff_p[i] =
    abs((sim2_e4_rep$ff_p[i] - sim2_tb2$ff_p[1])/
          sim2_tb2$ff_p[1])
  
  sim2_e4_rep$diff_ff_alpha[i] =
    abs((sim2_e4_rep$ff_alpha[i] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e4_rep$diff_ff_beta[i] =
    abs((sim2_e4_rep$ff_beta[i] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (standard Rayleigh equation)
  #absolute relative difference = |(est-true)/true|
  sim2_e4_rep$diff_KIE_p[i] =
    abs((sim2_e4_rep$KIE_p[i] - sim2_tb2$KIE_p[1])/
          sim2_tb2$KIE_p[1])
  
  sim2_e4_rep$diff_KIE_alpha[i] =
    abs((sim2_e4_rep$KIE_alpha[i] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e4_rep$diff_KIE_beta[i] =
    abs((sim2_e4_rep$KIE_beta[i] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #add p-value for epsilon_p from standard Rayleigh equation (slope of linear model)
  sim2_e4_rep$pval[i] = summary(lm_delta_p)$coefficients[2, 4]
  
  #Add p-value for slope of linear Rayleigh where y = delta_alpha or delta_beta
  sim2_e4_rep$pval_slope_delta_alpha[i] = summary(lm_delta_alpha)$coefficients[2, 4]
  sim2_e4_rep$pval_slope_delta_beta[i] = summary(lm_delta_beta)$coefficients[2, 4]  
   
#Apply nonlinear model 1.2 (sim_formula_nls1.2) (defined above)
  nls1.2 <- nls(sim_formula_nls1.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e4_rep$RMSE_delta_p[(n + i)] = rmse(nls1.2, data = data)

  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls1.2_delta_p_res <- nlsResiduals(nls1.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls1.2_delta_p_residuals = nls1.2_delta_p_res$resi1[ ,2]
)

  nls1.2_delta_p_lev <- car::leveneTest(nls1.2_delta_p_residuals ~ replicate, data = data)
  sim2_e4_rep$levene_delta_p_res[(n + i)] = nls1.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls1.2_delta_p_JB <- jarque.test(data$nls1.2_delta_p_residuals)
  sim2_e4_rep$JB_delta_p_res[(n + i)] = nls1.2_delta_p_JB$p.value
  
  #Skewness and kurtosis for nls1.2
  sim2_e4_rep$skew[(n + i)] = skewness(data$nls1.2_delta_p_residuals)
  
  if(sim2_e4_rep$skew[(n + i)] < -0.5) {
    sim2_e4_rep$skew_factor[(n + i)] = 2 #left-skew = 2
  } else if(sim2_e4_rep$skew[(n + i)] >= -0.5 & sim2_e4_rep$skew[(n + i)] <= 0.5) {
    sim2_e4_rep$skew_factor[(n + i)] = 1 #no skew = 1
  } else if (sim2_e4_rep$skew[(n + i)] > 0.5) {
    sim2_e4_rep$skew_factor[(n + i)] = 3 #right-skew = 3
  }
  
  sim2_e4_rep$kurt[(n + i)] = kurtosis(data$nls1.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls1.2 rows for indexing (same for all models)
  sim2_e4_rep$lm_skew_factor[(n + i)] = sim2_e4_rep$skew_factor[i]  
  
  #Calculate rho and tau for nls1.2
  sim2_e4_rep$rho[(n + i)] = coef(nls1.2)
  sim2_e4_rep$se_rho[(n + i)] = summary(nls1.2)$coefficients[1,2]
  
  sim2_e4_rep$tau[(n + i)] = mean(data$tau)
  sim2_e4_rep$se_tau[(n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e4_rep$f_min[(n + i)] = min(data$f)
  sim2_e4_rep$f_max[(n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e4_rep$ff_alpha[(n + i)] = 
    (coef(nls1.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls1.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e4_rep$se_ff_alpha[(n+i)] = 
  sqrt((sim2_e4_rep$ff_p[i]/sim2_e4_rep$tau[(n + i)]*sim2_e4_rep$se_rho[(n + i)])^2 + (-coef(nls1.2)*sim2_e4_rep$ff_p[i]/sim2_e4_rep$tau[(n + i)]^2*sim2_e4_rep$se_tau[(n + i)])^2+ (coef(nls1.2)/sim2_e4_rep$tau[(n + i)]*sim2_e4_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_alpha and se_epsilon_alpha (nls1.2):
  sim2_e4_rep$epsilon_alpha[(n + i)] = 1000*(sim2_e4_rep$ff_alpha[(n + i)] - 1)
  
  sim2_e4_rep$se_epsilon_alpha[(n + i)] =
    1000*sim2_e4_rep$se_ff_alpha[(n + i)]
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e4_rep$ff_beta[(n + i)] = 
    (1-coef(nls1.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls1.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e4_rep$se_ff_beta[(n + i)] = sqrt((-sim2_e4_rep$ff_p[i]/(1-mean(data$tau))*sim2_e4_rep$se_rho[(n + i)])^2 + ((1-coef(nls1.2))*sim2_e4_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e4_rep$se_tau[(n + i)])^2 + ((1-coef(nls1.2))/(1-mean(data$tau))*sim2_e4_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_beta and se_epsilon_beta (nls1.2):
  sim2_e4_rep$epsilon_beta[(n + i)] = 
    1000*(sim2_e4_rep$ff_beta[(n + i)] -1)
  sim2_e4_rep$se_epsilon_beta[(n + i)] =
    1000*sim2_e4_rep$se_ff_beta[(n + i)]
  
  #Calculate KIE_alpha and KIE_beta (nls1.2):
  sim2_e4_rep$KIE_alpha[(n + i)] = 1000/(sim2_e4_rep$epsilon_alpha[(n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e4_rep$se_KIE_alpha[(n + i)] = abs((-1/sim2_e4_rep$ff_alpha[(n + i)]^2)*sim2_e4_rep$se_ff_alpha[(n+i)])
  
  sim2_e4_rep$KIE_beta[(n + i)] = 1000/(sim2_e4_rep$epsilon_beta[(n + i)] +1000)
  
  sim2_e4_rep$se_KIE_beta[(n + i)] = abs((-1/sim2_e4_rep$ff_beta[(n + i)]^2)*sim2_e4_rep$se_ff_beta[(n+i)])
  
  #Calculate est_diff for epsilon values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e4_rep$diff_epsilon_alpha[(n + i)] =
    abs((sim2_e4_rep$epsilon_alpha[(n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e4_rep$diff_epsilon_beta[(n + i)] =
    abs((sim2_e4_rep$epsilon_beta[(n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e4_rep$diff_ff_alpha[(n + i)] =
    abs((sim2_e4_rep$ff_alpha[(n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e4_rep$diff_ff_beta[(n + i)] =
    abs((sim2_e4_rep$ff_beta[(n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e4_rep$diff_KIE_alpha[(n + i)] =
    abs((sim2_e4_rep$KIE_alpha[(n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e4_rep$diff_KIE_beta[(n + i)] =
    abs((sim2_e4_rep$KIE_beta[(n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls1.2)
  sim2_e4_rep$diff_rho[(n + i)] = 
    abs((sim2_e4_rep$rho[(n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))
  
  #add p-value for rho (parameter estimated from nls1.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls1.2)$coefficients[1, 1] - 0.5)/
    summary(nls1.2)$coefficients[1, 2]
  sim2_e4_rep$pval[(n + i)] = 2*pt(q = t_test, df = df.residual(nls1.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e4_rep$pval_rho_0[(n + i)] = summary(nls1.2)$coefficients[1, 4] 
  
  
  #Apply nonlinear model 2.2 (sim_formula_nls2.2) (defined above)
  nls2.2 <- nls(sim_formula_nls2.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e4_rep$RMSE_delta_p[(2*n + i)] = rmse(nls2.2, data = data)
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls2.2_delta_p_res <- nlsResiduals(nls2.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls2.2_delta_p_residuals = nls2.2_delta_p_res$resi1[ ,2]
)

  nls2.2_delta_p_lev <- car::leveneTest(nls2.2_delta_p_residuals ~ replicate, data = data)
  sim2_e4_rep$levene_delta_p_res[(2*n + i)] = nls2.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls2.2_delta_p_JB <- jarque.test(data$nls2.2_delta_p_residuals)
  sim2_e4_rep$JB_delta_p_res[(2*n + i)] = nls2.2_delta_p_JB$p.value   
  
  #Skewness and kurtosis for nls2.2
  sim2_e4_rep$skew[(2*n + i)] = skewness(data$nls2.2_delta_p_residuals)
  
  if(sim2_e4_rep$skew[(2*n + i)] < -0.5) {
    sim2_e4_rep$skew_factor[(2*n + i)] = 2 #left-skew = 2
  } else if(sim2_e4_rep$skew[(2*n + i)] >= -0.5 & sim2_e4_rep$skew[(2*n + i)] <= 0.5) {
    sim2_e4_rep$skew_factor[(2*n + i)] = 1 #no skew = 1
  } else if (sim2_e4_rep$skew[(2*n + i)] > 0.5) {
    sim2_e4_rep$skew_factor[(2*n + i)] = 3 #right-skew = 3
  }
  
  sim2_e4_rep$kurt[(2*n + i)] = kurtosis(data$nls2.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls2.2 rows for indexing (same for all models)
  sim2_e4_rep$lm_skew_factor[(2*n + i)] = sim2_e4_rep$skew_factor[i]   
  
  #Calculate rho and tau for nls2.2
  sim2_e4_rep$rho[(2*n + i)] = coef(nls2.2)
  sim2_e4_rep$se_rho[(2*n + i)] = summary(nls2.2)$coefficients[1,2]
  
  sim2_e4_rep$tau[(2*n + i)] = mean(data$tau)
  sim2_e4_rep$se_tau[(2*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e4_rep$f_min[(2*n + i)] = min(data$f)
  sim2_e4_rep$f_max[(2*n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e4_rep$ff_alpha[(2*n + i)] = 
    (coef(nls2.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls2.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e4_rep$se_ff_alpha[(2*n + i)] = 
  sqrt((sim2_e4_rep$ff_p[i]/sim2_e4_rep$tau[(2*n + i)]*sim2_e4_rep$se_rho[(2*n + i)])^2 + (-coef(nls2.2)*sim2_e4_rep$ff_p[i]/sim2_e4_rep$tau[(2*n + i)]^2*sim2_e4_rep$se_tau[(2*n + i)])^2+ (coef(nls2.2)/sim2_e4_rep$tau[(2*n + i)]*sim2_e4_rep$se_ff_p[i])^2)
    
  #Calculate epsilon_alpha and se_epsilon_alpha (nls2.2):
  sim2_e4_rep$epsilon_alpha[(2*n + i)] = 1000*(sim2_e4_rep$ff_alpha[(2*n + i)] - 1)
  
  sim2_e4_rep$se_epsilon_alpha[(2*n + i)] =
    1000*sim2_e4_rep$se_ff_alpha[(2*n + i)]  
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e4_rep$ff_beta[(2*n + i)] = 
    (1-coef(nls2.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)  
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls2.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e4_rep$se_ff_beta[(2*n + i)] = sqrt((-sim2_e4_rep$ff_p[i]/(1-mean(data$tau))*sim2_e4_rep$se_rho[(2*n + i)])^2 + ((1-coef(nls2.2))*sim2_e4_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e4_rep$se_tau[(2*n + i)])^2 + ((1-coef(nls2.2))/(1-mean(data$tau))*sim2_e4_rep$se_ff_p[i])^2) 
  
  #Calculate epsilon_beta and se_epsilon_beta (nls2.2):
  sim2_e4_rep$epsilon_beta[(2*n + i)] = 
    1000*(sim2_e4_rep$ff_beta[(2*n + i)] -1)
  sim2_e4_rep$se_epsilon_beta[(2*n + i)] =
    1000*sim2_e4_rep$se_ff_beta[(2*n + i)]  
  
  #Calculate KIE_alpha and KIE_beta (nls2.2):
  sim2_e4_rep$KIE_alpha[(2*n + i)] = 1000/(sim2_e4_rep$epsilon_alpha[(2*n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e4_rep$se_KIE_alpha[(2*n + i)] = abs((-1/sim2_e4_rep$ff_alpha[(2*n + i)]^2)*sim2_e4_rep$se_ff_alpha[(2*n + i)])
  
  sim2_e4_rep$KIE_beta[(2*n + i)] = 1000/(sim2_e4_rep$epsilon_beta[(2*n + i)] +1000)
  
  sim2_e4_rep$se_KIE_beta[(2*n + i)] = abs((-1/sim2_e4_rep$ff_beta[(2*n + i)]^2)*sim2_e4_rep$se_ff_beta[(2*n + i)])
  
  #Calculate est_diff for epsilon values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e4_rep$diff_epsilon_alpha[(2*n + i)] =
    abs((sim2_e4_rep$epsilon_alpha[(2*n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e4_rep$diff_epsilon_beta[(2*n + i)] =
    abs((sim2_e4_rep$epsilon_beta[(2*n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])  
  
  #Calculate est_diff for ff values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e4_rep$diff_ff_alpha[(2*n + i)] =
    abs((sim2_e4_rep$ff_alpha[(2*n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e4_rep$diff_ff_beta[(2*n + i)] =
    abs((sim2_e4_rep$ff_beta[(2*n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e4_rep$diff_KIE_alpha[(2*n + i)] =
    abs((sim2_e4_rep$KIE_alpha[(2*n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e4_rep$diff_KIE_beta[(2*n + i)] =
    abs((sim2_e4_rep$KIE_beta[(2*n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls2.2)
  sim2_e4_rep$diff_rho[(2*n + i)] = 
    abs((sim2_e4_rep$rho[(2*n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))  
  
  #add p-value for rho (parameter estimated from nls2.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls2.2)$coefficients[1, 1] - 0.5)/
    summary(nls2.2)$coefficients[1, 2]
  sim2_e4_rep$pval[(2*n + i)] = 2*pt(q = t_test, df = df.residual(nls2.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e4_rep$pval_rho_0[(2*n + i)] = summary(nls2.2)$coefficients[1, 4]
  
#average tau "model"
  #Calculate tau (same for all three models)
  sim2_e4_rep$tau[(3*n + i)] = mean(data$tau)
  sim2_e4_rep$se_tau[(3*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e4_rep$f_min[(3*n + i)] = min(data$f)
  sim2_e4_rep$f_max[(3*n + i)] = max(data$f)  
  
  sim2_e4_rep$skew[(3*n + i)] = skewness(data$tau)
  
  if(sim2_e4_rep$skew[(3*n + i)] < -0.5) {
    sim2_e4_rep$skew_factor[(3*n + i)] = 2 #left-skew = 2
  } else if(sim2_e4_rep$skew[(3*n + i)] >= -0.5 & sim2_e4_rep$skew[(3*n + i)] <= 0.5) {
    sim2_e4_rep$skew_factor[(3*n + i)] = 1 #no skew = 1
  } else if (sim2_e4_rep$skew[(3*n + i)] > 0.5) {
    sim2_e4_rep$skew_factor[(3*n + i)] = 3 #right-skew = 3
  }  
  
  sim2_e4_rep$kurt[(3*n + i)] = kurtosis(data$tau)
  
  #Add lm_skew_factor to average tau rows for indexing (same for all models)
  sim2_e4_rep$lm_skew_factor[(3*n + i)] = sim2_e4_rep$skew_factor[i] 
  
  #Calculate est_diff for tau value (same for linear and nonlinear models)
  sim2_e4_rep$diff_tau[(3*n + i)] = 
    abs((sim2_e4_rep$tau[(3*n + i)] - mean(sim2_tb2$tau, na.rm = TRUE))/
          mean(sim2_tb2$tau, na.rm = TRUE))   
  
  #Calculate p-value for average tau. Null hypothesis: tau = 0.5
  sim2_e4_rep$pval[(3*n + i)] = t.test(data$tau, mu = 0.5)$p.value
  
  #Calculate pval_tau_mean. Null hypothesis: tau = mean tau value from sim2 (no error dataset)
  sim2_e4_rep$pval_tau_mean[(3*n + i)] = t.test(data$tau, mu = mean(sim2_tb2$tau, na.rm = TRUE))$p.value
}


#Filter by skewness in linear model
sim2_e4_lm_left_skew <- filter(sim2_e4_rep[1:n, ], skew < -0.5)
sim2_e4_lm_no_skew <- filter(sim2_e4_rep[1:n, ], skew >= -0.5 & skew <= 0.5)
sim2_e4_lm_right_skew <- filter(sim2_e4_rep[1:n, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e4_nls1_left_skew <- filter(sim2_e4_rep[(n + 1):(n + n), ], skew < -0.5)
sim2_e4_nls1_no_skew <- filter(sim2_e4_rep[(n + 1):(n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e4_nls1_right_skew <- filter(sim2_e4_rep[(n + 1):(n + n), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e4_nls2_left_skew <- filter(sim2_e4_rep[(2*n + 1):(2*n + n), ], skew < -0.5)
sim2_e4_nls2_no_skew <- filter(sim2_e4_rep[(2*n + 1):(2*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e4_nls2_right_skew <- filter(sim2_e4_rep[(2*n + 1):(2*n + n), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e4_tau_left_skew <- filter(sim2_e4_rep[(3*n + 1):(3*n + n), ], skew < -0.5)
sim2_e4_tau_no_skew <- filter(sim2_e4_rep[(3*n + 1):(3*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e4_tau_right_skew <- filter(sim2_e4_rep[(3*n + 1):(3*n + n), ], skew > 0.5)

#Filter by lm_skew_factor to select the rows for all four models (linear, nls1, nls2, and average tau) that correspond to datasets with left skew in the linear model.

#For datasets where the lm residuals not skewed or right-skewed, lm_skew_factor == 0 because that iteration was cut short ("next" function) before any non-zero values were stored in the table.

sim2_e4_rep2 <- filter(sim2_e4_rep, lm_skew_factor == 2)
nrep = nrow(sim2_e4_rep2)/m

#Filter by skewness in linear model
sim2_e4_lm_left_skew2 <- filter(sim2_e4_rep2[1:nrep, ], skew < -0.5)

sim2_e4_lm_no_skew2 <- filter(sim2_e4_rep2[1:nrep, ], skew >= -0.5 & skew <= 0.5)

sim2_e4_lm_right_skew2 <- filter(sim2_e4_rep2[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e4_nls1_left_skew2 <- filter(sim2_e4_rep2[(nrep + 1):(nrep + nrep), ], skew < -0.5)

sim2_e4_nls1_no_skew2 <- filter(sim2_e4_rep2[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e4_nls1_right_skew2 <- filter(sim2_e4_rep2[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e4_nls2_left_skew2 <- filter(sim2_e4_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)

sim2_e4_nls2_no_skew2 <- filter(sim2_e4_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e4_nls2_right_skew2 <- filter(sim2_e4_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e4_tau_left_skew2 <- filter(sim2_e4_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)

sim2_e4_tau_no_skew2 <- filter(sim2_e4_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e4_tau_right_skew2 <- filter(sim2_e4_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

#Randomly remove extra rows from sim2_e4_rep2 so that there are 1000 replicates.
nremove <- nrow(sim2_e4_rep2)/m - 1000

#Make indexing vectors to remove the same datasets for each model
v1 <- sample(1:(nrow(sim2_e4_rep2)/m), size = nremove)
v2 <- c(v1, (v1 + nrep), (v1 + 2*nrep), (v1 + 3*nrep))

sim2_e4_rep3 <- sim2_e4_rep2[-v2, ]


#Reset nrep
nrep = nrow(sim2_e4_rep3)/m

#Count the final number of no skew, left skew, and right-skew data in sim2_e4_rep3
#Filter by skewness in linear model
sim2_e4_lm_left_skew3 <- filter(sim2_e4_rep3[1:nrep, ], skew < -0.5)
sim2_e4_lm_no_skew3 <- filter(sim2_e4_rep3[1:nrep, ], skew >= -0.5 & skew <= 0.5)
sim2_e4_lm_right_skew3 <- filter(sim2_e4_rep3[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e4_nls1_left_skew3 <- filter(sim2_e4_rep3[(nrep + 1):(nrep + nrep), ], skew < -0.5)
sim2_e4_nls1_no_skew3 <- filter(sim2_e4_rep3[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e4_nls1_right_skew3 <- filter(sim2_e4_rep3[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e4_nls2_left_skew3 <- filter(sim2_e4_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)
sim2_e4_nls2_no_skew3 <- filter(sim2_e4_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e4_nls2_right_skew3 <- filter(sim2_e4_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in average tau
sim2_e4_tau_left_skew3 <- filter(sim2_e4_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)
sim2_e4_tau_no_skew3 <- filter(sim2_e4_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e4_tau_right_skew3 <- filter(sim2_e4_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

##Significant p-values for linear model slope
sim2_e4_lm_pval_sig = filter(sim2_e4_rep3[1:nrep, ], pval < 0.05)
sim2_e4_lm_delta_alpha_pval_sig <- filter(sim2_e4_rep3[1:nrep, ], 
                                         pval_slope_delta_alpha < 0.05)
sim2_e4_lm_delta_beta_pval_sig <- filter(sim2_e4_rep3[1:nrep, ], 
                                         pval_slope_delta_beta < 0.05)

##Significant p-values for nls1 rho (coefficient)
sim2_e4_nls1_pval_sig <- filter(sim2_e4_rep3[(nrep + 1):(nrep + nrep), ], pval < 0.05)

##Significant p-values for nls2 rho (coefficient)
sim2_e4_nls2_pval_sig <- filter(sim2_e4_rep3[(2*nrep + 1):(2*nrep + nrep), ], pval < 0.05)

##Significant p-values for tau average
sim2_e4_tau_pval_sig <- filter(sim2_e4_rep3[(3*nrep + 1):(3*nrep + nrep), ], pval < 0.05)

##Average results and calculate standard deviation for sim2_e4_rep3 (low error, left skew) (This code needs to be in same block as the for loop so that nrep doesn't get reset.)

avg_sim2_e4_lm_left_skew <- tibble(
  mean_Ray = colMeans(sim2_e4_rep3[1:nrep, ]),
  mean_nls1 = colMeans(sim2_e4_rep3[(nrep + 1):(nrep + nrep), ]),
  mean_nls2 = colMeans(sim2_e4_rep3[(2*nrep + 1):(2*nrep + nrep), ]),
  mean_tau = colMeans(sim2_e4_rep3[(3*nrep + 1):(3*nrep + nrep), ]),  
  sd_Ray = sapply(sim2_e4_rep3[1:nrep, ], sd),
  sd_nls1 = sapply(sim2_e4_rep3[(nrep + 1):(nrep + nrep), ], sd),
  sd_nls2 = sapply(sim2_e4_rep3[(2*nrep + 1):(2*nrep + nrep), ], sd),
  sd_tau = sapply(sim2_e4_rep3[(3*nrep + 1):(3*nrep + nrep), ], sd)  
) %>% t()  #Flip (transpose) table

colnames(avg_sim2_e4_lm_left_skew) <- colnames(sim2_e4_rep)

avg_sim2_e4_lm_left_skew <- as_tibble(avg_sim2_e4_lm_left_skew, rownames = NA)

```

#Do 1000 simulations w/ medium error and left skew (sim2_e5).

Extract the results for the standard Rayleigh model (linear), Expanded Rayleigh models 1 and 2 (nls1.2 and nls2.2), and average tau.

Skewness: Aiming for skewness of residuals for linear model < -0.5

Set omega (skewness) to -0.99

If the skewness of the residuals for the standard (linear) Rayleigh model where y = delta_p is >= -0.5, skip to the next loop.

See notes on sim_loop_e1 for more details.

Left-skewed data: overestimates (Tail on the left, most of the data on the right). It is appropriate to overestimate N_s, delta_p, and delta_alpha in the same simulation. If N2O is lost from a sample vial, N_p will decrease, causing N_s to increase. N2O with 14N will also likely be preferentially lost, so the R_p and R_alpha (and thus delta_p and delta_alpha) will increase.
```{r sim_loop_e5}
#Nonlinear model 1.2 (sim_formula_nls1.2)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#Nonlinear model 2.2 (sim_formula_nls2.2)
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#R_std for atmospheric N2 = 0.0036765
R_std = 0.0036765

# n = number of times simulation is repeated (loops)
n = 2100

# m = number of models
m = 4

#Make an empty tibble to store the results for each simulation tested on each model.
#Ray = standard Rayleigh model

sim2_e5_rep <- blank_sim_rep(n = n, m = m)

#for loop to generate multiple simulated datasets
set.seed(313)

for (i in 1:n) {
  
#Make the columns in sim2_e5 the appropriate length by filtering
data <- sim2 %>% 
  #Subset data
  filter(f <= 0.75, f >= 0.25)

#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 2*0.015*sim2_tb2$N_s0[1], -0.99), "SN")  
error_1 <- rsn(n = length(data$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 2.5*0.5, -0.99), "SN")  
error_2 <- rsn(n = length(data$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 2.5*0.7, -0.99), "SN")  
error_3 <- rsn(n = length(data$N_s), dp = params_3)

  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  data <- data %>%
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)%>%
  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        SP = delta_alpha - delta_beta,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        R_std = 0.0036765,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`
         )
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_p
  lm_delta_p <- lm(delta_p ~ `-flnf/(1-f)`, data = data)
  
  #Treat replicate as factor, add lm residuals to data table.
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  lm_delta_p_residuals = lm_delta_p$residuals
)
 
  #Test skewness of residuals for linear model. If no skew or right-skew, skip to the next iteration. (Only zeroes will be stored in rows corresponding to skipped iterations.)
  if(skewness(data$lm_delta_p_residuals) >= -0.5) {
   next
  } 
  
  sim2_e5_rep$Multiple_R_squared[i] = summary(lm_delta_p)$r.squared
  sim2_e5_rep$RMSE_delta_p[i] = rmse(model = lm_delta_p, 
                                     data = data)
  
  #Test for non-constant error variance (store p-value)
  lm_delta_p_ncv <- car::ncvTest(lm_delta_p)
  sim2_e5_rep$lm_delta_p_ncv[i] = lm_delta_p_ncv$p
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  lm_delta_p_lev <- car::leveneTest(lm_delta_p_residuals ~ replicate, data = data)
  sim2_e5_rep$levene_delta_p_res[i] = lm_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  lm_delta_p_JB <- jarque.test(as.vector(data$lm_delta_p_residuals))
  sim2_e5_rep$JB_delta_p_res[i] = lm_delta_p_JB$p.value
  
  #skewness and kurtosis for linear standard Rayleigh model
  sim2_e5_rep$skew[i] = skewness(lm_delta_p$residuals)
  
  if(sim2_e5_rep$skew[i] < -0.5) {
    sim2_e5_rep$skew_factor[i] = 2 #left-skew = 2
  } else if(sim2_e5_rep$skew[i] >= -0.5 & sim2_e5_rep$skew[i] <= 0.5) {
    sim2_e5_rep$skew_factor[i] = 1 #no skew = 1
  } else if (sim2_e5_rep$skew[i] > 0.5) {
    sim2_e5_rep$skew_factor[i] = 3 #right-skew = 3
  }

  sim2_e5_rep$lm_skew_factor[i] = sim2_e5_rep$skew_factor[i]      
  
  sim2_e5_rep$kurt[i] = kurtosis(lm_delta_p$residuals)
  
  sim2_e5_rep$f_min[i] = min(data$f)
  sim2_e5_rep$f_max[i] = max(data$f)
  
  sim2_e5_rep$delta_s0[i] = summary(lm_delta_p)$coefficients[1,1]
  sim2_e5_rep$se_delta_s0[i] = summary(lm_delta_p)$coefficients[1,2]
  sim2_e5_rep$epsilon_p[i] = summary(lm_delta_p)$coefficients[2,1]
  sim2_e5_rep$se_epsilon_p[i] = summary(lm_delta_p)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_alpha
  lm_delta_alpha <- lm(delta_alpha ~ `-flnf/(1-f)`, data = data)
  
  sim2_e5_rep$RMSE_delta_alpha[i] = rmse(model = lm_delta_alpha, 
                                               data = data)
  sim2_e5_rep$R_squared_delta_alpha[i] = summary(lm_delta_alpha)$r.squared   
  sim2_e5_rep$epsilon_alpha[i] =summary(lm_delta_alpha)$coefficients[2,1]
  sim2_e5_rep$se_epsilon_alpha[i] =
    summary(lm_delta_alpha)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_beta  
  lm_delta_beta <- lm(delta_beta ~ `-flnf/(1-f)`, data = data)
  
  sim2_e5_rep$RMSE_delta_beta[i] = rmse(model = lm_delta_beta, 
                                        data = data)
  sim2_e5_rep$R_squared_delta_beta[i] = summary(lm_delta_beta)$r.squared   
  sim2_e5_rep$epsilon_beta[i] = summary(lm_delta_beta)$coefficients[2,1]
  sim2_e5_rep$se_epsilon_beta[i]=summary(lm_delta_beta)$coefficients[2,2]
  
  #Convert standard Rayleigh epsilon_p to fractionation factor (ff_p)
  sim2_e5_rep$ff_p[i] = 1 + lm_delta_p$coefficients[2]/1000
  sim2_e5_rep$se_ff_p[i] = summary(lm_delta_p)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_alpha to fractionation factor (ff_alpha)
  sim2_e5_rep$ff_alpha[i] = 1 + lm_delta_alpha$coefficients[2]/1000
  sim2_e5_rep$se_ff_alpha[i] = summary(lm_delta_alpha)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_beta to fractionation factor (ff_beta)
  sim2_e5_rep$ff_beta[i] = 1 + lm_delta_beta$coefficients[2]/1000
  sim2_e5_rep$se_ff_beta[i] = summary(lm_delta_beta)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_p to KIE (KIE_p)
  sim2_e5_rep$KIE_p[i] = 1000/
    (as.numeric(coef(lm_delta_p)[2]) +1000)
  sim2_e5_rep$se_KIE_p[i] = abs(
      -1/(as.numeric(coef(lm_delta_p)[2])/1000 + 1)^2*
        summary(lm_delta_p)$coefficients[2,2]/1000) #abs(-1/(ff_p)^2*se_ff_p)
   
   #Convert standard Rayleigh epsilon_alpha to KIE (KIE_alpha)
   sim2_e5_rep$KIE_alpha[i] = 1000/
    (as.numeric(coef(lm_delta_alpha)[2]) +1000)
   sim2_e5_rep$se_KIE_alpha[i] = abs(
      -1/(as.numeric(coef(lm_delta_alpha)[2])/1000 + 1)^2*
        summary(lm_delta_alpha)$coefficients[2,2]/1000)
   
   #Convert standard Rayleigh epsilon_beta to KIE (KIE_beta)
   sim2_e5_rep$KIE_beta[i] = 1000/
    (as.numeric(coef(lm_delta_beta)[2]) +1000)
   sim2_e5_rep$se_KIE_beta[i] = abs(
      -1/(as.numeric(coef(lm_delta_beta)[2])/1000 + 1)^2*
        summary(lm_delta_beta)$coefficients[2,2]/1000)
   
  #Calculate est_diff for epsilon values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e5_rep$diff_epsilon_p[i] =
    abs((sim2_e5_rep$epsilon_p[i] - sim2_tb2$epsilon_bulk[1])/
          sim2_tb2$epsilon_bulk[1])
  
  sim2_e5_rep$diff_epsilon_alpha[i] =
    abs((sim2_e5_rep$epsilon_alpha[i] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e5_rep$diff_epsilon_beta[i] =
    abs((sim2_e5_rep$epsilon_beta[i] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e5_rep$diff_ff_p[i] =
    abs((sim2_e5_rep$ff_p[i] - sim2_tb2$ff_p[1])/
          sim2_tb2$ff_p[1])
  
  sim2_e5_rep$diff_ff_alpha[i] =
    abs((sim2_e5_rep$ff_alpha[i] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e5_rep$diff_ff_beta[i] =
    abs((sim2_e5_rep$ff_beta[i] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (standard Rayleigh equation)
  #absolute relative difference = |(est-true)/true|
  sim2_e5_rep$diff_KIE_p[i] =
    abs((sim2_e5_rep$KIE_p[i] - sim2_tb2$KIE_p[1])/
          sim2_tb2$KIE_p[1])
  
  sim2_e5_rep$diff_KIE_alpha[i] =
    abs((sim2_e5_rep$KIE_alpha[i] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e5_rep$diff_KIE_beta[i] =
    abs((sim2_e5_rep$KIE_beta[i] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #add p-value for epsilon_p from standard Rayleigh equation (slope of linear model)
  sim2_e5_rep$pval[i] = summary(lm_delta_p)$coefficients[2, 4]
  
  #Add p-value for slope of linear Rayleigh where y = delta_alpha or delta_beta
  sim2_e5_rep$pval_slope_delta_alpha[i] = summary(lm_delta_alpha)$coefficients[2, 4]
  sim2_e5_rep$pval_slope_delta_beta[i] = summary(lm_delta_beta)$coefficients[2, 4]  
   
#Apply nonlinear model 1.2 (sim_formula_nls1.2) (defined above)
  nls1.2 <- nls(sim_formula_nls1.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e5_rep$RMSE_delta_p[(n + i)] = rmse(nls1.2, data = data)

  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls1.2_delta_p_res <- nlsResiduals(nls1.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls1.2_delta_p_residuals = nls1.2_delta_p_res$resi1[ ,2]
)

  nls1.2_delta_p_lev <- car::leveneTest(nls1.2_delta_p_residuals ~ replicate, data = data)
  sim2_e5_rep$levene_delta_p_res[(n + i)] = nls1.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls1.2_delta_p_JB <- jarque.test(data$nls1.2_delta_p_residuals)
  sim2_e5_rep$JB_delta_p_res[(n + i)] = nls1.2_delta_p_JB$p.value
  
  #Skewness and kurtosis for nls1.2
  sim2_e5_rep$skew[(n + i)] = skewness(data$nls1.2_delta_p_residuals)
  
  if(sim2_e5_rep$skew[(n + i)] < -0.5) {
    sim2_e5_rep$skew_factor[(n + i)] = 2 #left-skew = 2
  } else if(sim2_e5_rep$skew[(n + i)] >= -0.5 & sim2_e5_rep$skew[(n + i)] <= 0.5) {
    sim2_e5_rep$skew_factor[(n + i)] = 1 #no skew = 1
  } else if (sim2_e5_rep$skew[(n + i)] > 0.5) {
    sim2_e5_rep$skew_factor[(n + i)] = 3 #right-skew = 3
  }
  
  sim2_e5_rep$kurt[(n + i)] = kurtosis(data$nls1.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls1.2 rows for indexing (same for all models)
  sim2_e5_rep$lm_skew_factor[(n + i)] = sim2_e5_rep$skew_factor[i]  
  
  #Calculate rho and tau for nls1.2
  sim2_e5_rep$rho[(n + i)] = coef(nls1.2)
  sim2_e5_rep$se_rho[(n + i)] = summary(nls1.2)$coefficients[1,2]
  
  sim2_e5_rep$tau[(n + i)] = mean(data$tau)
  sim2_e5_rep$se_tau[(n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e5_rep$f_min[(n + i)] = min(data$f)
  sim2_e5_rep$f_max[(n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e5_rep$ff_alpha[(n + i)] = 
    (coef(nls1.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls1.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e5_rep$se_ff_alpha[(n+i)] = 
  sqrt((sim2_e5_rep$ff_p[i]/sim2_e5_rep$tau[(n + i)]*sim2_e5_rep$se_rho[(n + i)])^2 + (-coef(nls1.2)*sim2_e5_rep$ff_p[i]/sim2_e5_rep$tau[(n + i)]^2*sim2_e5_rep$se_tau[(n + i)])^2+ (coef(nls1.2)/sim2_e5_rep$tau[(n + i)]*sim2_e5_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_alpha and se_epsilon_alpha (nls1.2):
  sim2_e5_rep$epsilon_alpha[(n + i)] = 1000*(sim2_e5_rep$ff_alpha[(n + i)] - 1)
  
  sim2_e5_rep$se_epsilon_alpha[(n + i)] =
    1000*sim2_e5_rep$se_ff_alpha[(n + i)]
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e5_rep$ff_beta[(n + i)] = 
    (1-coef(nls1.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls1.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e5_rep$se_ff_beta[(n + i)] = sqrt((-sim2_e5_rep$ff_p[i]/(1-mean(data$tau))*sim2_e5_rep$se_rho[(n + i)])^2 + ((1-coef(nls1.2))*sim2_e5_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e5_rep$se_tau[(n + i)])^2 + ((1-coef(nls1.2))/(1-mean(data$tau))*sim2_e5_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_beta and se_epsilon_beta (nls1.2):
  sim2_e5_rep$epsilon_beta[(n + i)] = 
    1000*(sim2_e5_rep$ff_beta[(n + i)] -1)
  sim2_e5_rep$se_epsilon_beta[(n + i)] =
    1000*sim2_e5_rep$se_ff_beta[(n + i)]
  
  #Calculate KIE_alpha and KIE_beta (nls1.2):
  sim2_e5_rep$KIE_alpha[(n + i)] = 1000/(sim2_e5_rep$epsilon_alpha[(n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e5_rep$se_KIE_alpha[(n + i)] = abs((-1/sim2_e5_rep$ff_alpha[(n + i)]^2)*sim2_e5_rep$se_ff_alpha[(n+i)])
  
  sim2_e5_rep$KIE_beta[(n + i)] = 1000/(sim2_e5_rep$epsilon_beta[(n + i)] +1000)
  
  sim2_e5_rep$se_KIE_beta[(n + i)] = abs((-1/sim2_e5_rep$ff_beta[(n + i)]^2)*sim2_e5_rep$se_ff_beta[(n+i)])
  
  #Calculate est_diff for epsilon values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e5_rep$diff_epsilon_alpha[(n + i)] =
    abs((sim2_e5_rep$epsilon_alpha[(n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e5_rep$diff_epsilon_beta[(n + i)] =
    abs((sim2_e5_rep$epsilon_beta[(n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e5_rep$diff_ff_alpha[(n + i)] =
    abs((sim2_e5_rep$ff_alpha[(n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e5_rep$diff_ff_beta[(n + i)] =
    abs((sim2_e5_rep$ff_beta[(n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e5_rep$diff_KIE_alpha[(n + i)] =
    abs((sim2_e5_rep$KIE_alpha[(n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e5_rep$diff_KIE_beta[(n + i)] =
    abs((sim2_e5_rep$KIE_beta[(n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls1.2)
  sim2_e5_rep$diff_rho[(n + i)] = 
    abs((sim2_e5_rep$rho[(n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))
  
  #add p-value for rho (parameter estimated from nls1.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls1.2)$coefficients[1, 1] - 0.5)/
    summary(nls1.2)$coefficients[1, 2]
  sim2_e5_rep$pval[(n + i)] = 2*pt(q = t_test, df = df.residual(nls1.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e5_rep$pval_rho_0[(n + i)] = summary(nls1.2)$coefficients[1, 4] 
  
  
#Apply nonlinear model 2.2 (sim_formula_nls2.2) (defined above)
  nls2.2 <- nls(sim_formula_nls2.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e5_rep$RMSE_delta_p[(2*n + i)] = rmse(nls2.2, data = data)
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls2.2_delta_p_res <- nlsResiduals(nls2.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls2.2_delta_p_residuals = nls2.2_delta_p_res$resi1[ ,2]
)

  nls2.2_delta_p_lev <- car::leveneTest(nls2.2_delta_p_residuals ~ replicate, data = data)
  sim2_e5_rep$levene_delta_p_res[(2*n + i)] = nls2.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls2.2_delta_p_JB <- jarque.test(data$nls2.2_delta_p_residuals)
  sim2_e5_rep$JB_delta_p_res[(2*n + i)] = nls2.2_delta_p_JB$p.value   
  
  #Skewness and kurtosis for nls2.2
  sim2_e5_rep$skew[(2*n + i)] = skewness(data$nls2.2_delta_p_residuals)
  
  if(sim2_e5_rep$skew[(2*n + i)] < -0.5) {
    sim2_e5_rep$skew_factor[(2*n + i)] = 2 #left-skew = 2
  } else if(sim2_e5_rep$skew[(2*n + i)] >= -0.5 & sim2_e5_rep$skew[(2*n + i)] <= 0.5) {
    sim2_e5_rep$skew_factor[(2*n + i)] = 1 #no skew = 1
  } else if (sim2_e5_rep$skew[(2*n + i)] > 0.5) {
    sim2_e5_rep$skew_factor[(2*n + i)] = 3 #right-skew = 3
  }
  
  sim2_e5_rep$kurt[(2*n + i)] = kurtosis(data$nls2.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls2.2 rows for indexing (same for all models)
  sim2_e5_rep$lm_skew_factor[(2*n + i)] = sim2_e5_rep$skew_factor[i]   
  
  #Calculate rho and tau for nls2.2
  sim2_e5_rep$rho[(2*n + i)] = coef(nls2.2)
  sim2_e5_rep$se_rho[(2*n + i)] = summary(nls2.2)$coefficients[1,2]
  
  sim2_e5_rep$tau[(2*n + i)] = mean(data$tau)
  sim2_e5_rep$se_tau[(2*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e5_rep$f_min[(2*n + i)] = min(data$f)
  sim2_e5_rep$f_max[(2*n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e5_rep$ff_alpha[(2*n + i)] = 
    (coef(nls2.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls2.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e5_rep$se_ff_alpha[(2*n + i)] = 
  sqrt((sim2_e5_rep$ff_p[i]/sim2_e5_rep$tau[(2*n + i)]*sim2_e5_rep$se_rho[(2*n + i)])^2 + (-coef(nls2.2)*sim2_e5_rep$ff_p[i]/sim2_e5_rep$tau[(2*n + i)]^2*sim2_e5_rep$se_tau[(2*n + i)])^2+ (coef(nls2.2)/sim2_e5_rep$tau[(2*n + i)]*sim2_e5_rep$se_ff_p[i])^2)
    
  #Calculate epsilon_alpha and se_epsilon_alpha (nls2.2):
  sim2_e5_rep$epsilon_alpha[(2*n + i)] = 1000*(sim2_e5_rep$ff_alpha[(2*n + i)] - 1)
  
  sim2_e5_rep$se_epsilon_alpha[(2*n + i)] =
    1000*sim2_e5_rep$se_ff_alpha[(2*n + i)]  
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e5_rep$ff_beta[(2*n + i)] = 
    (1-coef(nls2.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)  
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls2.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e5_rep$se_ff_beta[(2*n + i)] = sqrt((-sim2_e5_rep$ff_p[i]/(1-mean(data$tau))*sim2_e5_rep$se_rho[(2*n + i)])^2 + ((1-coef(nls2.2))*sim2_e5_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e5_rep$se_tau[(2*n + i)])^2 + ((1-coef(nls2.2))/(1-mean(data$tau))*sim2_e5_rep$se_ff_p[i])^2) 
  
  #Calculate epsilon_beta and se_epsilon_beta (nls2.2):
  sim2_e5_rep$epsilon_beta[(2*n + i)] = 
    1000*(sim2_e5_rep$ff_beta[(2*n + i)] -1)
  sim2_e5_rep$se_epsilon_beta[(2*n + i)] =
    1000*sim2_e5_rep$se_ff_beta[(2*n + i)]  
  
  #Calculate KIE_alpha and KIE_beta (nls2.2):
  sim2_e5_rep$KIE_alpha[(2*n + i)] = 1000/(sim2_e5_rep$epsilon_alpha[(2*n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e5_rep$se_KIE_alpha[(2*n + i)] = abs((-1/sim2_e5_rep$ff_alpha[(2*n + i)]^2)*sim2_e5_rep$se_ff_alpha[(2*n + i)])
  
  sim2_e5_rep$KIE_beta[(2*n + i)] = 1000/(sim2_e5_rep$epsilon_beta[(2*n + i)] +1000)
  
  sim2_e5_rep$se_KIE_beta[(2*n + i)] = abs((-1/sim2_e5_rep$ff_beta[(2*n + i)]^2)*sim2_e5_rep$se_ff_beta[(2*n + i)])
  
  #Calculate est_diff for epsilon values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e5_rep$diff_epsilon_alpha[(2*n + i)] =
    abs((sim2_e5_rep$epsilon_alpha[(2*n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e5_rep$diff_epsilon_beta[(2*n + i)] =
    abs((sim2_e5_rep$epsilon_beta[(2*n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e5_rep$diff_ff_alpha[(2*n + i)] =
    abs((sim2_e5_rep$ff_alpha[(2*n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e5_rep$diff_ff_beta[(2*n + i)] =
    abs((sim2_e5_rep$ff_beta[(2*n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e5_rep$diff_KIE_alpha[(2*n + i)] =
    abs((sim2_e5_rep$KIE_alpha[(2*n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e5_rep$diff_KIE_beta[(2*n + i)] =
    abs((sim2_e5_rep$KIE_beta[(2*n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls2.2)
  sim2_e5_rep$diff_rho[(2*n + i)] = 
    abs((sim2_e5_rep$rho[(2*n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))  
  
  #add p-value for rho (parameter estimated from nls2.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls2.2)$coefficients[1, 1] - 0.5)/
    summary(nls2.2)$coefficients[1, 2]
  sim2_e5_rep$pval[(2*n + i)] = 2*pt(q = t_test, df = df.residual(nls2.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e5_rep$pval_rho_0[(2*n + i)] = summary(nls2.2)$coefficients[1, 4]
  
#average tau "model"
  #Calculate tau (same for all three models)
  sim2_e5_rep$tau[(3*n + i)] = mean(data$tau)
  sim2_e5_rep$se_tau[(3*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e5_rep$f_min[(3*n + i)] = min(data$f)
  sim2_e5_rep$f_max[(3*n + i)] = max(data$f)  
  
  sim2_e5_rep$skew[(3*n + i)] = skewness(data$tau)
  
  if(sim2_e5_rep$skew[(3*n + i)] < -0.5) {
    sim2_e5_rep$skew_factor[(3*n + i)] = 2 #left-skew = 2
  } else if(sim2_e5_rep$skew[(3*n + i)] >= -0.5 & sim2_e5_rep$skew[(3*n + i)] <= 0.5) {
    sim2_e5_rep$skew_factor[(3*n + i)] = 1 #no skew = 1
  } else if (sim2_e5_rep$skew[(3*n + i)] > 0.5) {
    sim2_e5_rep$skew_factor[(3*n + i)] = 3 #right-skew = 3
  }  
  
  sim2_e5_rep$kurt[(3*n + i)] = kurtosis(data$tau)
  
  #Add lm_skew_factor to average tau rows for indexing (same for all models)
  sim2_e5_rep$lm_skew_factor[(3*n + i)] = sim2_e5_rep$skew_factor[i] 
  
  #Calculate est_diff for tau value (same for linear and nonlinear models)
  sim2_e5_rep$diff_tau[(3*n + i)] = 
    abs((sim2_e5_rep$tau[(3*n + i)] - mean(sim2_tb2$tau, na.rm = TRUE))/
          mean(sim2_tb2$tau, na.rm = TRUE))   
  
  #Calculate p-value for average tau. Null hypothesis: tau = 0.5
  sim2_e5_rep$pval[(3*n + i)] = t.test(data$tau, mu = 0.5)$p.value
  
  #Calculate pval_tau_mean. Null hypothesis: tau = mean tau value from sim2 (no error dataset)
  sim2_e5_rep$pval_tau_mean[(3*n + i)] = t.test(data$tau, mu = mean(sim2_tb2$tau, na.rm = TRUE))$p.value
}


#Filter by skewness in linear model
sim2_e5_lm_left_skew <- filter(sim2_e5_rep[1:n, ], skew < -0.5)
sim2_e5_lm_no_skew <- filter(sim2_e5_rep[1:n, ], skew >= -0.5 & skew <= 0.5)
sim2_e5_lm_right_skew <- filter(sim2_e5_rep[1:n, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e5_nls1_left_skew <- filter(sim2_e5_rep[(n + 1):(n + n), ], skew < -0.5)
sim2_e5_nls1_no_skew <- filter(sim2_e5_rep[(n + 1):(n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e5_nls1_right_skew <- filter(sim2_e5_rep[(n + 1):(n + n), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e5_nls2_left_skew <- filter(sim2_e5_rep[(2*n + 1):(2*n + n), ], skew < -0.5)
sim2_e5_nls2_no_skew <- filter(sim2_e5_rep[(2*n + 1):(2*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e5_nls2_right_skew <- filter(sim2_e5_rep[(2*n + 1):(2*n + n), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e5_tau_left_skew <- filter(sim2_e5_rep[(3*n + 1):(3*n + n), ], skew < -0.5)
sim2_e5_tau_no_skew <- filter(sim2_e5_rep[(3*n + 1):(3*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e5_tau_right_skew <- filter(sim2_e5_rep[(3*n + 1):(3*n + n), ], skew > 0.5)

#Filter by lm_skew_factor to select the rows for all four models (linear, nls1, nls2, and average tau) that correspond to datasets with left skew in the linear model.

#For datasets where the lm residuals not skewed or right-skewed, lm_skew_factor == 0 because that iteration was cut short ("next" function) before any non-zero values were stored in the table.

sim2_e5_rep2 <- filter(sim2_e5_rep, lm_skew_factor == 2)
nrep = nrow(sim2_e5_rep2)/m

#Filter by skewness in linear model
sim2_e5_lm_left_skew2 <- filter(sim2_e5_rep2[1:nrep, ], skew < -0.5)

sim2_e5_lm_no_skew2 <- filter(sim2_e5_rep2[1:nrep, ], skew >= -0.5 & skew <= 0.5)

sim2_e5_lm_right_skew2 <- filter(sim2_e5_rep2[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e5_nls1_left_skew2 <- filter(sim2_e5_rep2[(nrep + 1):(nrep + nrep), ], skew < -0.5)

sim2_e5_nls1_no_skew2 <- filter(sim2_e5_rep2[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e5_nls1_right_skew2 <- filter(sim2_e5_rep2[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e5_nls2_left_skew2 <- filter(sim2_e5_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)

sim2_e5_nls2_no_skew2 <- filter(sim2_e5_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e5_nls2_right_skew2 <- filter(sim2_e5_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e5_tau_left_skew2 <- filter(sim2_e5_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)

sim2_e5_tau_no_skew2 <- filter(sim2_e5_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e5_tau_right_skew2 <- filter(sim2_e5_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

#Randomly remove extra rows from sim2_e5_rep2 so that there are 1000 replicates.
nremove <- nrow(sim2_e5_rep2)/m - 1000

#Make indexing vectors to remove the same datasets for each model
v1 <- sample(1:(nrow(sim2_e5_rep2)/m), size = nremove)
v2 <- c(v1, (v1 + nrep), (v1 + 2*nrep), (v1 + 3*nrep))

sim2_e5_rep3 <- sim2_e5_rep2[-v2, ]


#Reset nrep
nrep = nrow(sim2_e5_rep3)/m

#Count the final number of no skew, left skew, and right-skew data in sim2_e5_rep3
#Filter by skewness in linear model
sim2_e5_lm_left_skew3 <- filter(sim2_e5_rep3[1:nrep, ], skew < -0.5)
sim2_e5_lm_no_skew3 <- filter(sim2_e5_rep3[1:nrep, ], skew >= -0.5 & skew <= 0.5)
sim2_e5_lm_right_skew3 <- filter(sim2_e5_rep3[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e5_nls1_left_skew3 <- filter(sim2_e5_rep3[(nrep + 1):(nrep + nrep), ], skew < -0.5)
sim2_e5_nls1_no_skew3 <- filter(sim2_e5_rep3[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e5_nls1_right_skew3 <- filter(sim2_e5_rep3[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e5_nls2_left_skew3 <- filter(sim2_e5_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)
sim2_e5_nls2_no_skew3 <- filter(sim2_e5_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e5_nls2_right_skew3 <- filter(sim2_e5_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in average tau
sim2_e5_tau_left_skew3 <- filter(sim2_e5_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)
sim2_e5_tau_no_skew3 <- filter(sim2_e5_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e5_tau_right_skew3 <- filter(sim2_e5_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

##Significant p-values for linear model slope
sim2_e5_lm_pval_sig = filter(sim2_e5_rep3[1:nrep, ], pval < 0.05)
sim2_e5_lm_delta_alpha_pval_sig <- filter(sim2_e5_rep3[1:nrep, ], 
                                         pval_slope_delta_alpha < 0.05)
sim2_e5_lm_delta_beta_pval_sig <- filter(sim2_e5_rep3[1:nrep, ], 
                                         pval_slope_delta_beta < 0.05)

##Significant p-values for nls1 rho (coefficient)
sim2_e5_nls1_pval_sig <- filter(sim2_e5_rep3[(nrep + 1):(nrep + nrep), ], pval < 0.05)

##Significant p-values for nls2 rho (coefficient)
sim2_e5_nls2_pval_sig <- filter(sim2_e5_rep3[(2*nrep + 1):(2*nrep + nrep), ], pval < 0.05)

##Significant p-values for tau average
sim2_e5_tau_pval_sig <- filter(sim2_e5_rep3[(3*nrep + 1):(3*nrep + nrep), ], pval < 0.05)

##Average results and calculate standard deviation for sim2_e5_rep3 (low error, left skew) (This code needs to be in same block as the for loop so that nrep doesn't get reset.)

avg_sim2_e5_lm_left_skew <- tibble(
  mean_Ray = colMeans(sim2_e5_rep3[1:nrep, ]),
  mean_nls1 = colMeans(sim2_e5_rep3[(nrep + 1):(nrep + nrep), ]),
  mean_nls2 = colMeans(sim2_e5_rep3[(2*nrep + 1):(2*nrep + nrep), ]),
  mean_tau = colMeans(sim2_e5_rep3[(3*nrep + 1):(3*nrep + nrep), ]),  
  sd_Ray = sapply(sim2_e5_rep3[1:nrep, ], sd),
  sd_nls1 = sapply(sim2_e5_rep3[(nrep + 1):(nrep + nrep), ], sd),
  sd_nls2 = sapply(sim2_e5_rep3[(2*nrep + 1):(2*nrep + nrep), ], sd),
  sd_tau = sapply(sim2_e5_rep3[(3*nrep + 1):(3*nrep + nrep), ], sd)  
) %>% t()  #Flip (transpose) table

colnames(avg_sim2_e5_lm_left_skew) <- colnames(sim2_e5_rep)

avg_sim2_e5_lm_left_skew <- as_tibble(avg_sim2_e5_lm_left_skew, rownames = NA)

```
#Do 1000 simulations w/ high error and left skew (sim2_e6).

Extract the results for the standard Rayleigh model (linear), Expanded Rayleigh models 1 and 2 (nls1.2 and nls2.2), and average tau.

Skewness: Aiming for skewness of residuals for linear model < -0.5

Set omega (skewness) to -0.99

If the skewness of the residuals for the standard (linear) Rayleigh model where y = delta_p is >= -0.5, skip to the next loop.

See notes on sim_loop_e1 for more details.

Left-skewed data: overestimates (Tail on the left, most of the data on the right). It is appropriate to overestimate N_s, delta_p, and delta_alpha in the same simulation. If N2O is lost from a sample vial, N_p will decrease, causing N_s to increase. N2O with 14N will also likely be preferentially lost, so the R_p and R_alpha (and thus delta_p and delta_alpha) will increase.
```{r sim_loop_e6}
#Nonlinear model 1.2 (sim_formula_nls1.2)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#Nonlinear model 2.2 (sim_formula_nls2.2)
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#R_std for atmospheric N2 = 0.0036765
R_std = 0.0036765

# n = number of times simulation is repeated (loops)
n = 2000

# m = number of models
m = 4

#Make an empty tibble to store the results for each simulation tested on each model.
#Ray = standard Rayleigh model

sim2_e6_rep <- blank_sim_rep(n = n, m = m)

#for loop to generate multiple simulated datasets
set.seed(313)

for (i in 1:n) {
  
#Make the columns in sim2_e6 the appropriate length by filtering
data <- sim2 %>% 
  #Subset data
  filter(f <= 0.75, f >= 0.25)

#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 3*0.015*sim2_tb2$N_s0[1], -0.99), "SN")  
error_1 <- rsn(n = length(data$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 5*0.5, -0.99), "SN")  
error_2 <- rsn(n = length(data$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 5*0.7, -0.99), "SN")  
error_3 <- rsn(n = length(data$N_s), dp = params_3)
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  data <- data %>%
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)%>%
  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        SP = delta_alpha - delta_beta,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        R_std = 0.0036765,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`
         )
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_p
  lm_delta_p <- lm(delta_p ~ `-flnf/(1-f)`, data = data)
  
  #Treat replicate as factor, add lm residuals to data table.
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  lm_delta_p_residuals = lm_delta_p$residuals
)
 
  #Test skewness of residuals for linear model. If no skew or right-skew, skip to the next iteration. (Only zeroes will be stored in rows corresponding to skipped iterations.)
  if(skewness(data$lm_delta_p_residuals) >= -0.5) {
   next
  } 
  
  sim2_e6_rep$Multiple_R_squared[i] = summary(lm_delta_p)$r.squared
  sim2_e6_rep$RMSE_delta_p[i] = rmse(model = lm_delta_p, 
                                     data = data)
  
  #Test for non-constant error variance (store p-value)
  lm_delta_p_ncv <- car::ncvTest(lm_delta_p)
  sim2_e6_rep$lm_delta_p_ncv[i] = lm_delta_p_ncv$p
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  lm_delta_p_lev <- car::leveneTest(lm_delta_p_residuals ~ replicate, data = data)
  sim2_e6_rep$levene_delta_p_res[i] = lm_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  lm_delta_p_JB <- jarque.test(as.vector(data$lm_delta_p_residuals))
  sim2_e6_rep$JB_delta_p_res[i] = lm_delta_p_JB$p.value
  
  #skewness and kurtosis for linear standard Rayleigh model
  sim2_e6_rep$skew[i] = skewness(lm_delta_p$residuals)
  
  if(sim2_e6_rep$skew[i] < -0.5) {
    sim2_e6_rep$skew_factor[i] = 2 #left-skew = 2
  } else if(sim2_e6_rep$skew[i] >= -0.5 & sim2_e6_rep$skew[i] <= 0.5) {
    sim2_e6_rep$skew_factor[i] = 1 #no skew = 1
  } else if (sim2_e6_rep$skew[i] > 0.5) {
    sim2_e6_rep$skew_factor[i] = 3 #right-skew = 3
  }

  sim2_e6_rep$lm_skew_factor[i] = sim2_e6_rep$skew_factor[i]      
  
  sim2_e6_rep$kurt[i] = kurtosis(lm_delta_p$residuals)
  
  sim2_e6_rep$f_min[i] = min(data$f)
  sim2_e6_rep$f_max[i] = max(data$f)
  
  sim2_e6_rep$delta_s0[i] = summary(lm_delta_p)$coefficients[1,1]
  sim2_e6_rep$se_delta_s0[i] = summary(lm_delta_p)$coefficients[1,2]
  sim2_e6_rep$epsilon_p[i] = summary(lm_delta_p)$coefficients[2,1]
  sim2_e6_rep$se_epsilon_p[i] = summary(lm_delta_p)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_alpha
  lm_delta_alpha <- lm(delta_alpha ~ `-flnf/(1-f)`, data = data)
  
  sim2_e6_rep$RMSE_delta_alpha[i] = rmse(model = lm_delta_alpha, 
                                               data = data)
  sim2_e6_rep$R_squared_delta_alpha[i] = summary(lm_delta_alpha)$r.squared  
  sim2_e6_rep$epsilon_alpha[i] =summary(lm_delta_alpha)$coefficients[2,1]
  sim2_e6_rep$se_epsilon_alpha[i] =
    summary(lm_delta_alpha)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_beta  
  lm_delta_beta <- lm(delta_beta ~ `-flnf/(1-f)`, data = data)
  
  sim2_e6_rep$RMSE_delta_beta[i] = rmse(model = lm_delta_beta, 
                                        data = data)
  sim2_e6_rep$R_squared_delta_beta[i] = summary(lm_delta_beta)$r.squared  
  sim2_e6_rep$epsilon_beta[i] = summary(lm_delta_beta)$coefficients[2,1]
  sim2_e6_rep$se_epsilon_beta[i]=summary(lm_delta_beta)$coefficients[2,2]
  
  #Convert standard Rayleigh epsilon_p to fractionation factor (ff_p)
  sim2_e6_rep$ff_p[i] = 1 + lm_delta_p$coefficients[2]/1000
  sim2_e6_rep$se_ff_p[i] = summary(lm_delta_p)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_alpha to fractionation factor (ff_alpha)
  sim2_e6_rep$ff_alpha[i] = 1 + lm_delta_alpha$coefficients[2]/1000
  sim2_e6_rep$se_ff_alpha[i] = summary(lm_delta_alpha)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_beta to fractionation factor (ff_beta)
  sim2_e6_rep$ff_beta[i] = 1 + lm_delta_beta$coefficients[2]/1000
  sim2_e6_rep$se_ff_beta[i] = summary(lm_delta_beta)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_p to KIE (KIE_p)
  sim2_e6_rep$KIE_p[i] = 1000/
    (as.numeric(coef(lm_delta_p)[2]) +1000)
  sim2_e6_rep$se_KIE_p[i] = abs(
      -1/(as.numeric(coef(lm_delta_p)[2])/1000 + 1)^2*
        summary(lm_delta_p)$coefficients[2,2]/1000) #abs(-1/(ff_p)^2*se_ff_p)
   
   #Convert standard Rayleigh epsilon_alpha to KIE (KIE_alpha)
   sim2_e6_rep$KIE_alpha[i] = 1000/
    (as.numeric(coef(lm_delta_alpha)[2]) +1000)
   sim2_e6_rep$se_KIE_alpha[i] = abs(
      -1/(as.numeric(coef(lm_delta_alpha)[2])/1000 + 1)^2*
        summary(lm_delta_alpha)$coefficients[2,2]/1000)
   
   #Convert standard Rayleigh epsilon_beta to KIE (KIE_beta)
   sim2_e6_rep$KIE_beta[i] = 1000/
    (as.numeric(coef(lm_delta_beta)[2]) +1000)
   sim2_e6_rep$se_KIE_beta[i] = abs(
      -1/(as.numeric(coef(lm_delta_beta)[2])/1000 + 1)^2*
        summary(lm_delta_beta)$coefficients[2,2]/1000)
   
  #Calculate est_diff for epsilon values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e6_rep$diff_epsilon_p[i] =
    abs((sim2_e6_rep$epsilon_p[i] - sim2_tb2$epsilon_bulk[1])/
          sim2_tb2$epsilon_bulk[1])
  
  sim2_e6_rep$diff_epsilon_alpha[i] =
    abs((sim2_e6_rep$epsilon_alpha[i] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e6_rep$diff_epsilon_beta[i] =
    abs((sim2_e6_rep$epsilon_beta[i] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e6_rep$diff_ff_p[i] =
    abs((sim2_e6_rep$ff_p[i] - sim2_tb2$ff_p[1])/
          sim2_tb2$ff_p[1])
  
  sim2_e6_rep$diff_ff_alpha[i] =
    abs((sim2_e6_rep$ff_alpha[i] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e6_rep$diff_ff_beta[i] =
    abs((sim2_e6_rep$ff_beta[i] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (standard Rayleigh equation)
  #absolute relative difference = |(est-true)/true|
  sim2_e6_rep$diff_KIE_p[i] =
    abs((sim2_e6_rep$KIE_p[i] - sim2_tb2$KIE_p[1])/
          sim2_tb2$KIE_p[1])
  
  sim2_e6_rep$diff_KIE_alpha[i] =
    abs((sim2_e6_rep$KIE_alpha[i] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e6_rep$diff_KIE_beta[i] =
    abs((sim2_e6_rep$KIE_beta[i] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #add p-value for epsilon_p from standard Rayleigh equation (slope of linear model)
  sim2_e6_rep$pval[i] = summary(lm_delta_p)$coefficients[2, 4]
  
  #Add p-value for slope of linear Rayleigh where y = delta_alpha or delta_beta
  sim2_e6_rep$pval_slope_delta_alpha[i] = summary(lm_delta_alpha)$coefficients[2, 4]
  sim2_e6_rep$pval_slope_delta_beta[i] = summary(lm_delta_beta)$coefficients[2, 4]  
   
#Apply nonlinear model 1.2 (sim_formula_nls1.2) (defined above)
  nls1.2 <- nls(sim_formula_nls1.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e6_rep$RMSE_delta_p[(n + i)] = rmse(nls1.2, data = data)

  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls1.2_delta_p_res <- nlsResiduals(nls1.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls1.2_delta_p_residuals = nls1.2_delta_p_res$resi1[ ,2]
)

  nls1.2_delta_p_lev <- car::leveneTest(nls1.2_delta_p_residuals ~ replicate, data = data)
  sim2_e6_rep$levene_delta_p_res[(n + i)] = nls1.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls1.2_delta_p_JB <- jarque.test(data$nls1.2_delta_p_residuals)
  sim2_e6_rep$JB_delta_p_res[(n + i)] = nls1.2_delta_p_JB$p.value
  
  #Skewness and kurtosis for nls1.2
  sim2_e6_rep$skew[(n + i)] = skewness(data$nls1.2_delta_p_residuals)
  
  if(sim2_e6_rep$skew[(n + i)] < -0.5) {
    sim2_e6_rep$skew_factor[(n + i)] = 2 #left-skew = 2
  } else if(sim2_e6_rep$skew[(n + i)] >= -0.5 & sim2_e6_rep$skew[(n + i)] <= 0.5) {
    sim2_e6_rep$skew_factor[(n + i)] = 1 #no skew = 1
  } else if (sim2_e6_rep$skew[(n + i)] > 0.5) {
    sim2_e6_rep$skew_factor[(n + i)] = 3 #right-skew = 3
  }
  
  sim2_e6_rep$kurt[(n + i)] = kurtosis(data$nls1.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls1.2 rows for indexing (same for all models)
  sim2_e6_rep$lm_skew_factor[(n + i)] = sim2_e6_rep$skew_factor[i]  
  
  #Calculate rho and tau for nls1.2
  sim2_e6_rep$rho[(n + i)] = coef(nls1.2)
  sim2_e6_rep$se_rho[(n + i)] = summary(nls1.2)$coefficients[1,2]
  
  sim2_e6_rep$tau[(n + i)] = mean(data$tau)
  sim2_e6_rep$se_tau[(n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e6_rep$f_min[(n + i)] = min(data$f)
  sim2_e6_rep$f_max[(n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e6_rep$ff_alpha[(n + i)] = 
    (coef(nls1.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls1.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e6_rep$se_ff_alpha[(n+i)] = 
  sqrt((sim2_e6_rep$ff_p[i]/sim2_e6_rep$tau[(n + i)]*sim2_e6_rep$se_rho[(n + i)])^2 + (-coef(nls1.2)*sim2_e6_rep$ff_p[i]/sim2_e6_rep$tau[(n + i)]^2*sim2_e6_rep$se_tau[(n + i)])^2+ (coef(nls1.2)/sim2_e6_rep$tau[(n + i)]*sim2_e6_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_alpha and se_epsilon_alpha (nls1.2):
  sim2_e6_rep$epsilon_alpha[(n + i)] = 1000*(sim2_e6_rep$ff_alpha[(n + i)] - 1)
  
  sim2_e6_rep$se_epsilon_alpha[(n + i)] =
    1000*sim2_e6_rep$se_ff_alpha[(n + i)]
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e6_rep$ff_beta[(n + i)] = 
    (1-coef(nls1.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls1.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e6_rep$se_ff_beta[(n + i)] = sqrt((-sim2_e6_rep$ff_p[i]/(1-mean(data$tau))*sim2_e6_rep$se_rho[(n + i)])^2 + ((1-coef(nls1.2))*sim2_e6_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e6_rep$se_tau[(n + i)])^2 + ((1-coef(nls1.2))/(1-mean(data$tau))*sim2_e6_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_beta and se_epsilon_beta (nls1.2):
  sim2_e6_rep$epsilon_beta[(n + i)] = 
    1000*(sim2_e6_rep$ff_beta[(n + i)] -1)
  sim2_e6_rep$se_epsilon_beta[(n + i)] =
    1000*sim2_e6_rep$se_ff_beta[(n + i)]
  
  #Calculate KIE_alpha and KIE_beta (nls1.2):
  sim2_e6_rep$KIE_alpha[(n + i)] = 1000/(sim2_e6_rep$epsilon_alpha[(n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e6_rep$se_KIE_alpha[(n + i)] = abs((-1/sim2_e6_rep$ff_alpha[(n + i)]^2)*sim2_e6_rep$se_ff_alpha[(n+i)])
  
  sim2_e6_rep$KIE_beta[(n + i)] = 1000/(sim2_e6_rep$epsilon_beta[(n + i)] +1000)
  
  sim2_e6_rep$se_KIE_beta[(n + i)] = abs((-1/sim2_e6_rep$ff_beta[(n + i)]^2)*sim2_e6_rep$se_ff_beta[(n+i)])
  
  #Calculate est_diff for epsilon values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e6_rep$diff_epsilon_alpha[(n + i)] =
    abs((sim2_e6_rep$epsilon_alpha[(n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e6_rep$diff_epsilon_beta[(n + i)] =
    abs((sim2_e6_rep$epsilon_beta[(n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e6_rep$diff_ff_alpha[(n + i)] =
    abs((sim2_e6_rep$ff_alpha[(n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e6_rep$diff_ff_beta[(n + i)] =
    abs((sim2_e6_rep$ff_beta[(n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e6_rep$diff_KIE_alpha[(n + i)] =
    abs((sim2_e6_rep$KIE_alpha[(n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e6_rep$diff_KIE_beta[(n + i)] =
    abs((sim2_e6_rep$KIE_beta[(n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls1.2)
  sim2_e6_rep$diff_rho[(n + i)] = 
    abs((sim2_e6_rep$rho[(n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))
  
  #add p-value for rho (parameter estimated from nls1.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls1.2)$coefficients[1, 1] - 0.5)/
    summary(nls1.2)$coefficients[1, 2]
  sim2_e6_rep$pval[(n + i)] = 2*pt(q = t_test, df = df.residual(nls1.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e6_rep$pval_rho_0[(n + i)] = summary(nls1.2)$coefficients[1, 4]
  
  
#Apply nonlinear model 2.2 (sim_formula_nls2.2) (defined above)
  nls2.2 <- nls(sim_formula_nls2.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e6_rep$RMSE_delta_p[(2*n + i)] = rmse(nls2.2, data = data)
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls2.2_delta_p_res <- nlsResiduals(nls2.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls2.2_delta_p_residuals = nls2.2_delta_p_res$resi1[ ,2]
)

  nls2.2_delta_p_lev <- car::leveneTest(nls2.2_delta_p_residuals ~ replicate, data = data)
  sim2_e6_rep$levene_delta_p_res[(2*n + i)] = nls2.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls2.2_delta_p_JB <- jarque.test(data$nls2.2_delta_p_residuals)
  sim2_e6_rep$JB_delta_p_res[(2*n + i)] = nls2.2_delta_p_JB$p.value   
  
  #Skewness and kurtosis for nls2.2
  sim2_e6_rep$skew[(2*n + i)] = skewness(data$nls2.2_delta_p_residuals)
  
  if(sim2_e6_rep$skew[(2*n + i)] < -0.5) {
    sim2_e6_rep$skew_factor[(2*n + i)] = 2 #left-skew = 2
  } else if(sim2_e6_rep$skew[(2*n + i)] >= -0.5 & sim2_e6_rep$skew[(2*n + i)] <= 0.5) {
    sim2_e6_rep$skew_factor[(2*n + i)] = 1 #no skew = 1
  } else if (sim2_e6_rep$skew[(2*n + i)] > 0.5) {
    sim2_e6_rep$skew_factor[(2*n + i)] = 3 #right-skew = 3
  }
  
  sim2_e6_rep$kurt[(2*n + i)] = kurtosis(data$nls2.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls2.2 rows for indexing (same for all models)
  sim2_e6_rep$lm_skew_factor[(2*n + i)] = sim2_e6_rep$skew_factor[i]   
  
  #Calculate rho and tau for nls2.2
  sim2_e6_rep$rho[(2*n + i)] = coef(nls2.2)
  sim2_e6_rep$se_rho[(2*n + i)] = summary(nls2.2)$coefficients[1,2]
  
  sim2_e6_rep$tau[(2*n + i)] = mean(data$tau)
  sim2_e6_rep$se_tau[(2*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e6_rep$f_min[(2*n + i)] = min(data$f)
  sim2_e6_rep$f_max[(2*n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e6_rep$ff_alpha[(2*n + i)] = 
    (coef(nls2.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls2.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e6_rep$se_ff_alpha[(2*n + i)] = 
  sqrt((sim2_e6_rep$ff_p[i]/sim2_e6_rep$tau[(2*n + i)]*sim2_e6_rep$se_rho[(2*n + i)])^2 + (-coef(nls2.2)*sim2_e6_rep$ff_p[i]/sim2_e6_rep$tau[(2*n + i)]^2*sim2_e6_rep$se_tau[(2*n + i)])^2+ (coef(nls2.2)/sim2_e6_rep$tau[(2*n + i)]*sim2_e6_rep$se_ff_p[i])^2)
    
  #Calculate epsilon_alpha and se_epsilon_alpha (nls2.2):
  sim2_e6_rep$epsilon_alpha[(2*n + i)] = 1000*(sim2_e6_rep$ff_alpha[(2*n + i)] - 1)
  
  sim2_e6_rep$se_epsilon_alpha[(2*n + i)] =
    1000*sim2_e6_rep$se_ff_alpha[(2*n + i)]  
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e6_rep$ff_beta[(2*n + i)] = 
    (1-coef(nls2.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)  
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls2.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e6_rep$se_ff_beta[(2*n + i)] = sqrt((-sim2_e6_rep$ff_p[i]/(1-mean(data$tau))*sim2_e6_rep$se_rho[(2*n + i)])^2 + ((1-coef(nls2.2))*sim2_e6_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e6_rep$se_tau[(2*n + i)])^2 + ((1-coef(nls2.2))/(1-mean(data$tau))*sim2_e6_rep$se_ff_p[i])^2) 
  
  #Calculate epsilon_beta and se_epsilon_beta (nls2.2):
  sim2_e6_rep$epsilon_beta[(2*n + i)] = 
    1000*(sim2_e6_rep$ff_beta[(2*n + i)] -1)
  sim2_e6_rep$se_epsilon_beta[(2*n + i)] =
    1000*sim2_e6_rep$se_ff_beta[(2*n + i)]  
  
  #Calculate KIE_alpha and KIE_beta (nls2.2):
  sim2_e6_rep$KIE_alpha[(2*n + i)] = 1000/(sim2_e6_rep$epsilon_alpha[(2*n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e6_rep$se_KIE_alpha[(2*n + i)] = abs((-1/sim2_e6_rep$ff_alpha[(2*n + i)]^2)*sim2_e6_rep$se_ff_alpha[(2*n + i)])
  
  sim2_e6_rep$KIE_beta[(2*n + i)] = 1000/(sim2_e6_rep$epsilon_beta[(2*n + i)] +1000)
  
  sim2_e6_rep$se_KIE_beta[(2*n + i)] = abs((-1/sim2_e6_rep$ff_beta[(2*n + i)]^2)*sim2_e6_rep$se_ff_beta[(2*n + i)])
  
  #Calculate est_diff for epsilon values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e5_rep$diff_epsilon_alpha[(2*n + i)] =
    abs((sim2_e5_rep$epsilon_alpha[(2*n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e5_rep$diff_epsilon_beta[(2*n + i)] =
    abs((sim2_e5_rep$epsilon_beta[(2*n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])  
  
  #Calculate est_diff for ff values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e6_rep$diff_ff_alpha[(2*n + i)] =
    abs((sim2_e6_rep$ff_alpha[(2*n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e6_rep$diff_ff_beta[(2*n + i)] =
    abs((sim2_e6_rep$ff_beta[(2*n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e6_rep$diff_KIE_alpha[(2*n + i)] =
    abs((sim2_e6_rep$KIE_alpha[(2*n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e6_rep$diff_KIE_beta[(2*n + i)] =
    abs((sim2_e6_rep$KIE_beta[(2*n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls2.2)
  sim2_e6_rep$diff_rho[(2*n + i)] = 
    abs((sim2_e6_rep$rho[(2*n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))  
  
  #add p-value for rho (parameter estimated from nls2.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls2.2)$coefficients[1, 1] - 0.5)/
    summary(nls2.2)$coefficients[1, 2]
  sim2_e6_rep$pval[(2*n + i)] = 2*pt(q = t_test, df = df.residual(nls2.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e6_rep$pval_rho_0[(2*n + i)] = summary(nls2.2)$coefficients[1, 4]
  
#average tau "model"
  #Calculate tau (same for all three models)
  sim2_e6_rep$tau[(3*n + i)] = mean(data$tau)
  sim2_e6_rep$se_tau[(3*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e6_rep$f_min[(3*n + i)] = min(data$f)
  sim2_e6_rep$f_max[(3*n + i)] = max(data$f)  
  
  sim2_e6_rep$skew[(3*n + i)] = skewness(data$tau)
  
  if(sim2_e6_rep$skew[(3*n + i)] < -0.5) {
    sim2_e6_rep$skew_factor[(3*n + i)] = 2 #left-skew = 2
  } else if(sim2_e6_rep$skew[(3*n + i)] >= -0.5 & sim2_e6_rep$skew[(3*n + i)] <= 0.5) {
    sim2_e6_rep$skew_factor[(3*n + i)] = 1 #no skew = 1
  } else if (sim2_e6_rep$skew[(3*n + i)] > 0.5) {
    sim2_e6_rep$skew_factor[(3*n + i)] = 3 #right-skew = 3
  }  
  
  sim2_e6_rep$kurt[(3*n + i)] = kurtosis(data$tau)
  
  #Add lm_skew_factor to average tau rows for indexing (same for all models)
  sim2_e6_rep$lm_skew_factor[(3*n + i)] = sim2_e6_rep$skew_factor[i] 
  
  #Calculate est_diff for tau value (same for linear and nonlinear models)
  sim2_e6_rep$diff_tau[(3*n + i)] = 
    abs((sim2_e6_rep$tau[(3*n + i)] - mean(sim2_tb2$tau, na.rm = TRUE))/
          mean(sim2_tb2$tau, na.rm = TRUE))   
  
  #Calculate p-value for average tau. Null hypothesis: tau = 0.5
  sim2_e6_rep$pval[(3*n + i)] = t.test(data$tau, mu = 0.5)$p.value
  
  #Calculate pval_tau_mean. Null hypothesis: tau = mean tau value from sim2 (no error dataset)
  sim2_e6_rep$pval_tau_mean[(3*n + i)] = t.test(data$tau, mu = mean(sim2_tb2$tau, na.rm = TRUE))$p.value
}


#Filter by skewness in linear model
sim2_e6_lm_left_skew <- filter(sim2_e6_rep[1:n, ], skew < -0.5)
sim2_e6_lm_no_skew <- filter(sim2_e6_rep[1:n, ], skew >= -0.5 & skew <= 0.5)
sim2_e6_lm_right_skew <- filter(sim2_e6_rep[1:n, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e6_nls1_left_skew <- filter(sim2_e6_rep[(n + 1):(n + n), ], skew < -0.5)
sim2_e6_nls1_no_skew <- filter(sim2_e6_rep[(n + 1):(n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e6_nls1_right_skew <- filter(sim2_e6_rep[(n + 1):(n + n), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e6_nls2_left_skew <- filter(sim2_e6_rep[(2*n + 1):(2*n + n), ], skew < -0.5)
sim2_e6_nls2_no_skew <- filter(sim2_e6_rep[(2*n + 1):(2*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e6_nls2_right_skew <- filter(sim2_e6_rep[(2*n + 1):(2*n + n), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e6_tau_left_skew <- filter(sim2_e6_rep[(3*n + 1):(3*n + n), ], skew < -0.5)
sim2_e6_tau_no_skew <- filter(sim2_e6_rep[(3*n + 1):(3*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e6_tau_right_skew <- filter(sim2_e6_rep[(3*n + 1):(3*n + n), ], skew > 0.5)

#Filter by lm_skew_factor to select the rows for all four models (linear, nls1, nls2, and average tau) that correspond to datasets with left skew in the linear model.

#For datasets where the lm residuals not skewed or right-skewed, lm_skew_factor == 0 because that iteration was cut short ("next" function) before any non-zero values were stored in the table.

sim2_e6_rep2 <- filter(sim2_e6_rep, lm_skew_factor == 2)
nrep = nrow(sim2_e6_rep2)/m

#Filter by skewness in linear model
sim2_e6_lm_left_skew2 <- filter(sim2_e6_rep2[1:nrep, ], skew < -0.5)

sim2_e6_lm_no_skew2 <- filter(sim2_e6_rep2[1:nrep, ], skew >= -0.5 & skew <= 0.5)

sim2_e6_lm_right_skew2 <- filter(sim2_e6_rep2[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e6_nls1_left_skew2 <- filter(sim2_e6_rep2[(nrep + 1):(nrep + nrep), ], skew < -0.5)

sim2_e6_nls1_no_skew2 <- filter(sim2_e6_rep2[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e6_nls1_right_skew2 <- filter(sim2_e6_rep2[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e6_nls2_left_skew2 <- filter(sim2_e6_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)

sim2_e6_nls2_no_skew2 <- filter(sim2_e6_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e6_nls2_right_skew2 <- filter(sim2_e6_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e6_tau_left_skew2 <- filter(sim2_e6_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)

sim2_e6_tau_no_skew2 <- filter(sim2_e6_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e6_tau_right_skew2 <- filter(sim2_e6_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

#Randomly remove extra rows from sim2_e6_rep2 so that there are 1000 replicates.
nremove <- nrow(sim2_e6_rep2)/m - 1000

#Make indexing vectors to remove the same datasets for each model
v1 <- sample(1:(nrow(sim2_e6_rep2)/m), size = nremove)
v2 <- c(v1, (v1 + nrep), (v1 + 2*nrep), (v1 + 3*nrep))

sim2_e6_rep3 <- sim2_e6_rep2[-v2, ]


#Reset nrep
nrep = nrow(sim2_e6_rep3)/m

#Count the final number of no skew, left skew, and right-skew data in sim2_e6_rep3
#Filter by skewness in linear model
sim2_e6_lm_left_skew3 <- filter(sim2_e6_rep3[1:nrep, ], skew < -0.5)
sim2_e6_lm_no_skew3 <- filter(sim2_e6_rep3[1:nrep, ], skew >= -0.5 & skew <= 0.5)
sim2_e6_lm_right_skew3 <- filter(sim2_e6_rep3[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e6_nls1_left_skew3 <- filter(sim2_e6_rep3[(nrep + 1):(nrep + nrep), ], skew < -0.5)
sim2_e6_nls1_no_skew3 <- filter(sim2_e6_rep3[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e6_nls1_right_skew3 <- filter(sim2_e6_rep3[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e6_nls2_left_skew3 <- filter(sim2_e6_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)
sim2_e6_nls2_no_skew3 <- filter(sim2_e6_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e6_nls2_right_skew3 <- filter(sim2_e6_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in average tau
sim2_e6_tau_left_skew3 <- filter(sim2_e6_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)
sim2_e6_tau_no_skew3 <- filter(sim2_e6_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e6_tau_right_skew3 <- filter(sim2_e6_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

##Significant p-values for linear model slope
sim2_e6_lm_pval_sig = filter(sim2_e6_rep3[1:nrep, ], pval < 0.05)
sim2_e6_lm_delta_alpha_pval_sig <- filter(sim2_e6_rep3[1:nrep, ], 
                                         pval_slope_delta_alpha < 0.05)
sim2_e6_lm_delta_beta_pval_sig <- filter(sim2_e6_rep3[1:nrep, ], 
                                         pval_slope_delta_beta < 0.05)

##Significant p-values for nls1 rho (coefficient)
sim2_e6_nls1_pval_sig <- filter(sim2_e6_rep3[(nrep + 1):(nrep + nrep), ], pval < 0.05)

##Significant p-values for nls2 rho (coefficient)
sim2_e6_nls2_pval_sig <- filter(sim2_e6_rep3[(2*nrep + 1):(2*nrep + nrep), ], pval < 0.05)

##Significant p-values for tau average
sim2_e6_tau_pval_sig <- filter(sim2_e6_rep3[(3*nrep + 1):(3*nrep + nrep), ], pval < 0.05)

##Average results and calculate standard deviation for sim2_e6_rep3 (low error, left skew) (This code needs to be in same block as the for loop so that nrep doesn't get reset.)

avg_sim2_e6_lm_left_skew <- tibble(
  mean_Ray = colMeans(sim2_e6_rep3[1:nrep, ]),
  mean_nls1 = colMeans(sim2_e6_rep3[(nrep + 1):(nrep + nrep), ]),
  mean_nls2 = colMeans(sim2_e6_rep3[(2*nrep + 1):(2*nrep + nrep), ]),
  mean_tau = colMeans(sim2_e6_rep3[(3*nrep + 1):(3*nrep + nrep), ]),  
  sd_Ray = sapply(sim2_e6_rep3[1:nrep, ], sd),
  sd_nls1 = sapply(sim2_e6_rep3[(nrep + 1):(nrep + nrep), ], sd),
  sd_nls2 = sapply(sim2_e6_rep3[(2*nrep + 1):(2*nrep + nrep), ], sd),
  sd_tau = sapply(sim2_e6_rep3[(3*nrep + 1):(3*nrep + nrep), ], sd)  
) %>% t()  #Flip (transpose) table

colnames(avg_sim2_e6_lm_left_skew) <- colnames(sim2_e6_rep)

avg_sim2_e6_lm_left_skew <- as_tibble(avg_sim2_e6_lm_left_skew, rownames = NA)

```
#Do 1000 simulations w/ low error and right skew (sim2_e7).

Extract the results for the standard Rayleigh model (linear), Expanded Rayleigh models 1 and 2 (nls1.2 and nls2.2), and average tau.

Skewness: Aiming for skewness of residuals for linear model > 0.5

Set omega (skewness) to 0.99

If the skewness of the residuals for the standard (linear) Rayleigh model where y = delta_p is <= 0.5, skip to the next loop.

See notes on sim_loop_e1 for more details.

Right-skewed data: underestimates (Tail on the right, most of the data on the left).
```{r sim_loop_e7}
#Nonlinear model 1.2 (sim_formula_nls1.2)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#Nonlinear model 2.2 (sim_formula_nls2.2)
sim_formula_nls2.2 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#R_std for atmospheric N2 = 0.0036765
R_std = 0.0036765

# n = number of times simulation is repeated (loops)
#n = 1457
#n = 3000
n = 2190

# m = number of models
m = 4

#Make an empty tibble to store the results for each simulation tested on each model.
#Ray = standard Rayleigh model

sim2_e7_rep <- blank_sim_rep(n = n, m = m)

#for loop to generate multiple simulated datasets
set.seed(313)

for (i in 1:n) {
  
#Make the columns in sim2_e7 the appropriate length by filtering
data <- sim2 %>% 
  #Subset data
  filter(f <= 0.75, f >= 0.25)

#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 0.015*sim2_tb2$N_s0[1], 0.99), "SN")  
error_1 <- rsn(n = length(data$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 0.5, 0.99), "SN")  
error_2 <- rsn(n = length(data$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 0.7, 0.99), "SN")  
error_3 <- rsn(n = length(data$N_s), dp = params_3)
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  data <- data %>%
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)%>%
  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        SP = delta_alpha - delta_beta,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        R_std = 0.0036765,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`
         )
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_p
  lm_delta_p <- lm(delta_p ~ `-flnf/(1-f)`, data = data)
  
  #Treat replicate as factor, add lm residuals to data table.
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  lm_delta_p_residuals = lm_delta_p$residuals
)
 
  #Test skewness of residuals for linear model. If no skew or right-skew, skip to the next iteration. (Only zeroes will be stored in rows corresponding to skipped iterations.)
  if(skewness(data$lm_delta_p_residuals) <= 0.5) {
   next
  } 
  
  sim2_e7_rep$Multiple_R_squared[i] = summary(lm_delta_p)$r.squared
  sim2_e7_rep$RMSE_delta_p[i] = rmse(model = lm_delta_p, 
                                     data = data)
  
  #Test for non-constant error variance (store p-value)
  lm_delta_p_ncv <- car::ncvTest(lm_delta_p)
  sim2_e7_rep$lm_delta_p_ncv[i] = lm_delta_p_ncv$p
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  lm_delta_p_lev <- car::leveneTest(lm_delta_p_residuals ~ replicate, data = data)
  sim2_e7_rep$levene_delta_p_res[i] = lm_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  lm_delta_p_JB <- jarque.test(as.vector(data$lm_delta_p_residuals))
  sim2_e7_rep$JB_delta_p_res[i] = lm_delta_p_JB$p.value
  
  #skewness and kurtosis for linear standard Rayleigh model
  sim2_e7_rep$skew[i] = skewness(lm_delta_p$residuals)
  
  if(sim2_e7_rep$skew[i] < -0.5) {
    sim2_e7_rep$skew_factor[i] = 2 #left-skew = 2
  } else if(sim2_e7_rep$skew[i] >= -0.5 & sim2_e7_rep$skew[i] <= 0.5) {
    sim2_e7_rep$skew_factor[i] = 1 #no skew = 1
  } else if (sim2_e7_rep$skew[i] > 0.5) {
    sim2_e7_rep$skew_factor[i] = 3 #right-skew = 3
  }

  sim2_e7_rep$lm_skew_factor[i] = sim2_e7_rep$skew_factor[i]      
  
  sim2_e7_rep$kurt[i] = kurtosis(lm_delta_p$residuals)
  
  sim2_e7_rep$f_min[i] = min(data$f)
  sim2_e7_rep$f_max[i] = max(data$f)
  
  sim2_e7_rep$delta_s0[i] = summary(lm_delta_p)$coefficients[1,1]
  sim2_e7_rep$se_delta_s0[i] = summary(lm_delta_p)$coefficients[1,2]
  sim2_e7_rep$epsilon_p[i] = summary(lm_delta_p)$coefficients[2,1]
  sim2_e7_rep$se_epsilon_p[i] = summary(lm_delta_p)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_alpha
  lm_delta_alpha <- lm(delta_alpha ~ `-flnf/(1-f)`, data = data)
  
  sim2_e7_rep$RMSE_delta_alpha[i] = rmse(model = lm_delta_alpha, 
                                               data = data)
  sim2_e7_rep$R_squared_delta_alpha[i] = summary(lm_delta_alpha)$r.squared  
  sim2_e7_rep$epsilon_alpha[i] =summary(lm_delta_alpha)$coefficients[2,1]
  sim2_e7_rep$se_epsilon_alpha[i] =
    summary(lm_delta_alpha)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_beta  
  lm_delta_beta <- lm(delta_beta ~ `-flnf/(1-f)`, data = data)
  
  sim2_e7_rep$RMSE_delta_beta[i] = rmse(model = lm_delta_beta, 
                                        data = data)
  sim2_e7_rep$R_squared_delta_beta[i] = summary(lm_delta_beta)$r.squared  
  sim2_e7_rep$epsilon_beta[i] = summary(lm_delta_beta)$coefficients[2,1]
  sim2_e7_rep$se_epsilon_beta[i]=summary(lm_delta_beta)$coefficients[2,2]
  
  #Convert standard Rayleigh epsilon_p to fractionation factor (ff_p)
  sim2_e7_rep$ff_p[i] = 1 + lm_delta_p$coefficients[2]/1000
  sim2_e7_rep$se_ff_p[i] = summary(lm_delta_p)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_alpha to fractionation factor (ff_alpha)
  sim2_e7_rep$ff_alpha[i] = 1 + lm_delta_alpha$coefficients[2]/1000
  sim2_e7_rep$se_ff_alpha[i] = summary(lm_delta_alpha)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_beta to fractionation factor (ff_beta)
  sim2_e7_rep$ff_beta[i] = 1 + lm_delta_beta$coefficients[2]/1000
  sim2_e7_rep$se_ff_beta[i] = summary(lm_delta_beta)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_p to KIE (KIE_p)
  sim2_e7_rep$KIE_p[i] = 1000/
    (as.numeric(coef(lm_delta_p)[2]) +1000)
  sim2_e7_rep$se_KIE_p[i] = abs(
      -1/(as.numeric(coef(lm_delta_p)[2])/1000 + 1)^2*
        summary(lm_delta_p)$coefficients[2,2]/1000) #abs(-1/(ff_p)^2*se_ff_p)
   
   #Convert standard Rayleigh epsilon_alpha to KIE (KIE_alpha)
   sim2_e7_rep$KIE_alpha[i] = 1000/
    (as.numeric(coef(lm_delta_alpha)[2]) +1000)
   sim2_e7_rep$se_KIE_alpha[i] = abs(
      -1/(as.numeric(coef(lm_delta_alpha)[2])/1000 + 1)^2*
        summary(lm_delta_alpha)$coefficients[2,2]/1000)
   
   #Convert standard Rayleigh epsilon_beta to KIE (KIE_beta)
   sim2_e7_rep$KIE_beta[i] = 1000/
    (as.numeric(coef(lm_delta_beta)[2]) +1000)
   sim2_e7_rep$se_KIE_beta[i] = abs(
      -1/(as.numeric(coef(lm_delta_beta)[2])/1000 + 1)^2*
        summary(lm_delta_beta)$coefficients[2,2]/1000)
   
  #Calculate est_diff for epsilon values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e7_rep$diff_epsilon_p[i] =
    abs((sim2_e7_rep$epsilon_p[i] - sim2_tb2$epsilon_bulk[1])/
          sim2_tb2$epsilon_bulk[1])
  
  sim2_e7_rep$diff_epsilon_alpha[i] =
    abs((sim2_e7_rep$epsilon_alpha[i] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e7_rep$diff_epsilon_beta[i] =
    abs((sim2_e7_rep$epsilon_beta[i] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e7_rep$diff_ff_p[i] =
    abs((sim2_e7_rep$ff_p[i] - sim2_tb2$ff_p[1])/
          sim2_tb2$ff_p[1])
  
  sim2_e7_rep$diff_ff_alpha[i] =
    abs((sim2_e7_rep$ff_alpha[i] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e7_rep$diff_ff_beta[i] =
    abs((sim2_e7_rep$ff_beta[i] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (standard Rayleigh equation)
  #absolute relative difference = |(est-true)/true|
  sim2_e7_rep$diff_KIE_p[i] =
    abs((sim2_e7_rep$KIE_p[i] - sim2_tb2$KIE_p[1])/
          sim2_tb2$KIE_p[1])
  
  sim2_e7_rep$diff_KIE_alpha[i] =
    abs((sim2_e7_rep$KIE_alpha[i] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e7_rep$diff_KIE_beta[i] =
    abs((sim2_e7_rep$KIE_beta[i] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #add p-value for epsilon_p from standard Rayleigh equation (slope of linear model)
  sim2_e7_rep$pval[i] = summary(lm_delta_p)$coefficients[2, 4]
  
  #Add p-value for slope of linear Rayleigh where y = delta_alpha or delta_beta
  sim2_e7_rep$pval_slope_delta_alpha[i] = summary(lm_delta_alpha)$coefficients[2, 4]
  sim2_e7_rep$pval_slope_delta_beta[i] = summary(lm_delta_beta)$coefficients[2, 4]  
   
#Apply nonlinear model 1.2 (sim_formula_nls1.2) (defined above)
  nls1.2 <- nls(sim_formula_nls1.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e7_rep$RMSE_delta_p[(n + i)] = rmse(nls1.2, data = data)

  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls1.2_delta_p_res <- nlsResiduals(nls1.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls1.2_delta_p_residuals = nls1.2_delta_p_res$resi1[ ,2]
)

  nls1.2_delta_p_lev <- car::leveneTest(nls1.2_delta_p_residuals ~ replicate, data = data)
  sim2_e7_rep$levene_delta_p_res[(n + i)] = nls1.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls1.2_delta_p_JB <- jarque.test(data$nls1.2_delta_p_residuals)
  sim2_e7_rep$JB_delta_p_res[(n + i)] = nls1.2_delta_p_JB$p.value
  
  #Skewness and kurtosis for nls1.2
  sim2_e7_rep$skew[(n + i)] = skewness(data$nls1.2_delta_p_residuals)
  
  if(sim2_e7_rep$skew[(n + i)] < -0.5) {
    sim2_e7_rep$skew_factor[(n + i)] = 2 #left-skew = 2
  } else if(sim2_e7_rep$skew[(n + i)] >= -0.5 & sim2_e7_rep$skew[(n + i)] <= 0.5) {
    sim2_e7_rep$skew_factor[(n + i)] = 1 #no skew = 1
  } else if (sim2_e7_rep$skew[(n + i)] > 0.5) {
    sim2_e7_rep$skew_factor[(n + i)] = 3 #right-skew = 3
  }
  
  sim2_e7_rep$kurt[(n + i)] = kurtosis(data$nls1.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls1.2 rows for indexing (same for all models)
  sim2_e7_rep$lm_skew_factor[(n + i)] = sim2_e7_rep$skew_factor[i]  
  
  #Calculate rho and tau for nls1.2
  sim2_e7_rep$rho[(n + i)] = coef(nls1.2)
  sim2_e7_rep$se_rho[(n + i)] = summary(nls1.2)$coefficients[1,2]
  
  sim2_e7_rep$tau[(n + i)] = mean(data$tau)
  sim2_e7_rep$se_tau[(n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e7_rep$f_min[(n + i)] = min(data$f)
  sim2_e7_rep$f_max[(n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e7_rep$ff_alpha[(n + i)] = 
    (coef(nls1.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls1.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e7_rep$se_ff_alpha[(n+i)] = 
  sqrt((sim2_e7_rep$ff_p[i]/sim2_e7_rep$tau[(n + i)]*sim2_e7_rep$se_rho[(n + i)])^2 + (-coef(nls1.2)*sim2_e7_rep$ff_p[i]/sim2_e7_rep$tau[(n + i)]^2*sim2_e7_rep$se_tau[(n + i)])^2+ (coef(nls1.2)/sim2_e7_rep$tau[(n + i)]*sim2_e7_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_alpha and se_epsilon_alpha (nls1.2):
  sim2_e7_rep$epsilon_alpha[(n + i)] = 1000*(sim2_e7_rep$ff_alpha[(n + i)] - 1)
  
  sim2_e7_rep$se_epsilon_alpha[(n + i)] =
    1000*sim2_e7_rep$se_ff_alpha[(n + i)]
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e7_rep$ff_beta[(n + i)] = 
    (1-coef(nls1.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls1.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e7_rep$se_ff_beta[(n + i)] = sqrt((-sim2_e7_rep$ff_p[i]/(1-mean(data$tau))*sim2_e7_rep$se_rho[(n + i)])^2 + ((1-coef(nls1.2))*sim2_e7_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e7_rep$se_tau[(n + i)])^2 + ((1-coef(nls1.2))/(1-mean(data$tau))*sim2_e7_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_beta and se_epsilon_beta (nls1.2):
  sim2_e7_rep$epsilon_beta[(n + i)] = 
    1000*(sim2_e7_rep$ff_beta[(n + i)] -1)
  sim2_e7_rep$se_epsilon_beta[(n + i)] =
    1000*sim2_e7_rep$se_ff_beta[(n + i)]
  
  #Calculate KIE_alpha and KIE_beta (nls1.2):
  sim2_e7_rep$KIE_alpha[(n + i)] = 1000/(sim2_e7_rep$epsilon_alpha[(n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e7_rep$se_KIE_alpha[(n + i)] = abs((-1/sim2_e7_rep$ff_alpha[(n + i)]^2)*sim2_e7_rep$se_ff_alpha[(n+i)])
  
  sim2_e7_rep$KIE_beta[(n + i)] = 1000/(sim2_e7_rep$epsilon_beta[(n + i)] +1000)
  
  sim2_e7_rep$se_KIE_beta[(n + i)] = abs((-1/sim2_e7_rep$ff_beta[(n + i)]^2)*sim2_e7_rep$se_ff_beta[(n+i)])
  
  #Calculate est_diff for epsilon values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e7_rep$diff_epsilon_alpha[(n + i)] =
    abs((sim2_e7_rep$epsilon_alpha[(n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e7_rep$diff_epsilon_beta[(n + i)] =
    abs((sim2_e7_rep$epsilon_beta[(n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e7_rep$diff_ff_alpha[(n + i)] =
    abs((sim2_e7_rep$ff_alpha[(n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e7_rep$diff_ff_beta[(n + i)] =
    abs((sim2_e7_rep$ff_beta[(n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e7_rep$diff_KIE_alpha[(n + i)] =
    abs((sim2_e7_rep$KIE_alpha[(n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e7_rep$diff_KIE_beta[(n + i)] =
    abs((sim2_e7_rep$KIE_beta[(n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls1.2)
  sim2_e7_rep$diff_rho[(n + i)] = 
    abs((sim2_e7_rep$rho[(n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))
  
  #add p-value for rho (parameter estimated from nls1.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls1.2)$coefficients[1, 1] - 0.5)/
    summary(nls1.2)$coefficients[1, 2]
  sim2_e7_rep$pval[(n + i)] = 2*pt(q = t_test, df = df.residual(nls1.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e7_rep$pval_rho_0[(n + i)] = summary(nls1.2)$coefficients[1, 4]
  
  
#Apply nonlinear model 2.2 (sim_formula_nls2.2) (defined above)
  nls2.2 <- nls(sim_formula_nls2.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e7_rep$RMSE_delta_p[(2*n + i)] = rmse(nls2.2, data = data)
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls2.2_delta_p_res <- nlsResiduals(nls2.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls2.2_delta_p_residuals = nls2.2_delta_p_res$resi1[ ,2]
)

  nls2.2_delta_p_lev <- car::leveneTest(nls2.2_delta_p_residuals ~ replicate, data = data)
  sim2_e7_rep$levene_delta_p_res[(2*n + i)] = nls2.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls2.2_delta_p_JB <- jarque.test(data$nls2.2_delta_p_residuals)
  sim2_e7_rep$JB_delta_p_res[(2*n + i)] = nls2.2_delta_p_JB$p.value   
  
  #Skewness and kurtosis for nls2.2
  sim2_e7_rep$skew[(2*n + i)] = skewness(data$nls2.2_delta_p_residuals)
  
  if(sim2_e7_rep$skew[(2*n + i)] < -0.5) {
    sim2_e7_rep$skew_factor[(2*n + i)] = 2 #left-skew = 2
  } else if(sim2_e7_rep$skew[(2*n + i)] >= -0.5 & sim2_e7_rep$skew[(2*n + i)] <= 0.5) {
    sim2_e7_rep$skew_factor[(2*n + i)] = 1 #no skew = 1
  } else if (sim2_e7_rep$skew[(2*n + i)] > 0.5) {
    sim2_e7_rep$skew_factor[(2*n + i)] = 3 #right-skew = 3
  }
  
  sim2_e7_rep$kurt[(2*n + i)] = kurtosis(data$nls2.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls2.2 rows for indexing (same for all models)
  sim2_e7_rep$lm_skew_factor[(2*n + i)] = sim2_e7_rep$skew_factor[i]   
  
  #Calculate rho and tau for nls2.2
  sim2_e7_rep$rho[(2*n + i)] = coef(nls2.2)
  sim2_e7_rep$se_rho[(2*n + i)] = summary(nls2.2)$coefficients[1,2]
  
  sim2_e7_rep$tau[(2*n + i)] = mean(data$tau)
  sim2_e7_rep$se_tau[(2*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e7_rep$f_min[(2*n + i)] = min(data$f)
  sim2_e7_rep$f_max[(2*n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e7_rep$ff_alpha[(2*n + i)] = 
    (coef(nls2.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls2.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e7_rep$se_ff_alpha[(2*n + i)] = 
  sqrt((sim2_e7_rep$ff_p[i]/sim2_e7_rep$tau[(2*n + i)]*sim2_e7_rep$se_rho[(2*n + i)])^2 + (-coef(nls2.2)*sim2_e7_rep$ff_p[i]/sim2_e7_rep$tau[(2*n + i)]^2*sim2_e7_rep$se_tau[(2*n + i)])^2+ (coef(nls2.2)/sim2_e7_rep$tau[(2*n + i)]*sim2_e7_rep$se_ff_p[i])^2)
    
  #Calculate epsilon_alpha and se_epsilon_alpha (nls2.2):
  sim2_e7_rep$epsilon_alpha[(2*n + i)] = 1000*(sim2_e7_rep$ff_alpha[(2*n + i)] - 1)
  
  sim2_e7_rep$se_epsilon_alpha[(2*n + i)] =
    1000*sim2_e7_rep$se_ff_alpha[(2*n + i)]  
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e7_rep$ff_beta[(2*n + i)] = 
    (1-coef(nls2.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)  
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls2.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e7_rep$se_ff_beta[(2*n + i)] = sqrt((-sim2_e7_rep$ff_p[i]/(1-mean(data$tau))*sim2_e7_rep$se_rho[(2*n + i)])^2 + ((1-coef(nls2.2))*sim2_e7_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e7_rep$se_tau[(2*n + i)])^2 + ((1-coef(nls2.2))/(1-mean(data$tau))*sim2_e7_rep$se_ff_p[i])^2) 
  
  #Calculate epsilon_beta and se_epsilon_beta (nls2.2):
  sim2_e7_rep$epsilon_beta[(2*n + i)] = 
    1000*(sim2_e7_rep$ff_beta[(2*n + i)] -1)
  sim2_e7_rep$se_epsilon_beta[(2*n + i)] =
    1000*sim2_e7_rep$se_ff_beta[(2*n + i)]  
  
  #Calculate KIE_alpha and KIE_beta (nls2.2):
  sim2_e7_rep$KIE_alpha[(2*n + i)] = 1000/(sim2_e7_rep$epsilon_alpha[(2*n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e7_rep$se_KIE_alpha[(2*n + i)] = abs((-1/sim2_e7_rep$ff_alpha[(2*n + i)]^2)*sim2_e7_rep$se_ff_alpha[(2*n + i)])
  
  sim2_e7_rep$KIE_beta[(2*n + i)] = 1000/(sim2_e7_rep$epsilon_beta[(2*n + i)] +1000)
  
  sim2_e7_rep$se_KIE_beta[(2*n + i)] = abs((-1/sim2_e7_rep$ff_beta[(2*n + i)]^2)*sim2_e7_rep$se_ff_beta[(2*n + i)])
  
  #Calculate est_diff for epsilon values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e7_rep$diff_epsilon_alpha[(2*n + i)] =
    abs((sim2_e7_rep$epsilon_alpha[(2*n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e7_rep$diff_epsilon_beta[(2*n + i)] =
    abs((sim2_e7_rep$epsilon_beta[(2*n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])  
  
  #Calculate est_diff for ff values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e7_rep$diff_ff_alpha[(2*n + i)] =
    abs((sim2_e7_rep$ff_alpha[(2*n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e7_rep$diff_ff_beta[(2*n + i)] =
    abs((sim2_e7_rep$ff_beta[(2*n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e7_rep$diff_KIE_alpha[(2*n + i)] =
    abs((sim2_e7_rep$KIE_alpha[(2*n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e7_rep$diff_KIE_beta[(2*n + i)] =
    abs((sim2_e7_rep$KIE_beta[(2*n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls2.2)
  sim2_e7_rep$diff_rho[(2*n + i)] = 
    abs((sim2_e7_rep$rho[(2*n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))  
  
  #add p-value for rho (parameter estimated from nls2.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls2.2)$coefficients[1, 1] - 0.5)/
    summary(nls2.2)$coefficients[1, 2]
  sim2_e7_rep$pval[(2*n + i)] = 2*pt(q = t_test, df = df.residual(nls2.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e7_rep$pval_rho_0[(2*n + i)] = summary(nls2.2)$coefficients[1, 4]
  
#average tau "model"
  #Calculate tau (same for all three models)
  sim2_e7_rep$tau[(3*n + i)] = mean(data$tau)
  sim2_e7_rep$se_tau[(3*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e7_rep$f_min[(3*n + i)] = min(data$f)
  sim2_e7_rep$f_max[(3*n + i)] = max(data$f)  
  
  sim2_e7_rep$skew[(3*n + i)] = skewness(data$tau)
  
  if(sim2_e7_rep$skew[(3*n + i)] < -0.5) {
    sim2_e7_rep$skew_factor[(3*n + i)] = 2 #left-skew = 2
  } else if(sim2_e7_rep$skew[(3*n + i)] >= -0.5 & sim2_e7_rep$skew[(3*n + i)] <= 0.5) {
    sim2_e7_rep$skew_factor[(3*n + i)] = 1 #no skew = 1
  } else if (sim2_e7_rep$skew[(3*n + i)] > 0.5) {
    sim2_e7_rep$skew_factor[(3*n + i)] = 3 #right-skew = 3
  }  
  
  sim2_e7_rep$kurt[(3*n + i)] = kurtosis(data$tau)
  
  #Add lm_skew_factor to average tau rows for indexing (same for all models)
  sim2_e7_rep$lm_skew_factor[(3*n + i)] = sim2_e7_rep$skew_factor[i] 
  
  #Calculate est_diff for tau value (same for linear and nonlinear models)
  sim2_e7_rep$diff_tau[(3*n + i)] = 
    abs((sim2_e7_rep$tau[(3*n + i)] - mean(sim2_tb2$tau, na.rm = TRUE))/
          mean(sim2_tb2$tau, na.rm = TRUE))   
  
  #Calculate p-value for average tau. Null hypothesis: tau = 0.5
  sim2_e7_rep$pval[(3*n + i)] = t.test(data$tau, mu = 0.5)$p.value
  
  #Calculate pval_tau_mean. Null hypothesis: tau = mean tau value from sim2 (no error dataset)
  sim2_e7_rep$pval_tau_mean[(3*n + i)] = t.test(data$tau, mu = mean(sim2_tb2$tau, na.rm = TRUE))$p.value
}


#Filter by skewness in linear model
sim2_e7_lm_left_skew <- filter(sim2_e7_rep[1:n, ], skew < -0.5)
sim2_e7_lm_no_skew <- filter(sim2_e7_rep[1:n, ], skew >= -0.5 & skew <= 0.5)
sim2_e7_lm_right_skew <- filter(sim2_e7_rep[1:n, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e7_nls1_left_skew <- filter(sim2_e7_rep[(n + 1):(n + n), ], skew < -0.5)
sim2_e7_nls1_no_skew <- filter(sim2_e7_rep[(n + 1):(n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e7_nls1_right_skew <- filter(sim2_e7_rep[(n + 1):(n + n), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e7_nls2_left_skew <- filter(sim2_e7_rep[(2*n + 1):(2*n + n), ], skew < -0.5)
sim2_e7_nls2_no_skew <- filter(sim2_e7_rep[(2*n + 1):(2*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e7_nls2_right_skew <- filter(sim2_e7_rep[(2*n + 1):(2*n + n), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e7_tau_left_skew <- filter(sim2_e7_rep[(3*n + 1):(3*n + n), ], skew < -0.5)
sim2_e7_tau_no_skew <- filter(sim2_e7_rep[(3*n + 1):(3*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e7_tau_right_skew <- filter(sim2_e7_rep[(3*n + 1):(3*n + n), ], skew > 0.5)

#Filter by lm_skew_factor to select the rows for all four models (linear, nls1, nls2, and average tau) that correspond to datasets with right skew in the linear model.

#For datasets where the lm residuals are left skewed or not skewed, lm_skew_factor == 0 because that iteration was cut short ("next" function) before any non-zero values were stored in the table.

sim2_e7_rep2 <- filter(sim2_e7_rep, lm_skew_factor == 3)
nrep = nrow(sim2_e7_rep2)/m

#Filter by skewness in linear model
sim2_e7_lm_left_skew2 <- filter(sim2_e7_rep2[1:nrep, ], skew < -0.5)

sim2_e7_lm_no_skew2 <- filter(sim2_e7_rep2[1:nrep, ], skew >= -0.5 & skew <= 0.5)

sim2_e7_lm_right_skew2 <- filter(sim2_e7_rep2[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e7_nls1_left_skew2 <- filter(sim2_e7_rep2[(nrep + 1):(nrep + nrep), ], skew < -0.5)

sim2_e7_nls1_no_skew2 <- filter(sim2_e7_rep2[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e7_nls1_right_skew2 <- filter(sim2_e7_rep2[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e7_nls2_left_skew2 <- filter(sim2_e7_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)

sim2_e7_nls2_no_skew2 <- filter(sim2_e7_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e7_nls2_right_skew2 <- filter(sim2_e7_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e7_tau_left_skew2 <- filter(sim2_e7_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)

sim2_e7_tau_no_skew2 <- filter(sim2_e7_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e7_tau_right_skew2 <- filter(sim2_e7_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

#Randomly remove extra rows from sim2_e7_rep2 so that there are 1000 replicates.
nremove <- nrow(sim2_e7_rep2)/m - 1000

#Make indexing vectors to remove the same datasets for each model
v1 <- sample(1:(nrow(sim2_e7_rep2)/m), size = nremove)
v2 <- c(v1, (v1 + nrep), (v1 + 2*nrep), (v1 + 3*nrep))

sim2_e7_rep3 <- sim2_e7_rep2[-v2, ]


#Reset nrep
nrep = nrow(sim2_e7_rep3)/m

#Count the final number of no skew, left skew, and right-skew data in sim2_e7_rep3
#Filter by skewness in linear model
sim2_e7_lm_left_skew3 <- filter(sim2_e7_rep3[1:nrep, ], skew < -0.5)
sim2_e7_lm_no_skew3 <- filter(sim2_e7_rep3[1:nrep, ], skew >= -0.5 & skew <= 0.5)
sim2_e7_lm_right_skew3 <- filter(sim2_e7_rep3[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e7_nls1_left_skew3 <- filter(sim2_e7_rep3[(nrep + 1):(nrep + nrep), ], skew < -0.5)
sim2_e7_nls1_no_skew3 <- filter(sim2_e7_rep3[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e7_nls1_right_skew3 <- filter(sim2_e7_rep3[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e7_nls2_left_skew3 <- filter(sim2_e7_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)
sim2_e7_nls2_no_skew3 <- filter(sim2_e7_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e7_nls2_right_skew3 <- filter(sim2_e7_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in average tau
sim2_e7_tau_left_skew3 <- filter(sim2_e7_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)
sim2_e7_tau_no_skew3 <- filter(sim2_e7_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e7_tau_right_skew3 <- filter(sim2_e7_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

##Significant p-values for linear model slope
sim2_e7_lm_pval_sig = filter(sim2_e7_rep3[1:nrep, ], pval < 0.05)
sim2_e7_lm_delta_alpha_pval_sig <- filter(sim2_e7_rep3[1:nrep, ], 
                                         pval_slope_delta_alpha < 0.05)
sim2_e7_lm_delta_beta_pval_sig <- filter(sim2_e7_rep3[1:nrep, ], 
                                         pval_slope_delta_beta < 0.05)

##Significant p-values for nls1 rho (coefficient)
sim2_e7_nls1_pval_sig <- filter(sim2_e7_rep3[(nrep + 1):(nrep + nrep), ], pval < 0.05)

##Significant p-values for nls2 rho (coefficient)
sim2_e7_nls2_pval_sig <- filter(sim2_e7_rep3[(2*nrep + 1):(2*nrep + nrep), ], pval < 0.05)

##Significant p-values for tau average
sim2_e7_tau_pval_sig <- filter(sim2_e7_rep3[(3*nrep + 1):(3*nrep + nrep), ], pval < 0.05)

##Average results and calculate standard deviation for sim2_e7_rep3 (low error, left skew) (This code needs to be in same block as the for loop so that nrep doesn't get reset.)

avg_sim2_e7_lm_right_skew <- tibble(
  mean_Ray = colMeans(sim2_e7_rep3[1:nrep, ]),
  mean_nls1 = colMeans(sim2_e7_rep3[(nrep + 1):(nrep + nrep), ]),
  mean_nls2 = colMeans(sim2_e7_rep3[(2*nrep + 1):(2*nrep + nrep), ]),
  mean_tau = colMeans(sim2_e7_rep3[(3*nrep + 1):(3*nrep + nrep), ]),  
  sd_Ray = sapply(sim2_e7_rep3[1:nrep, ], sd),
  sd_nls1 = sapply(sim2_e7_rep3[(nrep + 1):(nrep + nrep), ], sd),
  sd_nls2 = sapply(sim2_e7_rep3[(2*nrep + 1):(2*nrep + nrep), ], sd),
  sd_tau = sapply(sim2_e7_rep3[(3*nrep + 1):(3*nrep + nrep), ], sd)  
) %>% t()  #Flip (transpose) table

colnames(avg_sim2_e7_lm_right_skew) <- colnames(sim2_e7_rep)

avg_sim2_e7_lm_right_skew <- as_tibble(avg_sim2_e7_lm_right_skew, rownames = NA)

```

#Do 1000 simulations w/ medium error and right skew (sim2_e8).

Extract the results for the standard Rayleigh model (linear), Expanded Rayleigh models 1 and 2 (nls1.2 and nls2.2), and average tau.

Skewness: Aiming for skewness of residuals for linear model > 0.5
Set omega (skewness) to 0.99

If the skewness of the residuals for the standard (linear) Rayleigh model where y = delta_p is <= 0.5, skip to the next loop.

See notes on sim_loop_e1 for more details.

Right-skewed data: underestimates (Tail on the right, most of the data on the left).
```{r sim_loop_e8}
#Nonlinear model 1.2 (sim_formula_nls1.2)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#Nonlinear model 2.2 (sim_formula_nls2.1)
sim_formula_nls2.1 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#R_std for atmospheric N2 = 0.0036765
R_std = 0.0036765

# n = number of times simulation is repeated (loops)
n = 2100

# m = number of models
m = 4

#Make an empty tibble to store the results for each simulation tested on each model.
#Ray = standard Rayleigh model

sim2_e8_rep <- blank_sim_rep(n = n, m = m)

#for loop to generate multiple simulated datasets
set.seed(313)

for (i in 1:n) {
  
#Make the columns in sim2_e8 the appropriate length by filtering
data <- sim2 %>% 
  #Subset data
  filter(f <= 0.75, f >= 0.25)

#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 2*0.015*sim2_tb2$N_s0[1], 0.99), "SN")  
error_1 <- rsn(n = length(data$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 2.5*0.5, 0.99), "SN")  
error_2 <- rsn(n = length(data$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 2.5*0.7, 0.99), "SN")  
error_3 <- rsn(n = length(data$N_s), dp = params_3)
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  data <- data %>%
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)%>%
  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        SP = delta_alpha - delta_beta,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        R_std = 0.0036765,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`
         )
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_p
  lm_delta_p <- lm(delta_p ~ `-flnf/(1-f)`, data = data)
  
  #Treat replicate as factor, add lm residuals to data table.
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  lm_delta_p_residuals = lm_delta_p$residuals
)
 
  #Test skewness of residuals for linear model. If no skew or right-skew, skip to the next iteration. (Only zeroes will be stored in rows corresponding to skipped iterations.)
  if(skewness(data$lm_delta_p_residuals) <= 0.5) {
   next
  } 
  
  sim2_e8_rep$Multiple_R_squared[i] = summary(lm_delta_p)$r.squared
  sim2_e8_rep$RMSE_delta_p[i] = rmse(model = lm_delta_p, 
                                     data = data)
  
  #Test for non-constant error variance (store p-value)
  lm_delta_p_ncv <- car::ncvTest(lm_delta_p)
  sim2_e8_rep$lm_delta_p_ncv[i] = lm_delta_p_ncv$p
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  lm_delta_p_lev <- car::leveneTest(lm_delta_p_residuals ~ replicate, data = data)
  sim2_e8_rep$levene_delta_p_res[i] = lm_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  lm_delta_p_JB <- jarque.test(as.vector(data$lm_delta_p_residuals))
  sim2_e8_rep$JB_delta_p_res[i] = lm_delta_p_JB$p.value
  
  #skewness and kurtosis for linear standard Rayleigh model
  sim2_e8_rep$skew[i] = skewness(lm_delta_p$residuals)
  
  if(sim2_e8_rep$skew[i] < -0.5) {
    sim2_e8_rep$skew_factor[i] = 2 #left-skew = 2
  } else if(sim2_e8_rep$skew[i] >= -0.5 & sim2_e8_rep$skew[i] <= 0.5) {
    sim2_e8_rep$skew_factor[i] = 1 #no skew = 1
  } else if (sim2_e8_rep$skew[i] > 0.5) {
    sim2_e8_rep$skew_factor[i] = 3 #right-skew = 3
  }

  sim2_e8_rep$lm_skew_factor[i] = sim2_e8_rep$skew_factor[i]      
  
  sim2_e8_rep$kurt[i] = kurtosis(lm_delta_p$residuals)
  
  sim2_e8_rep$f_min[i] = min(data$f)
  sim2_e8_rep$f_max[i] = max(data$f)
  
  sim2_e8_rep$delta_s0[i] = summary(lm_delta_p)$coefficients[1,1]
  sim2_e8_rep$se_delta_s0[i] = summary(lm_delta_p)$coefficients[1,2]
  sim2_e8_rep$epsilon_p[i] = summary(lm_delta_p)$coefficients[2,1]
  sim2_e8_rep$se_epsilon_p[i] = summary(lm_delta_p)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_alpha
  lm_delta_alpha <- lm(delta_alpha ~ `-flnf/(1-f)`, data = data)
  
  sim2_e8_rep$RMSE_delta_alpha[i] = rmse(model = lm_delta_alpha, 
                                               data = data)
  sim2_e8_rep$R_squared_delta_alpha[i] = summary(lm_delta_alpha)$r.squared  
  sim2_e8_rep$epsilon_alpha[i] =summary(lm_delta_alpha)$coefficients[2,1]
  sim2_e8_rep$se_epsilon_alpha[i] =
    summary(lm_delta_alpha)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_beta  
  lm_delta_beta <- lm(delta_beta ~ `-flnf/(1-f)`, data = data)
  
  sim2_e8_rep$RMSE_delta_beta[i] = rmse(model = lm_delta_beta, 
                                        data = data)
  sim2_e8_rep$R_squared_delta_beta[i] = summary(lm_delta_beta)$r.squared  
  sim2_e8_rep$epsilon_beta[i] = summary(lm_delta_beta)$coefficients[2,1]
  sim2_e8_rep$se_epsilon_beta[i]=summary(lm_delta_beta)$coefficients[2,2]
  
  #Convert standard Rayleigh epsilon_p to fractionation factor (ff_p)
  sim2_e8_rep$ff_p[i] = 1 + lm_delta_p$coefficients[2]/1000
  sim2_e8_rep$se_ff_p[i] = summary(lm_delta_p)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_alpha to fractionation factor (ff_alpha)
  sim2_e8_rep$ff_alpha[i] = 1 + lm_delta_alpha$coefficients[2]/1000
  sim2_e8_rep$se_ff_alpha[i] = summary(lm_delta_alpha)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_beta to fractionation factor (ff_beta)
  sim2_e8_rep$ff_beta[i] = 1 + lm_delta_beta$coefficients[2]/1000
  sim2_e8_rep$se_ff_beta[i] = summary(lm_delta_beta)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_p to KIE (KIE_p)
  sim2_e8_rep$KIE_p[i] = 1000/
    (as.numeric(coef(lm_delta_p)[2]) +1000)
  sim2_e8_rep$se_KIE_p[i] = abs(
      -1/(as.numeric(coef(lm_delta_p)[2])/1000 + 1)^2*
        summary(lm_delta_p)$coefficients[2,2]/1000) #abs(-1/(ff_p)^2*se_ff_p)
   
   #Convert standard Rayleigh epsilon_alpha to KIE (KIE_alpha)
   sim2_e8_rep$KIE_alpha[i] = 1000/
    (as.numeric(coef(lm_delta_alpha)[2]) +1000)
   sim2_e8_rep$se_KIE_alpha[i] = abs(
      -1/(as.numeric(coef(lm_delta_alpha)[2])/1000 + 1)^2*
        summary(lm_delta_alpha)$coefficients[2,2]/1000)
   
   #Convert standard Rayleigh epsilon_beta to KIE (KIE_beta)
   sim2_e8_rep$KIE_beta[i] = 1000/
    (as.numeric(coef(lm_delta_beta)[2]) +1000)
   sim2_e8_rep$se_KIE_beta[i] = abs(
      -1/(as.numeric(coef(lm_delta_beta)[2])/1000 + 1)^2*
        summary(lm_delta_beta)$coefficients[2,2]/1000)
   
  #Calculate est_diff for epsilon values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e8_rep$diff_epsilon_p[i] =
    abs((sim2_e8_rep$epsilon_p[i] - sim2_tb2$epsilon_bulk[1])/
          sim2_tb2$epsilon_bulk[1])
  
  sim2_e8_rep$diff_epsilon_alpha[i] =
    abs((sim2_e8_rep$epsilon_alpha[i] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e8_rep$diff_epsilon_beta[i] =
    abs((sim2_e8_rep$epsilon_beta[i] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e8_rep$diff_ff_p[i] =
    abs((sim2_e8_rep$ff_p[i] - sim2_tb2$ff_p[1])/
          sim2_tb2$ff_p[1])
  
  sim2_e8_rep$diff_ff_alpha[i] =
    abs((sim2_e8_rep$ff_alpha[i] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e8_rep$diff_ff_beta[i] =
    abs((sim2_e8_rep$ff_beta[i] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (standard Rayleigh equation)
  #absolute relative difference = |(est-true)/true|
  sim2_e8_rep$diff_KIE_p[i] =
    abs((sim2_e8_rep$KIE_p[i] - sim2_tb2$KIE_p[1])/
          sim2_tb2$KIE_p[1])
  
  sim2_e8_rep$diff_KIE_alpha[i] =
    abs((sim2_e8_rep$KIE_alpha[i] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e8_rep$diff_KIE_beta[i] =
    abs((sim2_e8_rep$KIE_beta[i] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #add p-value for epsilon_p from standard Rayleigh equation (slope of linear model)
  sim2_e8_rep$pval[i] = summary(lm_delta_p)$coefficients[2, 4]
  
  #Add p-value for slope of linear Rayleigh where y = delta_alpha or delta_beta
  sim2_e8_rep$pval_slope_delta_alpha[i] = summary(lm_delta_alpha)$coefficients[2, 4]
  sim2_e8_rep$pval_slope_delta_beta[i] = summary(lm_delta_beta)$coefficients[2, 4]  
   
#Apply nonlinear model 1.2 (sim_formula_nls1.2) (defined above)
  nls1.2 <- nls(sim_formula_nls1.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e8_rep$RMSE_delta_p[(n + i)] = rmse(nls1.2, data = data)

  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls1.2_delta_p_res <- nlsResiduals(nls1.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls1.2_delta_p_residuals = nls1.2_delta_p_res$resi1[ ,2]
)

  nls1.2_delta_p_lev <- car::leveneTest(nls1.2_delta_p_residuals ~ replicate, data = data)
  sim2_e8_rep$levene_delta_p_res[(n + i)] = nls1.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls1.2_delta_p_JB <- jarque.test(data$nls1.2_delta_p_residuals)
  sim2_e8_rep$JB_delta_p_res[(n + i)] = nls1.2_delta_p_JB$p.value
  
  #Skewness and kurtosis for nls1.2
  sim2_e8_rep$skew[(n + i)] = skewness(data$nls1.2_delta_p_residuals)
  
  if(sim2_e8_rep$skew[(n + i)] < -0.5) {
    sim2_e8_rep$skew_factor[(n + i)] = 2 #left-skew = 2
  } else if(sim2_e8_rep$skew[(n + i)] >= -0.5 & sim2_e8_rep$skew[(n + i)] <= 0.5) {
    sim2_e8_rep$skew_factor[(n + i)] = 1 #no skew = 1
  } else if (sim2_e8_rep$skew[(n + i)] > 0.5) {
    sim2_e8_rep$skew_factor[(n + i)] = 3 #right-skew = 3
  }
  
  sim2_e8_rep$kurt[(n + i)] = kurtosis(data$nls1.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls1.2 rows for indexing (same for all models)
  sim2_e8_rep$lm_skew_factor[(n + i)] = sim2_e8_rep$skew_factor[i]  
  
  #Calculate rho and tau for nls1.2
  sim2_e8_rep$rho[(n + i)] = coef(nls1.2)
  sim2_e8_rep$se_rho[(n + i)] = summary(nls1.2)$coefficients[1,2]
  
  sim2_e8_rep$tau[(n + i)] = mean(data$tau)
  sim2_e8_rep$se_tau[(n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e8_rep$f_min[(n + i)] = min(data$f)
  sim2_e8_rep$f_max[(n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e8_rep$ff_alpha[(n + i)] = 
    (coef(nls1.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls1.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e8_rep$se_ff_alpha[(n+i)] = 
  sqrt((sim2_e8_rep$ff_p[i]/sim2_e8_rep$tau[(n + i)]*sim2_e8_rep$se_rho[(n + i)])^2 + (-coef(nls1.2)*sim2_e8_rep$ff_p[i]/sim2_e8_rep$tau[(n + i)]^2*sim2_e8_rep$se_tau[(n + i)])^2+ (coef(nls1.2)/sim2_e8_rep$tau[(n + i)]*sim2_e8_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_alpha and se_epsilon_alpha (nls1.2):
  sim2_e8_rep$epsilon_alpha[(n + i)] = 1000*(sim2_e8_rep$ff_alpha[(n + i)] - 1)
  
  sim2_e8_rep$se_epsilon_alpha[(n + i)] =
    1000*sim2_e8_rep$se_ff_alpha[(n + i)]
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e8_rep$ff_beta[(n + i)] = 
    (1-coef(nls1.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls1.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e8_rep$se_ff_beta[(n + i)] = sqrt((-sim2_e8_rep$ff_p[i]/(1-mean(data$tau))*sim2_e8_rep$se_rho[(n + i)])^2 + ((1-coef(nls1.2))*sim2_e8_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e8_rep$se_tau[(n + i)])^2 + ((1-coef(nls1.2))/(1-mean(data$tau))*sim2_e8_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_beta and se_epsilon_beta (nls1.2):
  sim2_e8_rep$epsilon_beta[(n + i)] = 
    1000*(sim2_e8_rep$ff_beta[(n + i)] -1)
  sim2_e8_rep$se_epsilon_beta[(n + i)] =
    1000*sim2_e8_rep$se_ff_beta[(n + i)]
  
  #Calculate KIE_alpha and KIE_beta (nls1.2):
  sim2_e8_rep$KIE_alpha[(n + i)] = 1000/(sim2_e8_rep$epsilon_alpha[(n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e8_rep$se_KIE_alpha[(n + i)] = abs((-1/sim2_e8_rep$ff_alpha[(n + i)]^2)*sim2_e8_rep$se_ff_alpha[(n+i)])
  
  sim2_e8_rep$KIE_beta[(n + i)] = 1000/(sim2_e8_rep$epsilon_beta[(n + i)] +1000)
  
  sim2_e8_rep$se_KIE_beta[(n + i)] = abs((-1/sim2_e8_rep$ff_beta[(n + i)]^2)*sim2_e8_rep$se_ff_beta[(n+i)])
  
  #Calculate est_diff for epsilon values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e8_rep$diff_epsilon_alpha[(n + i)] =
    abs((sim2_e8_rep$epsilon_alpha[(n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e8_rep$diff_epsilon_beta[(n + i)] =
    abs((sim2_e8_rep$epsilon_beta[(n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e8_rep$diff_ff_alpha[(n + i)] =
    abs((sim2_e8_rep$ff_alpha[(n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e8_rep$diff_ff_beta[(n + i)] =
    abs((sim2_e8_rep$ff_beta[(n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e8_rep$diff_KIE_alpha[(n + i)] =
    abs((sim2_e8_rep$KIE_alpha[(n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e8_rep$diff_KIE_beta[(n + i)] =
    abs((sim2_e8_rep$KIE_beta[(n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls1.2)
  sim2_e8_rep$diff_rho[(n + i)] = 
    abs((sim2_e8_rep$rho[(n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))
  
  #add p-value for rho (parameter estimated from nls1.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls1.2)$coefficients[1, 1] - 0.5)/
    summary(nls1.2)$coefficients[1, 2]
  sim2_e8_rep$pval[(n + i)] = 2*pt(q = t_test, df = df.residual(nls1.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e8_rep$pval_rho_0[(n + i)] = summary(nls1.2)$coefficients[1, 4]
  
  
#Apply nonlinear model 2.2 (sim_formula_nls2.2) (defined above)
  nls2.2 <- nls(sim_formula_nls2.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e8_rep$RMSE_delta_p[(2*n + i)] = rmse(nls2.2, data = data)
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls2.2_delta_p_res <- nlsResiduals(nls2.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls2.2_delta_p_residuals = nls2.2_delta_p_res$resi1[ ,2]
)

  nls2.2_delta_p_lev <- car::leveneTest(nls2.2_delta_p_residuals ~ replicate, data = data)
  sim2_e8_rep$levene_delta_p_res[(2*n + i)] = nls2.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls2.2_delta_p_JB <- jarque.test(data$nls2.2_delta_p_residuals)
  sim2_e8_rep$JB_delta_p_res[(2*n + i)] = nls2.2_delta_p_JB$p.value   
  
  #Skewness and kurtosis for nls2.2
  sim2_e8_rep$skew[(2*n + i)] = skewness(data$nls2.2_delta_p_residuals)
  
  if(sim2_e8_rep$skew[(2*n + i)] < -0.5) {
    sim2_e8_rep$skew_factor[(2*n + i)] = 2 #left-skew = 2
  } else if(sim2_e8_rep$skew[(2*n + i)] >= -0.5 & sim2_e8_rep$skew[(2*n + i)] <= 0.5) {
    sim2_e8_rep$skew_factor[(2*n + i)] = 1 #no skew = 1
  } else if (sim2_e8_rep$skew[(2*n + i)] > 0.5) {
    sim2_e8_rep$skew_factor[(2*n + i)] = 3 #right-skew = 3
  }
  
  sim2_e8_rep$kurt[(2*n + i)] = kurtosis(data$nls2.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls2.2 rows for indexing (same for all models)
  sim2_e8_rep$lm_skew_factor[(2*n + i)] = sim2_e8_rep$skew_factor[i]   
  
  #Calculate rho and tau for nls2.2
  sim2_e8_rep$rho[(2*n + i)] = coef(nls2.2)
  sim2_e8_rep$se_rho[(2*n + i)] = summary(nls2.2)$coefficients[1,2]
  
  sim2_e8_rep$tau[(2*n + i)] = mean(data$tau)
  sim2_e8_rep$se_tau[(2*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e8_rep$f_min[(2*n + i)] = min(data$f)
  sim2_e8_rep$f_max[(2*n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e8_rep$ff_alpha[(2*n + i)] = 
    (coef(nls2.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls2.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e8_rep$se_ff_alpha[(2*n + i)] = 
  sqrt((sim2_e8_rep$ff_p[i]/sim2_e8_rep$tau[(2*n + i)]*sim2_e8_rep$se_rho[(2*n + i)])^2 + (-coef(nls2.2)*sim2_e8_rep$ff_p[i]/sim2_e8_rep$tau[(2*n + i)]^2*sim2_e8_rep$se_tau[(2*n + i)])^2+ (coef(nls2.2)/sim2_e8_rep$tau[(2*n + i)]*sim2_e8_rep$se_ff_p[i])^2)
    
  #Calculate epsilon_alpha and se_epsilon_alpha (nls2.2):
  sim2_e8_rep$epsilon_alpha[(2*n + i)] = 1000*(sim2_e8_rep$ff_alpha[(2*n + i)] - 1)
  
  sim2_e8_rep$se_epsilon_alpha[(2*n + i)] =
    1000*sim2_e8_rep$se_ff_alpha[(2*n + i)]  
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e8_rep$ff_beta[(2*n + i)] = 
    (1-coef(nls2.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)  
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls2.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e8_rep$se_ff_beta[(2*n + i)] = sqrt((-sim2_e8_rep$ff_p[i]/(1-mean(data$tau))*sim2_e8_rep$se_rho[(2*n + i)])^2 + ((1-coef(nls2.2))*sim2_e8_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e8_rep$se_tau[(2*n + i)])^2 + ((1-coef(nls2.2))/(1-mean(data$tau))*sim2_e8_rep$se_ff_p[i])^2) 
  
  #Calculate epsilon_beta and se_epsilon_beta (nls2.2):
  sim2_e8_rep$epsilon_beta[(2*n + i)] = 
    1000*(sim2_e8_rep$ff_beta[(2*n + i)] -1)
  sim2_e8_rep$se_epsilon_beta[(2*n + i)] =
    1000*sim2_e8_rep$se_ff_beta[(2*n + i)]  
  
  #Calculate KIE_alpha and KIE_beta (nls2.2):
  sim2_e8_rep$KIE_alpha[(2*n + i)] = 1000/(sim2_e8_rep$epsilon_alpha[(2*n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e8_rep$se_KIE_alpha[(2*n + i)] = abs((-1/sim2_e8_rep$ff_alpha[(2*n + i)]^2)*sim2_e8_rep$se_ff_alpha[(2*n + i)])
  
  sim2_e8_rep$KIE_beta[(2*n + i)] = 1000/(sim2_e8_rep$epsilon_beta[(2*n + i)] +1000)
  
  sim2_e8_rep$se_KIE_beta[(2*n + i)] = abs((-1/sim2_e8_rep$ff_beta[(2*n + i)]^2)*sim2_e8_rep$se_ff_beta[(2*n + i)])
  
  #Calculate est_diff for epsilon values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e8_rep$diff_epsilon_alpha[(2*n + i)] =
    abs((sim2_e8_rep$epsilon_alpha[(2*n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e8_rep$diff_epsilon_beta[(2*n + i)] =
    abs((sim2_e8_rep$epsilon_beta[(2*n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])  
  
  #Calculate est_diff for ff values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e8_rep$diff_ff_alpha[(2*n + i)] =
    abs((sim2_e8_rep$ff_alpha[(2*n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e8_rep$diff_ff_beta[(2*n + i)] =
    abs((sim2_e8_rep$ff_beta[(2*n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e8_rep$diff_KIE_alpha[(2*n + i)] =
    abs((sim2_e8_rep$KIE_alpha[(2*n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e8_rep$diff_KIE_beta[(2*n + i)] =
    abs((sim2_e8_rep$KIE_beta[(2*n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls2.2)
  sim2_e8_rep$diff_rho[(2*n + i)] = 
    abs((sim2_e8_rep$rho[(2*n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))  
  
  #add p-value for rho (parameter estimated from nls2.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls2.2)$coefficients[1, 1] - 0.5)/
    summary(nls2.2)$coefficients[1, 2]
  sim2_e8_rep$pval[(2*n + i)] = 2*pt(q = t_test, df = df.residual(nls2.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e8_rep$pval_rho_0[(2*n + i)] = summary(nls2.2)$coefficients[1, 4]
  
#average tau "model"
  #Calculate tau (same for all three models)
  sim2_e8_rep$tau[(3*n + i)] = mean(data$tau)
  sim2_e8_rep$se_tau[(3*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e8_rep$f_min[(3*n + i)] = min(data$f)
  sim2_e8_rep$f_max[(3*n + i)] = max(data$f)  
  
  sim2_e8_rep$skew[(3*n + i)] = skewness(data$tau)
  
  if(sim2_e8_rep$skew[(3*n + i)] < -0.5) {
    sim2_e8_rep$skew_factor[(3*n + i)] = 2 #left-skew = 2
  } else if(sim2_e8_rep$skew[(3*n + i)] >= -0.5 & sim2_e8_rep$skew[(3*n + i)] <= 0.5) {
    sim2_e8_rep$skew_factor[(3*n + i)] = 1 #no skew = 1
  } else if (sim2_e8_rep$skew[(3*n + i)] > 0.5) {
    sim2_e8_rep$skew_factor[(3*n + i)] = 3 #right-skew = 3
  }  
  
  sim2_e8_rep$kurt[(3*n + i)] = kurtosis(data$tau)
  
  #Add lm_skew_factor to average tau rows for indexing (same for all models)
  sim2_e8_rep$lm_skew_factor[(3*n + i)] = sim2_e8_rep$skew_factor[i] 
  
  #Calculate est_diff for tau value (same for linear and nonlinear models)
  sim2_e8_rep$diff_tau[(3*n + i)] = 
    abs((sim2_e8_rep$tau[(3*n + i)] - mean(sim2_tb2$tau, na.rm = TRUE))/
          mean(sim2_tb2$tau, na.rm = TRUE))   
  
  #Calculate p-value for average tau. Null hypothesis: tau = 0.5
  sim2_e8_rep$pval[(3*n + i)] = t.test(data$tau, mu = 0.5)$p.value
  
  #Calculate pval_tau_mean. Null hypothesis: tau = mean tau value from sim2 (no error dataset)
  sim2_e8_rep$pval_tau_mean[(3*n + i)] = t.test(data$tau, mu = mean(sim2_tb2$tau, na.rm = TRUE))$p.value
}


#Filter by skewness in linear model
sim2_e8_lm_left_skew <- filter(sim2_e8_rep[1:n, ], skew < -0.5)
sim2_e8_lm_no_skew <- filter(sim2_e8_rep[1:n, ], skew >= -0.5 & skew <= 0.5)
sim2_e8_lm_right_skew <- filter(sim2_e8_rep[1:n, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e8_nls1_left_skew <- filter(sim2_e8_rep[(n + 1):(n + n), ], skew < -0.5)
sim2_e8_nls1_no_skew <- filter(sim2_e8_rep[(n + 1):(n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e8_nls1_right_skew <- filter(sim2_e8_rep[(n + 1):(n + n), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e8_nls2_left_skew <- filter(sim2_e8_rep[(2*n + 1):(2*n + n), ], skew < -0.5)
sim2_e8_nls2_no_skew <- filter(sim2_e8_rep[(2*n + 1):(2*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e8_nls2_right_skew <- filter(sim2_e8_rep[(2*n + 1):(2*n + n), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e8_tau_left_skew <- filter(sim2_e8_rep[(3*n + 1):(3*n + n), ], skew < -0.5)
sim2_e8_tau_no_skew <- filter(sim2_e8_rep[(3*n + 1):(3*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e8_tau_right_skew <- filter(sim2_e8_rep[(3*n + 1):(3*n + n), ], skew > 0.5)

#Filter by lm_skew_factor to select the rows for all four models (linear, nls1, nls2, and average tau) that correspond to datasets with right skew in the linear model.

#For datasets where the lm residuals are left skewed or not skewed, lm_skew_factor == 0 because that iteration was cut short ("next" function) before any non-zero values were stored in the table.

sim2_e8_rep2 <- filter(sim2_e8_rep, lm_skew_factor == 3)
nrep = nrow(sim2_e8_rep2)/m

#Filter by skewness in linear model
sim2_e8_lm_left_skew2 <- filter(sim2_e8_rep2[1:nrep, ], skew < -0.5)

sim2_e8_lm_no_skew2 <- filter(sim2_e8_rep2[1:nrep, ], skew >= -0.5 & skew <= 0.5)

sim2_e8_lm_right_skew2 <- filter(sim2_e8_rep2[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e8_nls1_left_skew2 <- filter(sim2_e8_rep2[(nrep + 1):(nrep + nrep), ], skew < -0.5)

sim2_e8_nls1_no_skew2 <- filter(sim2_e8_rep2[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e8_nls1_right_skew2 <- filter(sim2_e8_rep2[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e8_nls2_left_skew2 <- filter(sim2_e8_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)

sim2_e8_nls2_no_skew2 <- filter(sim2_e8_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e8_nls2_right_skew2 <- filter(sim2_e8_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e8_tau_left_skew2 <- filter(sim2_e8_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)

sim2_e8_tau_no_skew2 <- filter(sim2_e8_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e8_tau_right_skew2 <- filter(sim2_e8_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

#Randomly remove extra rows from sim2_e8_rep2 so that there are 1000 replicates.
nremove <- nrow(sim2_e8_rep2)/m - 1000

#Make indexing vectors to remove the same datasets for each model
v1 <- sample(1:(nrow(sim2_e8_rep2)/m), size = nremove)
v2 <- c(v1, (v1 + nrep), (v1 + 2*nrep), (v1 + 3*nrep))

sim2_e8_rep3 <- sim2_e8_rep2[-v2, ]


#Reset nrep
nrep = nrow(sim2_e8_rep3)/m

#Count the final number of no skew, left skew, and right-skew data in sim2_e8_rep3
#Filter by skewness in linear model
sim2_e8_lm_left_skew3 <- filter(sim2_e8_rep3[1:nrep, ], skew < -0.5)
sim2_e8_lm_no_skew3 <- filter(sim2_e8_rep3[1:nrep, ], skew >= -0.5 & skew <= 0.5)
sim2_e8_lm_right_skew3 <- filter(sim2_e8_rep3[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e8_nls1_left_skew3 <- filter(sim2_e8_rep3[(nrep + 1):(nrep + nrep), ], skew < -0.5)
sim2_e8_nls1_no_skew3 <- filter(sim2_e8_rep3[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e8_nls1_right_skew3 <- filter(sim2_e8_rep3[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e8_nls2_left_skew3 <- filter(sim2_e8_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)
sim2_e8_nls2_no_skew3 <- filter(sim2_e8_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e8_nls2_right_skew3 <- filter(sim2_e8_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in average tau
sim2_e8_tau_left_skew3 <- filter(sim2_e8_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)
sim2_e8_tau_no_skew3 <- filter(sim2_e8_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e8_tau_right_skew3 <- filter(sim2_e8_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

##Significant p-values for linear model slope
sim2_e8_lm_pval_sig = filter(sim2_e8_rep3[1:nrep, ], pval < 0.05)
sim2_e8_lm_delta_alpha_pval_sig <- filter(sim2_e8_rep3[1:nrep, ], 
                                         pval_slope_delta_alpha < 0.05)
sim2_e8_lm_delta_beta_pval_sig <- filter(sim2_e8_rep3[1:nrep, ], 
                                         pval_slope_delta_beta < 0.05)

##Significant p-values for nls1 rho (coefficient)
sim2_e8_nls1_pval_sig <- filter(sim2_e8_rep3[(nrep + 1):(nrep + nrep), ], pval < 0.05)

##Significant p-values for nls2 rho (coefficient)
sim2_e8_nls2_pval_sig <- filter(sim2_e8_rep3[(2*nrep + 1):(2*nrep + nrep), ], pval < 0.05)

##Significant p-values for tau average
sim2_e8_tau_pval_sig <- filter(sim2_e8_rep3[(3*nrep + 1):(3*nrep + nrep), ], pval < 0.05)

##Average results and calculate standard deviation for sim2_e8_rep3 (low error, left skew) (This code needs to be in same block as the for loop so that nrep doesn't get reset.)

avg_sim2_e8_lm_right_skew <- tibble(
  mean_Ray = colMeans(sim2_e8_rep3[1:nrep, ]),
  mean_nls1 = colMeans(sim2_e8_rep3[(nrep + 1):(nrep + nrep), ]),
  mean_nls2 = colMeans(sim2_e8_rep3[(2*nrep + 1):(2*nrep + nrep), ]),
  mean_tau = colMeans(sim2_e8_rep3[(3*nrep + 1):(3*nrep + nrep), ]),  
  sd_Ray = sapply(sim2_e8_rep3[1:nrep, ], sd),
  sd_nls1 = sapply(sim2_e8_rep3[(nrep + 1):(nrep + nrep), ], sd),
  sd_nls2 = sapply(sim2_e8_rep3[(2*nrep + 1):(2*nrep + nrep), ], sd),
  sd_tau = sapply(sim2_e8_rep3[(3*nrep + 1):(3*nrep + nrep), ], sd)  
) %>% t()  #Flip (transpose) table

colnames(avg_sim2_e8_lm_right_skew) <- colnames(sim2_e8_rep)

avg_sim2_e8_lm_right_skew <- as_tibble(avg_sim2_e8_lm_right_skew, rownames = NA)

```

#Do 1000 simulations w/ high error and right skew (sim2_e9).

Extract the results for the standard Rayleigh model (linear), Expanded Rayleigh models 1 and 2 (nls1.2 and nls2.2), and average tau.

Skewness: Aiming for skewness of residuals for linear model > 0.5
Set omega (skewness) to 0.99

If the skewness of the residuals for the standard (linear) Rayleigh model where y = delta_p is <= 0.5, skip to the next loop.

See notes on sim_loop_e1 for more details.

Right-skewed data: underestimates (Tail on the right, most of the data on the left).
```{r sim_loop_e9}
#Nonlinear model 1.2 (sim_formula_nls1.2)
sim_formula_nls1.2 <- as.formula(delta_p ~ 0.5*(
  (rho*`15N_p`/((0.5*N_p) - rho*`15N_p`)/R_std - 1)*1000 + 
    delta_beta)
  )

#Nonlinear model 2.2 (sim_formula_nls2.1)
sim_formula_nls2.1 <- as.formula(delta_p ~ 0.5*(
  delta_alpha +
  ((1-rho)*`15N_p`/((0.5*N_p) - (1-rho)*`15N_p`)/R_std -1)*1000)
  )

#R_std for atmospheric N2 = 0.0036765
R_std = 0.0036765

# n = number of times simulation is repeated (loops)
n = 2000

# m = number of models
m = 4

#Make an empty tibble to store the results for each simulation tested on each model.
#Ray = standard Rayleigh model

sim2_e9_rep <- blank_sim_rep(n = n, m = m)

#for loop to generate multiple simulated datasets
set.seed(313)

for (i in 1:n) {
  
#Make the columns in sim2_e9 the appropriate length by filtering
data <- sim2 %>% 
  #Subset data
  filter(f <= 0.75, f >= 0.25)

#Set N_s error term
params_1 <- cp2dp(c(mean = 0, sd = 3*0.015*sim2_tb2$N_s0[1], 0.99), "SN")  
error_1 <- rsn(n = length(data$N_s), dp = params_1)  

#Set delta_p error term
params_2 <- cp2dp(c(mean = 0, sd = 5*0.5, 0.99), "SN")  
error_2 <- rsn(n = length(data$N_s), dp = params_2)

#Set delta_alpha error term
params_3 <- cp2dp(c(mean = 0, sd = 5*0.7, 0.99), "SN")  
error_3 <- rsn(n = length(data$N_s), dp = params_3)
  
  ##Before adding error to simulated data, make a table with only N_s0, N_s,and delta values. (Will add error to N_s and then recalculate f).
  data <- data %>%
  dplyr::select(N_s0, N_s,delta_s0, delta_s, delta_p, delta_alpha, 
         delta_beta, replicate)%>%
  mutate(
        N_s = N_s + error_1,
        f = N_s/N_s0,
        one_minus_f = 1 -f,
         `-flnf/(1-f)` = -f*log(f)/(1 - f),
        delta_p = delta_p + error_2,
        delta_alpha = delta_alpha + error_3,
        delta_beta = 2*delta_p - delta_alpha,
        delta_s = (delta_s0 - (1-f)*delta_p)/f, #rearranged mass-balance equation
        SP = delta_alpha - delta_beta,
        R_p = (delta_p/1000 + 1)*0.0036765,
        R_alpha = (delta_alpha/1000 + 1)*0.0036765,
        R_beta = (delta_beta/1000 + 1)*0.0036765,
        N_p = one_minus_f*N_s0,
        `14N_p` = N_p/(1 + R_p),
        `15N_p` = R_p*`14N_p`,
        R_std = 0.0036765,
        N_alpha = 0.5*(1 - f)*N_s0,
        `14N_alpha` = 0.5*N_p/(1 + R_alpha),
        `15N_alpha` = R_alpha*`14N_alpha`,
        tau = `14N_alpha`/`14N_p`
         )
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_p
  lm_delta_p <- lm(delta_p ~ `-flnf/(1-f)`, data = data)
  
  #Treat replicate as factor, add lm residuals to data table.
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  lm_delta_p_residuals = lm_delta_p$residuals
)
 
  #Test skewness of residuals for linear model. If no skew or right-skew, skip to the next iteration. (Only zeroes will be stored in rows corresponding to skipped iterations.)
  if(skewness(data$lm_delta_p_residuals) <= 0.5) {
   next
  } 
  
  sim2_e9_rep$Multiple_R_squared[i] = summary(lm_delta_p)$r.squared
  sim2_e9_rep$RMSE_delta_p[i] = rmse(model = lm_delta_p, 
                                     data = data)
  
  #Test for non-constant error variance (store p-value)
  lm_delta_p_ncv <- car::ncvTest(lm_delta_p)
  sim2_e9_rep$lm_delta_p_ncv[i] = lm_delta_p_ncv$p
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  lm_delta_p_lev <- car::leveneTest(lm_delta_p_residuals ~ replicate, data = data)
  sim2_e9_rep$levene_delta_p_res[i] = lm_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  lm_delta_p_JB <- jarque.test(as.vector(data$lm_delta_p_residuals))
  sim2_e9_rep$JB_delta_p_res[i] = lm_delta_p_JB$p.value
  
  #skewness and kurtosis for linear standard Rayleigh model
  sim2_e9_rep$skew[i] = skewness(lm_delta_p$residuals)
  
  if(sim2_e9_rep$skew[i] < -0.5) {
    sim2_e9_rep$skew_factor[i] = 2 #left-skew = 2
  } else if(sim2_e9_rep$skew[i] >= -0.5 & sim2_e9_rep$skew[i] <= 0.5) {
    sim2_e9_rep$skew_factor[i] = 1 #no skew = 1
  } else if (sim2_e9_rep$skew[i] > 0.5) {
    sim2_e9_rep$skew_factor[i] = 3 #right-skew = 3
  }

  sim2_e9_rep$lm_skew_factor[i] = sim2_e9_rep$skew_factor[i]      
  
  sim2_e9_rep$kurt[i] = kurtosis(lm_delta_p$residuals)
  
  sim2_e9_rep$f_min[i] = min(data$f)
  sim2_e9_rep$f_max[i] = max(data$f)
  
  sim2_e9_rep$delta_s0[i] = summary(lm_delta_p)$coefficients[1,1]
  sim2_e9_rep$se_delta_s0[i] = summary(lm_delta_p)$coefficients[1,2]
  sim2_e9_rep$epsilon_p[i] = summary(lm_delta_p)$coefficients[2,1]
  sim2_e9_rep$se_epsilon_p[i] = summary(lm_delta_p)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_alpha
  lm_delta_alpha <- lm(delta_alpha ~ `-flnf/(1-f)`, data = data)
  
  sim2_e9_rep$RMSE_delta_alpha[i] = rmse(model = lm_delta_alpha, 
                                               data = data)
  sim2_e9_rep$R_squared_delta_alpha[i] = summary(lm_delta_alpha)$r.squared  
  sim2_e9_rep$epsilon_alpha[i] =summary(lm_delta_alpha)$coefficients[2,1]
  sim2_e9_rep$se_epsilon_alpha[i] =
    summary(lm_delta_alpha)$coefficients[2,2]
  
  #Apply standard Rayleigh model where x = -flnf/(1-f) and y = delta_beta  
  lm_delta_beta <- lm(delta_beta ~ `-flnf/(1-f)`, data = data)
  
  sim2_e9_rep$RMSE_delta_beta[i] = rmse(model = lm_delta_beta, 
                                        data = data)
  sim2_e9_rep$R_squared_delta_beta[i] = summary(lm_delta_beta)$r.squared  
  sim2_e9_rep$epsilon_beta[i] = summary(lm_delta_beta)$coefficients[2,1]
  sim2_e9_rep$se_epsilon_beta[i]=summary(lm_delta_beta)$coefficients[2,2]
  
  #Convert standard Rayleigh epsilon_p to fractionation factor (ff_p)
  sim2_e9_rep$ff_p[i] = 1 + lm_delta_p$coefficients[2]/1000
  sim2_e9_rep$se_ff_p[i] = summary(lm_delta_p)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_alpha to fractionation factor (ff_alpha)
  sim2_e9_rep$ff_alpha[i] = 1 + lm_delta_alpha$coefficients[2]/1000
  sim2_e9_rep$se_ff_alpha[i] = summary(lm_delta_alpha)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_beta to fractionation factor (ff_beta)
  sim2_e9_rep$ff_beta[i] = 1 + lm_delta_beta$coefficients[2]/1000
  sim2_e9_rep$se_ff_beta[i] = summary(lm_delta_beta)$coefficients[2,2]/1000
  
  #Convert standard Rayleigh epsilon_p to KIE (KIE_p)
  sim2_e9_rep$KIE_p[i] = 1000/
    (as.numeric(coef(lm_delta_p)[2]) +1000)
  sim2_e9_rep$se_KIE_p[i] = abs(
      -1/(as.numeric(coef(lm_delta_p)[2])/1000 + 1)^2*
        summary(lm_delta_p)$coefficients[2,2]/1000) #abs(-1/(ff_p)^2*se_ff_p)
   
   #Convert standard Rayleigh epsilon_alpha to KIE (KIE_alpha)
   sim2_e9_rep$KIE_alpha[i] = 1000/
    (as.numeric(coef(lm_delta_alpha)[2]) +1000)
   sim2_e9_rep$se_KIE_alpha[i] = abs(
      -1/(as.numeric(coef(lm_delta_alpha)[2])/1000 + 1)^2*
        summary(lm_delta_alpha)$coefficients[2,2]/1000)
   
   #Convert standard Rayleigh epsilon_beta to KIE (KIE_beta)
   sim2_e9_rep$KIE_beta[i] = 1000/
    (as.numeric(coef(lm_delta_beta)[2]) +1000)
   sim2_e9_rep$se_KIE_beta[i] = abs(
      -1/(as.numeric(coef(lm_delta_beta)[2])/1000 + 1)^2*
        summary(lm_delta_beta)$coefficients[2,2]/1000)
   
  #Calculate est_diff for epsilon values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e9_rep$diff_epsilon_p[i] =
    abs((sim2_e9_rep$epsilon_p[i] - sim2_tb2$epsilon_bulk[1])/
          sim2_tb2$epsilon_bulk[1])
  
  sim2_e9_rep$diff_epsilon_alpha[i] =
    abs((sim2_e9_rep$epsilon_alpha[i] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e9_rep$diff_epsilon_beta[i] =
    abs((sim2_e9_rep$epsilon_beta[i] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (standard Rayleigh model)
  #absolute relative difference = |(est-true)/true|
  sim2_e9_rep$diff_ff_p[i] =
    abs((sim2_e9_rep$ff_p[i] - sim2_tb2$ff_p[1])/
          sim2_tb2$ff_p[1])
  
  sim2_e9_rep$diff_ff_alpha[i] =
    abs((sim2_e9_rep$ff_alpha[i] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e9_rep$diff_ff_beta[i] =
    abs((sim2_e9_rep$ff_beta[i] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (standard Rayleigh equation)
  #absolute relative difference = |(est-true)/true|
  sim2_e9_rep$diff_KIE_p[i] =
    abs((sim2_e9_rep$KIE_p[i] - sim2_tb2$KIE_p[1])/
          sim2_tb2$KIE_p[1])
  
  sim2_e9_rep$diff_KIE_alpha[i] =
    abs((sim2_e9_rep$KIE_alpha[i] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e9_rep$diff_KIE_beta[i] =
    abs((sim2_e9_rep$KIE_beta[i] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #add p-value for epsilon_p from standard Rayleigh equation (slope of linear model)
  sim2_e9_rep$pval[i] = summary(lm_delta_p)$coefficients[2, 4]
  
  #Add p-value for slope of linear Rayleigh where y = delta_alpha or delta_beta
  sim2_e9_rep$pval_slope_delta_alpha[i] = summary(lm_delta_alpha)$coefficients[2, 4]
  sim2_e9_rep$pval_slope_delta_beta[i] = summary(lm_delta_beta)$coefficients[2, 4]  
   
#Apply nonlinear model 1.2 (sim_formula_nls1.2) (defined above)
  nls1.2 <- nls(sim_formula_nls1.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e9_rep$RMSE_delta_p[(n + i)] = rmse(nls1.2, data = data)

  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls1.2_delta_p_res <- nlsResiduals(nls1.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls1.2_delta_p_residuals = nls1.2_delta_p_res$resi1[ ,2]
)

  nls1.2_delta_p_lev <- car::leveneTest(nls1.2_delta_p_residuals ~ replicate, data = data)
  sim2_e9_rep$levene_delta_p_res[(n + i)] = nls1.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls1.2_delta_p_JB <- jarque.test(data$nls1.2_delta_p_residuals)
  sim2_e9_rep$JB_delta_p_res[(n + i)] = nls1.2_delta_p_JB$p.value
  
  #Skewness and kurtosis for nls1.2
  sim2_e9_rep$skew[(n + i)] = skewness(data$nls1.2_delta_p_residuals)
  
  if(sim2_e9_rep$skew[(n + i)] < -0.5) {
    sim2_e9_rep$skew_factor[(n + i)] = 2 #left-skew = 2
  } else if(sim2_e9_rep$skew[(n + i)] >= -0.5 & sim2_e9_rep$skew[(n + i)] <= 0.5) {
    sim2_e9_rep$skew_factor[(n + i)] = 1 #no skew = 1
  } else if (sim2_e9_rep$skew[(n + i)] > 0.5) {
    sim2_e9_rep$skew_factor[(n + i)] = 3 #right-skew = 3
  }
  
  sim2_e9_rep$kurt[(n + i)] = kurtosis(data$nls1.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls1.2 rows for indexing (same for all models)
  sim2_e9_rep$lm_skew_factor[(n + i)] = sim2_e9_rep$skew_factor[i]  
  
  #Calculate rho and tau for nls1.2
  sim2_e9_rep$rho[(n + i)] = coef(nls1.2)
  sim2_e9_rep$se_rho[(n + i)] = summary(nls1.2)$coefficients[1,2]
  
  sim2_e9_rep$tau[(n + i)] = mean(data$tau)
  sim2_e9_rep$se_tau[(n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e9_rep$f_min[(n + i)] = min(data$f)
  sim2_e9_rep$f_max[(n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e9_rep$ff_alpha[(n + i)] = 
    (coef(nls1.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls1.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e9_rep$se_ff_alpha[(n+i)] = 
  sqrt((sim2_e9_rep$ff_p[i]/sim2_e9_rep$tau[(n + i)]*sim2_e9_rep$se_rho[(n + i)])^2 + (-coef(nls1.2)*sim2_e9_rep$ff_p[i]/sim2_e9_rep$tau[(n + i)]^2*sim2_e9_rep$se_tau[(n + i)])^2+ (coef(nls1.2)/sim2_e9_rep$tau[(n + i)]*sim2_e9_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_alpha and se_epsilon_alpha (nls1.2):
  sim2_e9_rep$epsilon_alpha[(n + i)] = 1000*(sim2_e9_rep$ff_alpha[(n + i)] - 1)
  
  sim2_e9_rep$se_epsilon_alpha[(n + i)] =
    1000*sim2_e9_rep$se_ff_alpha[(n + i)]
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls1.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e9_rep$ff_beta[(n + i)] = 
    (1-coef(nls1.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls1.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e9_rep$se_ff_beta[(n + i)] = sqrt((-sim2_e9_rep$ff_p[i]/(1-mean(data$tau))*sim2_e9_rep$se_rho[(n + i)])^2 + ((1-coef(nls1.2))*sim2_e9_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e9_rep$se_tau[(n + i)])^2 + ((1-coef(nls1.2))/(1-mean(data$tau))*sim2_e9_rep$se_ff_p[i])^2)
  
  #Calculate epsilon_beta and se_epsilon_beta (nls1.2):
  sim2_e9_rep$epsilon_beta[(n + i)] = 
    1000*(sim2_e9_rep$ff_beta[(n + i)] -1)
  sim2_e9_rep$se_epsilon_beta[(n + i)] =
    1000*sim2_e9_rep$se_ff_beta[(n + i)]
  
  #Calculate KIE_alpha and KIE_beta (nls1.2):
  sim2_e9_rep$KIE_alpha[(n + i)] = 1000/(sim2_e9_rep$epsilon_alpha[(n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e9_rep$se_KIE_alpha[(n + i)] = abs((-1/sim2_e9_rep$ff_alpha[(n + i)]^2)*sim2_e9_rep$se_ff_alpha[(n+i)])
  
  sim2_e9_rep$KIE_beta[(n + i)] = 1000/(sim2_e9_rep$epsilon_beta[(n + i)] +1000)
  
  sim2_e9_rep$se_KIE_beta[(n + i)] = abs((-1/sim2_e9_rep$ff_beta[(n + i)]^2)*sim2_e9_rep$se_ff_beta[(n+i)])
  
  #Calculate est_diff for epsilon values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e9_rep$diff_epsilon_alpha[(n + i)] =
    abs((sim2_e9_rep$epsilon_alpha[(n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e9_rep$diff_epsilon_beta[(n + i)] =
    abs((sim2_e9_rep$epsilon_beta[(n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])
  
  #Calculate est_diff for ff values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e9_rep$diff_ff_alpha[(n + i)] =
    abs((sim2_e9_rep$ff_alpha[(n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e9_rep$diff_ff_beta[(n + i)] =
    abs((sim2_e9_rep$ff_beta[(n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls1.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e9_rep$diff_KIE_alpha[(n + i)] =
    abs((sim2_e9_rep$KIE_alpha[(n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e9_rep$diff_KIE_beta[(n + i)] =
    abs((sim2_e9_rep$KIE_beta[(n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls1.2)
  sim2_e9_rep$diff_rho[(n + i)] = 
    abs((sim2_e9_rep$rho[(n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))
  
  #add p-value for rho (parameter estimated from nls1.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls1.2)$coefficients[1, 1] - 0.5)/
    summary(nls1.2)$coefficients[1, 2]
  sim2_e9_rep$pval[(n + i)] = 2*pt(q = t_test, df = df.residual(nls1.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e9_rep$pval_rho_0[(n + i)] = summary(nls1.2)$coefficients[1, 4]  
  
  
#Apply nonlinear model 2.2 (sim_formula_nls2.2) (defined above)
  nls2.2 <- nls(sim_formula_nls2.2, data = data,
                      start = list(rho = 0.500))
  
  sim2_e9_rep$RMSE_delta_p[(2*n + i)] = rmse(nls2.2, data = data)
  
  #Levene's Test for Homogeneity of Variance (center = median) for Rayleigh model (y = delta_p) (store p-value)
  nls2.2_delta_p_res <- nlsResiduals(nls2.2)
  
  data <- data %>% mutate(
  replicate = as.factor(.$replicate),
  nls2.2_delta_p_residuals = nls2.2_delta_p_res$resi1[ ,2]
)

  nls2.2_delta_p_lev <- car::leveneTest(nls2.2_delta_p_residuals ~ replicate, data = data)
  sim2_e9_rep$levene_delta_p_res[(2*n + i)] = nls2.2_delta_p_lev$`Pr(>F)`[1]
  
  ##Jarque-Bera Normality Test (store p-value)
  nls2.2_delta_p_JB <- jarque.test(data$nls2.2_delta_p_residuals)
  sim2_e9_rep$JB_delta_p_res[(2*n + i)] = nls2.2_delta_p_JB$p.value   
  
  #Skewness and kurtosis for nls2.2
  sim2_e9_rep$skew[(2*n + i)] = skewness(data$nls2.2_delta_p_residuals)
  
  if(sim2_e9_rep$skew[(2*n + i)] < -0.5) {
    sim2_e9_rep$skew_factor[(2*n + i)] = 2 #left-skew = 2
  } else if(sim2_e9_rep$skew[(2*n + i)] >= -0.5 & sim2_e9_rep$skew[(2*n + i)] <= 0.5) {
    sim2_e9_rep$skew_factor[(2*n + i)] = 1 #no skew = 1
  } else if (sim2_e9_rep$skew[(2*n + i)] > 0.5) {
    sim2_e9_rep$skew_factor[(2*n + i)] = 3 #right-skew = 3
  }
  
  sim2_e9_rep$kurt[(2*n + i)] = kurtosis(data$nls2.2_delta_p_residuals)
  
  #Add lm_skew_factor to nls2.2 rows for indexing (same for all models)
  sim2_e9_rep$lm_skew_factor[(2*n + i)] = sim2_e9_rep$skew_factor[i]   
  
  #Calculate rho and tau for nls2.2
  sim2_e9_rep$rho[(2*n + i)] = coef(nls2.2)
  sim2_e9_rep$se_rho[(2*n + i)] = summary(nls2.2)$coefficients[1,2]
  
  sim2_e9_rep$tau[(2*n + i)] = mean(data$tau)
  sim2_e9_rep$se_tau[(2*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e9_rep$f_min[(2*n + i)] = min(data$f)
  sim2_e9_rep$f_max[(2*n + i)] = max(data$f)
  
  #Calculate ff_alpha using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_alpha = rho/tau*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e9_rep$ff_alpha[(2*n + i)] = 
    (coef(nls2.2)/mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)
  
  #Calculate se_ff_alpha (standard error for ff_alpha) (nls2.2):
  #se_ff_alpha = sqrt((ff_p/tau*se_rho)^2 + (-rho*ff_p/tau^2*se_tau)^2+ (rho/tau*se_ff_p)^2)
  sim2_e9_rep$se_ff_alpha[(2*n + i)] = 
  sqrt((sim2_e9_rep$ff_p[i]/sim2_e9_rep$tau[(2*n + i)]*sim2_e9_rep$se_rho[(2*n + i)])^2 + (-coef(nls2.2)*sim2_e9_rep$ff_p[i]/sim2_e9_rep$tau[(2*n + i)]^2*sim2_e9_rep$se_tau[(2*n + i)])^2+ (coef(nls2.2)/sim2_e9_rep$tau[(2*n + i)]*sim2_e9_rep$se_ff_p[i])^2)
    
  #Calculate epsilon_alpha and se_epsilon_alpha (nls2.2):
  sim2_e9_rep$epsilon_alpha[(2*n + i)] = 1000*(sim2_e9_rep$ff_alpha[(2*n + i)] - 1)
  
  sim2_e9_rep$se_epsilon_alpha[(2*n + i)] =
    1000*sim2_e9_rep$se_ff_alpha[(2*n + i)]  
  
  #Calculate ff_beta using ff_p (standard Rayleigh), rho and tau (nls2.2):
  #ff_beta = (1-rho)/(1-tau)*ff_p
  #ff_p = 1 + epsilon_p/1000
  sim2_e9_rep$ff_beta[(2*n + i)] = 
    (1-coef(nls2.2))/(1-mean(data$tau))*(1 + lm_delta_p$coefficients[2]/1000)  
  
  #Calculate se_ff_beta (standard error for ff_beta) (nls2.2):
  #se_ff_beta = sqrt((-ff_p/(1-tau)*se_rho)^2 + ((1-rho)*ff_p/(1-tau)^2*se_tau)^2 + ((1-rho)/(1-tau)*se_ff_p)^2)
  
  sim2_e9_rep$se_ff_beta[(2*n + i)] = sqrt((-sim2_e9_rep$ff_p[i]/(1-mean(data$tau))*sim2_e9_rep$se_rho[(2*n + i)])^2 + ((1-coef(nls2.2))*sim2_e9_rep$ff_p[i]/(1-mean(data$tau))^2*sim2_e9_rep$se_tau[(2*n + i)])^2 + ((1-coef(nls2.2))/(1-mean(data$tau))*sim2_e9_rep$se_ff_p[i])^2) 
  
  #Calculate epsilon_beta and se_epsilon_beta (nls2.2):
  sim2_e9_rep$epsilon_beta[(2*n + i)] = 
    1000*(sim2_e9_rep$ff_beta[(2*n + i)] -1)
  sim2_e9_rep$se_epsilon_beta[(2*n + i)] =
    1000*sim2_e9_rep$se_ff_beta[(2*n + i)]  
  
  #Calculate KIE_alpha and KIE_beta (nls2.2):
  sim2_e9_rep$KIE_alpha[(2*n + i)] = 1000/(sim2_e9_rep$epsilon_alpha[(2*n + i)] +1000)
  
  #se_KIE_alpha = abs((-1/ff_alpha^2)*se_ff_alpha)
  sim2_e9_rep$se_KIE_alpha[(2*n + i)] = abs((-1/sim2_e9_rep$ff_alpha[(2*n + i)]^2)*sim2_e9_rep$se_ff_alpha[(2*n + i)])
  
  sim2_e9_rep$KIE_beta[(2*n + i)] = 1000/(sim2_e9_rep$epsilon_beta[(2*n + i)] +1000)
  
  sim2_e9_rep$se_KIE_beta[(2*n + i)] = abs((-1/sim2_e9_rep$ff_beta[(2*n + i)]^2)*sim2_e9_rep$se_ff_beta[(2*n + i)])
  
  #Calculate est_diff for epsilon values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e9_rep$diff_epsilon_alpha[(2*n + i)] =
    abs((sim2_e9_rep$epsilon_alpha[(2*n + i)] - sim2_tb2$epsilon_alpha[1])/
          sim2_tb2$epsilon_alpha[1])
  
  sim2_e9_rep$diff_epsilon_beta[(2*n + i)] =
    abs((sim2_e9_rep$epsilon_beta[(2*n + i)] - sim2_tb2$epsilon_beta[1])/
          sim2_tb2$epsilon_beta[1])  
  
  #Calculate est_diff for ff values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e9_rep$diff_ff_alpha[(2*n + i)] =
    abs((sim2_e9_rep$ff_alpha[(2*n + i)] - sim2_tb2$ff_alpha[1])/
          sim2_tb2$ff_alpha[1])
  
  sim2_e9_rep$diff_ff_beta[(2*n + i)] =
    abs((sim2_e9_rep$ff_beta[(2*n + i)] - sim2_tb2$ff_beta[1])/
          sim2_tb2$ff_beta[1])
  
  #Calculate est_diff for KIE values (nls2.2)
  #absolute relative difference = |(est-true)/true|
  sim2_e9_rep$diff_KIE_alpha[(2*n + i)] =
    abs((sim2_e9_rep$KIE_alpha[(2*n + i)] - sim2_tb2$KIE_alpha[1])/
          sim2_tb2$KIE_alpha[1])
  
  sim2_e9_rep$diff_KIE_beta[(2*n + i)] =
    abs((sim2_e9_rep$KIE_beta[(2*n + i)] - sim2_tb2$KIE_beta[1])/
          sim2_tb2$KIE_beta[1])
  
  #Calculate est_diff for rho value (nls2.2)
  sim2_e9_rep$diff_rho[(2*n + i)] = 
    abs((sim2_e9_rep$rho[(2*n + i)] - mean(sim2_tb2$rho, na.rm = TRUE))/
          mean(sim2_tb2$rho, na.rm = TRUE))  
  
  #add p-value for rho (parameter estimated from nls2.2; null hypothesis: rho = 0.5)
  t_test = (summary(nls2.2)$coefficients[1, 1] - 0.5)/
    summary(nls2.2)$coefficients[1, 2]
  sim2_e9_rep$pval[(2*n + i)] = 2*pt(q = t_test, df = df.residual(nls2.2), lower.tail = FALSE)  
  
  #add p-value for rho where the null hypothesis is rho = 0
  sim2_e9_rep$pval_rho_0[(2*n + i)] = summary(nls2.2)$coefficients[1, 4]
  
#average tau "model"
  #Calculate tau (same for all three models)
  sim2_e9_rep$tau[(3*n + i)] = mean(data$tau)
  sim2_e9_rep$se_tau[(3*n + i)] = std.error(data$tau)
  
  #Add min and max values to table (same for all three models)
  sim2_e9_rep$f_min[(3*n + i)] = min(data$f)
  sim2_e9_rep$f_max[(3*n + i)] = max(data$f)  
  
  sim2_e9_rep$skew[(3*n + i)] = skewness(data$tau)
  
  if(sim2_e9_rep$skew[(3*n + i)] < -0.5) {
    sim2_e9_rep$skew_factor[(3*n + i)] = 2 #left-skew = 2
  } else if(sim2_e9_rep$skew[(3*n + i)] >= -0.5 & sim2_e9_rep$skew[(3*n + i)] <= 0.5) {
    sim2_e9_rep$skew_factor[(3*n + i)] = 1 #no skew = 1
  } else if (sim2_e9_rep$skew[(3*n + i)] > 0.5) {
    sim2_e9_rep$skew_factor[(3*n + i)] = 3 #right-skew = 3
  }  
  
  sim2_e9_rep$kurt[(3*n + i)] = kurtosis(data$tau)
  
  #Add lm_skew_factor to average tau rows for indexing (same for all models)
  sim2_e9_rep$lm_skew_factor[(3*n + i)] = sim2_e9_rep$skew_factor[i] 
  
  #Calculate est_diff for tau value (same for linear and nonlinear models)
  sim2_e9_rep$diff_tau[(3*n + i)] = 
    abs((sim2_e9_rep$tau[(3*n + i)] - mean(sim2_tb2$tau, na.rm = TRUE))/
          mean(sim2_tb2$tau, na.rm = TRUE))   
  
  #Calculate p-value for average tau. Null hypothesis: tau = 0.5
  sim2_e9_rep$pval[(3*n + i)] = t.test(data$tau, mu = 0.5)$p.value
  
  #Calculate pval_tau_mean. Null hypothesis: tau = mean tau value from sim2 (no error dataset)
  sim2_e9_rep$pval_tau_mean[(3*n + i)] = t.test(data$tau, mu = mean(sim2_tb2$tau, na.rm = TRUE))$p.value
}


#Filter by skewness in linear model
sim2_e9_lm_left_skew <- filter(sim2_e9_rep[1:n, ], skew < -0.5)
sim2_e9_lm_no_skew <- filter(sim2_e9_rep[1:n, ], skew >= -0.5 & skew <= 0.5)
sim2_e9_lm_right_skew <- filter(sim2_e9_rep[1:n, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e9_nls1_left_skew <- filter(sim2_e9_rep[(n + 1):(n + n), ], skew < -0.5)
sim2_e9_nls1_no_skew <- filter(sim2_e9_rep[(n + 1):(n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e9_nls1_right_skew <- filter(sim2_e9_rep[(n + 1):(n + n), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e9_nls2_left_skew <- filter(sim2_e9_rep[(2*n + 1):(2*n + n), ], skew < -0.5)
sim2_e9_nls2_no_skew <- filter(sim2_e9_rep[(2*n + 1):(2*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e9_nls2_right_skew <- filter(sim2_e9_rep[(2*n + 1):(2*n + n), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e9_tau_left_skew <- filter(sim2_e9_rep[(3*n + 1):(3*n + n), ], skew < -0.5)
sim2_e9_tau_no_skew <- filter(sim2_e9_rep[(3*n + 1):(3*n + n), ], skew >= -0.5 & skew <= 0.5)
sim2_e9_tau_right_skew <- filter(sim2_e9_rep[(3*n + 1):(3*n + n), ], skew > 0.5)

#Filter by lm_skew_factor to select the rows for all four models (linear, nls1, nls2, and average tau) that correspond to datasets with right skew in the linear model.

#For datasets where the lm residuals are left skewed or not skewed, lm_skew_factor == 0 because that iteration was cut short ("next" function) before any non-zero values were stored in the table.

sim2_e9_rep2 <- filter(sim2_e9_rep, lm_skew_factor == 3)
nrep = nrow(sim2_e9_rep2)/m

#Filter by skewness in linear model
sim2_e9_lm_left_skew2 <- filter(sim2_e9_rep2[1:nrep, ], skew < -0.5)

sim2_e9_lm_no_skew2 <- filter(sim2_e9_rep2[1:nrep, ], skew >= -0.5 & skew <= 0.5)

sim2_e9_lm_right_skew2 <- filter(sim2_e9_rep2[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e9_nls1_left_skew2 <- filter(sim2_e9_rep2[(nrep + 1):(nrep + nrep), ], skew < -0.5)

sim2_e9_nls1_no_skew2 <- filter(sim2_e9_rep2[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e9_nls1_right_skew2 <- filter(sim2_e9_rep2[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e9_nls2_left_skew2 <- filter(sim2_e9_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)

sim2_e9_nls2_no_skew2 <- filter(sim2_e9_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e9_nls2_right_skew2 <- filter(sim2_e9_rep2[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in tau average
sim2_e9_tau_left_skew2 <- filter(sim2_e9_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)

sim2_e9_tau_no_skew2 <- filter(sim2_e9_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)

sim2_e9_tau_right_skew2 <- filter(sim2_e9_rep2[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

#Randomly remove extra rows from sim2_e9_rep2 so that there are 1000 replicates.
nremove <- nrow(sim2_e9_rep2)/m - 1000

#Make indexing vectors to remove the same datasets for each model
v1 <- sample(1:(nrow(sim2_e9_rep2)/m), size = nremove)
v2 <- c(v1, (v1 + nrep), (v1 + 2*nrep), (v1 + 3*nrep))

sim2_e9_rep3 <- sim2_e9_rep2[-v2, ]


#Reset nrep
nrep = nrow(sim2_e9_rep3)/m

#Count the final number of no skew, left skew, and right-skew data in sim2_e9_rep3
#Filter by skewness in linear model
sim2_e9_lm_left_skew3 <- filter(sim2_e9_rep3[1:nrep, ], skew < -0.5)
sim2_e9_lm_no_skew3 <- filter(sim2_e9_rep3[1:nrep, ], skew >= -0.5 & skew <= 0.5)
sim2_e9_lm_right_skew3 <- filter(sim2_e9_rep3[1:nrep, ], skew > 0.5)

#Filter by skewness in nls1
sim2_e9_nls1_left_skew3 <- filter(sim2_e9_rep3[(nrep + 1):(nrep + nrep), ], skew < -0.5)
sim2_e9_nls1_no_skew3 <- filter(sim2_e9_rep3[(nrep + 1):(nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e9_nls1_right_skew3 <- filter(sim2_e9_rep3[(nrep + 1):(nrep + nrep), ], skew > 0.5)

#Filter by skewness in nls2
sim2_e9_nls2_left_skew3 <- filter(sim2_e9_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew < -0.5)
sim2_e9_nls2_no_skew3 <- filter(sim2_e9_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e9_nls2_right_skew3 <- filter(sim2_e9_rep3[(2*nrep + 1):(2*nrep + nrep), ], skew > 0.5)

#Filter by skewness in average tau
sim2_e9_tau_left_skew3 <- filter(sim2_e9_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew < -0.5)
sim2_e9_tau_no_skew3 <- filter(sim2_e9_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew >= -0.5 & skew <= 0.5)
sim2_e9_tau_right_skew3 <- filter(sim2_e9_rep3[(3*nrep + 1):(3*nrep + nrep), ], skew > 0.5)

##Significant p-values for linear model slope
sim2_e9_lm_pval_sig = filter(sim2_e9_rep3[1:nrep, ], pval < 0.05)
sim2_e9_lm_delta_alpha_pval_sig <- filter(sim2_e9_rep3[1:nrep, ], 
                                         pval_slope_delta_alpha < 0.05)
sim2_e9_lm_delta_beta_pval_sig <- filter(sim2_e9_rep3[1:nrep, ], 
                                         pval_slope_delta_beta < 0.05)

##Significant p-values for nls1 rho (coefficient)
sim2_e9_nls1_pval_sig <- filter(sim2_e9_rep3[(nrep + 1):(nrep + nrep), ], pval < 0.05)

##Significant p-values for nls2 rho (coefficient)
sim2_e9_nls2_pval_sig <- filter(sim2_e9_rep3[(2*nrep + 1):(2*nrep + nrep), ], pval < 0.05)

##Significant p-values for tau average
sim2_e9_tau_pval_sig <- filter(sim2_e9_rep3[(3*nrep + 1):(3*nrep + nrep), ], pval < 0.05)

##Average results and calculate standard deviation for sim2_e9_rep3 (low error, left skew) (This code needs to be in same block as the for loop so that nrep doesn't get reset.)

avg_sim2_e9_lm_right_skew <- tibble(
  mean_Ray = colMeans(sim2_e9_rep3[1:nrep, ]),
  mean_nls1 = colMeans(sim2_e9_rep3[(nrep + 1):(nrep + nrep), ]),
  mean_nls2 = colMeans(sim2_e9_rep3[(2*nrep + 1):(2*nrep + nrep), ]),
  mean_tau = colMeans(sim2_e9_rep3[(3*nrep + 1):(3*nrep + nrep), ]),  
  sd_Ray = sapply(sim2_e9_rep3[1:nrep, ], sd),
  sd_nls1 = sapply(sim2_e9_rep3[(nrep + 1):(nrep + nrep), ], sd),
  sd_nls2 = sapply(sim2_e9_rep3[(2*nrep + 1):(2*nrep + nrep), ], sd),
  sd_tau = sapply(sim2_e9_rep3[(3*nrep + 1):(3*nrep + nrep), ], sd)  
) %>% t()  #Flip (transpose) table

colnames(avg_sim2_e9_lm_right_skew) <- colnames(sim2_e9_rep)

avg_sim2_e9_lm_right_skew <- as_tibble(avg_sim2_e9_lm_right_skew, rownames = NA)

```

#Make table with KIE values for the sim2 dataset without error (all three models)

##Requires running `blank_single` code chunk
```{r sim2_KIE_no_error}
sim2_KIE_no_error <- sim2_no_error <- blank_single(n = 4)

#KIE_p
sim2_KIE_no_error$KIE_p[1] = mean(sim2_tb2$KIE_p, na.rm = TRUE)
sim2_KIE_no_error$KIE_p[2] = as.numeric(sim2_KIE_p_std)
sim2_KIE_no_error$KIE_p[3] = sim2_nls1.2_tb$KIE_p
sim2_KIE_no_error$KIE_p[4] = sim2_nls2.2_tb$KIE_p

#KIE_alpha
sim2_KIE_no_error$KIE_alpha[1] = mean(sim2_tb2$KIE_alpha, na.rm = TRUE)
sim2_KIE_no_error$KIE_alpha[2] = as.numeric(sim2_KIE_alpha_std)
sim2_KIE_no_error$KIE_alpha[3] = sim2_nls1.2_tb$KIE_alpha
sim2_KIE_no_error$KIE_alpha[4] = sim2_nls2.2_tb$KIE_alpha

#KIE_beta
sim2_KIE_no_error$KIE_beta[1] = mean(sim2_tb2$KIE_beta, na.rm = TRUE)
sim2_KIE_no_error$KIE_beta[2] = as.numeric(sim2_KIE_beta_std2)
sim2_KIE_no_error$KIE_beta[3] = sim2_nls1.2_tb$KIE_beta
sim2_KIE_no_error$KIE_beta[4] = sim2_nls2.2_tb$KIE_beta

(sim2_KIE_no_error <- sim2_KIE_no_error %>% mutate(
    Model = c(
    "Actual",
    "Standard Rayleigh",
    "Rayleigh + Nls1.2",
    "Rayleigh + Nls2.2"
  ),
  
  KIE_p =  unlist(sim2_KIE_no_error$KIE_p),
  KIE_alpha = unlist(sim2_KIE_no_error$KIE_alpha),
  KIE_beta = unlist(sim2_KIE_no_error$KIE_beta)
)%>%
    select(`Model`, everything()) %>%
    select(Model, KIE_p, KIE_alpha, KIE_beta)
)

write.csv(sim2_KIE_no_error, here("data/output/sim2/sim2_KIE_no_error.csv"), row.names = TRUE)

#Flip (transpose) table
(sim2_KIE_no_error_flip <- sim2_KIE_no_error %>% t())
write.csv(sim2_KIE_no_error_flip, here("data/output/sim2/sim2_KIE_no_error_flip.csv"), row.names = TRUE)
```

#Make empty summary table to store the average results from 1000 simulations for Expanded Rayleigh 1-2.

Remove or rename model-specific values (rmse...)
```{r blank_sim2_summary_v2}
#Replace se with sd. For data w/ error, will report the standard deviation (sd) of 1000 simulations.

#Remove RMSE_delta_alpha and RMSE_delta_beta
  
blank_sim2_summary_v2 <- function(n) {
  tibble(
  Dataset = vector(length = n, mode = "expression"),
  Description = vector(length = n, mode = "expression"),
  Model = vector(length = n, mode = "expression"),
  Resid_size = vector(length = n, mode = "expression"),
  Resid_skew = vector(length = n, mode = "expression"),
  Subset = vector(length = n, mode = "expression"),  
    
  Multiple_R_squared = vector(length = n, mode = "numeric"),
  sd_R_squared = vector(length = n, mode = "numeric"),
  
  lm_RMSE = vector(length = n, mode = "numeric"),
  sd_lm_RMSE = vector(length = n, mode = "numeric"),
  
  nls_RMSE = vector(length = n, mode = "numeric"),
  sd_nls_RMSE = vector(length = n, mode = "numeric"),
  
  f_min = vector(length = n, mode = "numeric"),
  sd_f_min = vector(length = n, mode = "numeric"),
  
  f_max = vector(length = n, mode = "numeric"),
  sd_f_max = vector(length = n, mode = "numeric"),
  
  delta_s0 = vector(length = n, mode = "numeric"),
  sd_delta_s0 = vector(length = n, mode = "numeric"),
  
  rho = vector(length = n, mode = "numeric"),
  sd_rho = vector(length = n, mode = "numeric"),
  
  tau = vector(length = n, mode = "numeric"),
  sd_tau = vector(length = n, mode = "numeric"),
  
  epsilon_p = vector(length = n, mode = "numeric"),
  sd_epsilon_p = vector(length = n, mode = "numeric"),
  
  epsilon_alpha = vector(length = n, mode = "numeric"),
  sd_epsilon_alpha = vector(length = n, mode = "numeric"),
  
  epsilon_beta = vector(length = n, mode = "numeric"),
  sd_epsilon_beta = vector(length = n, mode = "numeric"),  
  
  ff_p = vector(length = n, mode = "numeric"),
  sd_ff_p = vector(length = n, mode = "numeric"),
  ff_alpha = vector(length = n, mode = "numeric"),
  sd_ff_alpha = vector(length = n, mode = "numeric"),
  ff_beta = vector(length = n, mode = "numeric"),
  sd_ff_beta = vector(length = n, mode = "numeric"),
  
  KIE_p = vector(length = n, mode = "numeric"),
  sd_KIE_p = vector(length = n, mode = "numeric"),
  KIE_alpha = vector(length = n, mode = "numeric"),
  sd_KIE_alpha = vector(length = n, mode = "numeric"),
  KIE_beta = vector(length = n, mode = "numeric"),
  sd_KIE_beta = vector(length = n, mode = "numeric")
)
}
```

#Make summary table with average values and standard deviations for 1000 simulations (no error and e1-e9) for Expanded Rayleigh 1 and 2 only

```{r sim2_summary_ER}
#number of rows = n*m = 1 actual +(e1:e9)*2 = 19
n = 19

#Make an empty table with the appropriate number of rows.
sim2_summary_ER <- blank_sim2_summary_v2(n = n)

#m = number of models
m = 2

#Add simulation details
sim2_summary_ER <- sim2_summary_ER %>% mutate(
    Dataset = c("sim2",
      rep(c(
     "sim2_e1",
     "sim2_e4",
     "sim2_e7",
     "sim2_e2",
     "sim2_e5",
     "sim2_e8",
     "sim2_e3",
     "sim2_e6",
     "sim2_e9"
     ), m)
     ),
 
  Description = c("No error",
    rep(c(
     "Low error, no skew",
     "Low error, left skew",
     "Low error, right skew",
     "Medium error, no skew",
     "Medium error, left skew",
     "Medium error, right skew",
     "High error, no skew",
     "High error, left skew",
     "High error, right skew"
     ), m)
    ),  
   
  Model = c("Actual",
    rep(c(
    "Rayleigh + Nls1.2",
    "Rayleigh + Nls2.2"
  ), each = 9)
  ),
  
  Resid_size = c("None",
    rep(
    rep(c(
    "Low",
    "Medium",
    "High"
  ), each = 3), m)
  ),
  
  Resid_skew = c("No",
    rep(
    rep(c(
    "No",
    "Left",
    "Right"
  ), 3), m)
  ),
  
  Subset = rep("0.25 < f < 0.75", n)
)

sim2_summary_ER$Multiple_R_squared = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$Multiple_R_squared[1],
     avg_sim2_e4_lm_left_skew$Multiple_R_squared[1],
     avg_sim2_e7_lm_right_skew$Multiple_R_squared[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$Multiple_R_squared[1],
     avg_sim2_e5_lm_left_skew$Multiple_R_squared[1],
     avg_sim2_e8_lm_right_skew$Multiple_R_squared[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$Multiple_R_squared[1],
     avg_sim2_e6_lm_left_skew$Multiple_R_squared[1],
     avg_sim2_e9_lm_right_skew$Multiple_R_squared[1]
   ), m)
 )

sim2_summary_ER$sd_R_squared = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$Multiple_R_squared[5],
     avg_sim2_e4_lm_left_skew$Multiple_R_squared[5],
     avg_sim2_e7_lm_right_skew$Multiple_R_squared[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$Multiple_R_squared[5],
     avg_sim2_e5_lm_left_skew$Multiple_R_squared[5],
     avg_sim2_e8_lm_right_skew$Multiple_R_squared[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$Multiple_R_squared[5],
     avg_sim2_e6_lm_left_skew$Multiple_R_squared[5],
     avg_sim2_e9_lm_right_skew$Multiple_R_squared[5]
   ), m)
 )

sim2_summary_ER$lm_RMSE = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[1],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[1],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[1],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[1],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[1],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[1],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[1]
   ), m)
 )


sim2_summary_ER$sd_lm_RMSE = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[5],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[5],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[5],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[5],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[5],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[5],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[5]
   ), m)
 )

 sim2_summary_ER$nls_RMSE = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[2],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[2],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[2],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[2],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[2],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[2],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[3],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[3],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[3],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[3],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[3],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[3],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[3]  
 )

 sim2_summary_ER$sd_nls_RMSE = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[6],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[6],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[6],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[6],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[6],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[6],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[7],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[7],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[7],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[7],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[7],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[7],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[7]  
 )
 
 sim2_summary_ER$f_min = c(
   min(sim2_tb2$f),
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$f_min[1],
     avg_sim2_e4_lm_left_skew$f_min[1],
     avg_sim2_e7_lm_right_skew$f_min[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$f_min[1],
     avg_sim2_e5_lm_left_skew$f_min[1],
     avg_sim2_e8_lm_right_skew$f_min[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$f_min[1],
     avg_sim2_e6_lm_left_skew$f_min[1],
     avg_sim2_e9_lm_right_skew$f_min[1]
   ), m)
 )
 
  sim2_summary_ER$sd_f_min = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$f_min[5],
     avg_sim2_e4_lm_left_skew$f_min[5],
     avg_sim2_e7_lm_right_skew$f_min[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$f_min[5],
     avg_sim2_e5_lm_left_skew$f_min[5],
     avg_sim2_e8_lm_right_skew$f_min[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$f_min[5],
     avg_sim2_e6_lm_left_skew$f_min[5],
     avg_sim2_e9_lm_right_skew$f_min[5]
   ), m)
 )
 
 sim2_summary_ER$f_max = c(
   max(sim2_tb2$f),
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$f_max[1],
     avg_sim2_e4_lm_left_skew$f_max[1],
     avg_sim2_e7_lm_right_skew$f_max[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$f_max[1],
     avg_sim2_e5_lm_left_skew$f_max[1],
     avg_sim2_e8_lm_right_skew$f_max[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$f_max[1],
     avg_sim2_e6_lm_left_skew$f_max[1],
     avg_sim2_e9_lm_right_skew$f_max[1]
   ), m)
 )
 
  sim2_summary_ER$sd_f_max = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$f_max[5],
     avg_sim2_e4_lm_left_skew$f_max[5],
     avg_sim2_e7_lm_right_skew$f_max[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$f_max[5],
     avg_sim2_e5_lm_left_skew$f_max[5],
     avg_sim2_e8_lm_right_skew$f_max[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$f_max[5],
     avg_sim2_e6_lm_left_skew$f_max[5],
     avg_sim2_e9_lm_right_skew$f_max[5]
   ), m)
 )  

 sim2_summary_ER$delta_s0 = c(
   sim2_tb2$delta_s0[1],
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$delta_s0[1],
     avg_sim2_e4_lm_left_skew$delta_s0[1],
     avg_sim2_e7_lm_right_skew$delta_s0[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$delta_s0[1],
     avg_sim2_e5_lm_left_skew$delta_s0[1],
     avg_sim2_e8_lm_right_skew$delta_s0[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$delta_s0[1],
     avg_sim2_e6_lm_left_skew$delta_s0[1],
     avg_sim2_e9_lm_right_skew$delta_s0[1]
   ), m)
 )
 
  sim2_summary_ER$sd_delta_s0 = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$delta_s0[5],
     avg_sim2_e4_lm_left_skew$delta_s0[5],
     avg_sim2_e7_lm_right_skew$delta_s0[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$delta_s0[5],
     avg_sim2_e5_lm_left_skew$delta_s0[5],
     avg_sim2_e8_lm_right_skew$delta_s0[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$delta_s0[5],
     avg_sim2_e6_lm_left_skew$delta_s0[5],
     avg_sim2_e9_lm_right_skew$delta_s0[5]
   ), m)
 )
  
 sim2_summary_ER$rho = c(
   mean(sim2_tb2$rho, na.rm = TRUE), #mean rho for f values between 0.7 & 0.3 (inclusive)
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$rho[2],
     avg_sim2_e4_lm_left_skew$rho[2],
     avg_sim2_e7_lm_right_skew$rho[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$rho[2],
     avg_sim2_e5_lm_left_skew$rho[2],
     avg_sim2_e8_lm_right_skew$rho[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$rho[2],
     avg_sim2_e6_lm_left_skew$rho[2],
     avg_sim2_e9_lm_right_skew$rho[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$rho[3],
     avg_sim2_e4_lm_left_skew$rho[3],
     avg_sim2_e7_lm_right_skew$rho[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$rho[3],
     avg_sim2_e5_lm_left_skew$rho[3],
     avg_sim2_e8_lm_right_skew$rho[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$rho[3],
     avg_sim2_e6_lm_left_skew$rho[3],
     avg_sim2_e9_lm_right_skew$rho[3]  
 )

 sim2_summary_ER$sd_rho = c(
   sd(sim2_tb2$rho, na.rm = TRUE),
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$rho[6],
     avg_sim2_e4_lm_left_skew$rho[6],
     avg_sim2_e7_lm_right_skew$rho[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$rho[6],
     avg_sim2_e5_lm_left_skew$rho[6],
     avg_sim2_e8_lm_right_skew$rho[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$rho[6],
     avg_sim2_e6_lm_left_skew$rho[6],
     avg_sim2_e9_lm_right_skew$rho[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$rho[7],
     avg_sim2_e4_lm_left_skew$rho[7],
     avg_sim2_e7_lm_right_skew$rho[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$rho[7],
     avg_sim2_e5_lm_left_skew$rho[7],
     avg_sim2_e8_lm_right_skew$rho[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$rho[7],
     avg_sim2_e6_lm_left_skew$rho[7],
     avg_sim2_e9_lm_right_skew$rho[7]  
 )
 
  sim2_summary_ER$tau = c(
   mean(sim2_tb2$tau, na.rm = TRUE), #mean tau for f values between 0.7 & 0.3 (inclusive)
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$tau[2],
     avg_sim2_e4_lm_left_skew$tau[2],
     avg_sim2_e7_lm_right_skew$tau[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$tau[2],
     avg_sim2_e5_lm_left_skew$tau[2],
     avg_sim2_e8_lm_right_skew$tau[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$tau[2],
     avg_sim2_e6_lm_left_skew$tau[2],
     avg_sim2_e9_lm_right_skew$tau[2]
   ), m)
 )
 
  sim2_summary_ER$sd_tau = c(
   sd(sim2_tb2$tau, na.rm = TRUE),
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$tau[6],
     avg_sim2_e4_lm_left_skew$tau[6],
     avg_sim2_e7_lm_right_skew$tau[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$tau[6],
     avg_sim2_e5_lm_left_skew$tau[6],
     avg_sim2_e8_lm_right_skew$tau[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$tau[6],
     avg_sim2_e6_lm_left_skew$tau[6],
     avg_sim2_e9_lm_right_skew$tau[6]
   ), m)
 )

 sim2_summary_ER$epsilon_p = c(
   sim2_tb2$epsilon_bulk[1],
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_p[1],
     avg_sim2_e4_lm_left_skew$epsilon_p[1],
     avg_sim2_e7_lm_right_skew$epsilon_p[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_p[1],
     avg_sim2_e5_lm_left_skew$epsilon_p[1],
     avg_sim2_e8_lm_right_skew$epsilon_p[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_p[1],
     avg_sim2_e6_lm_left_skew$epsilon_p[1],
     avg_sim2_e9_lm_right_skew$epsilon_p[1]
   ), m)
 )
 
  sim2_summary_ER$sd_epsilon_p = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_p[5],
     avg_sim2_e4_lm_left_skew$epsilon_p[5],
     avg_sim2_e7_lm_right_skew$epsilon_p[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_p[5],
     avg_sim2_e5_lm_left_skew$epsilon_p[5],
     avg_sim2_e8_lm_right_skew$epsilon_p[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_p[5],
     avg_sim2_e6_lm_left_skew$epsilon_p[5],
     avg_sim2_e9_lm_right_skew$epsilon_p[5]
   ), m)
 )
  
 sim2_summary_ER$epsilon_alpha = c(
   sim2_tb2$epsilon_alpha[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_alpha[2],
     avg_sim2_e4_lm_left_skew$epsilon_alpha[2],
     avg_sim2_e7_lm_right_skew$epsilon_alpha[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_alpha[2],
     avg_sim2_e5_lm_left_skew$epsilon_alpha[2],
     avg_sim2_e8_lm_right_skew$epsilon_alpha[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_alpha[2],
     avg_sim2_e6_lm_left_skew$epsilon_alpha[2],
     avg_sim2_e9_lm_right_skew$epsilon_alpha[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_alpha[3],
     avg_sim2_e4_lm_left_skew$epsilon_alpha[3],
     avg_sim2_e7_lm_right_skew$epsilon_alpha[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_alpha[3],
     avg_sim2_e5_lm_left_skew$epsilon_alpha[3],
     avg_sim2_e8_lm_right_skew$epsilon_alpha[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_alpha[3],
     avg_sim2_e6_lm_left_skew$epsilon_alpha[3],
     avg_sim2_e9_lm_right_skew$epsilon_alpha[3]  
 )

 sim2_summary_ER$sd_epsilon_alpha = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_alpha[6],
     avg_sim2_e4_lm_left_skew$epsilon_alpha[6],
     avg_sim2_e7_lm_right_skew$epsilon_alpha[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_alpha[6],
     avg_sim2_e5_lm_left_skew$epsilon_alpha[6],
     avg_sim2_e8_lm_right_skew$epsilon_alpha[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_alpha[6],
     avg_sim2_e6_lm_left_skew$epsilon_alpha[6],
     avg_sim2_e9_lm_right_skew$epsilon_alpha[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_alpha[7],
     avg_sim2_e4_lm_left_skew$epsilon_alpha[7],
     avg_sim2_e7_lm_right_skew$epsilon_alpha[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_alpha[7],
     avg_sim2_e5_lm_left_skew$epsilon_alpha[7],
     avg_sim2_e8_lm_right_skew$epsilon_alpha[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_alpha[7],
     avg_sim2_e6_lm_left_skew$epsilon_alpha[7],
     avg_sim2_e9_lm_right_skew$epsilon_alpha[7]  
 )
 
  sim2_summary_ER$epsilon_beta = c(
   sim2_tb2$epsilon_beta[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_beta[2], #Need to rename tables
     avg_sim2_e4_lm_left_skew$epsilon_beta[2],
     avg_sim2_e7_lm_right_skew$epsilon_beta[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_beta[2],
     avg_sim2_e5_lm_left_skew$epsilon_beta[2],
     avg_sim2_e8_lm_right_skew$epsilon_beta[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_beta[2],
     avg_sim2_e6_lm_left_skew$epsilon_beta[2],
     avg_sim2_e9_lm_right_skew$epsilon_beta[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_beta[3], #Need to rename tables
     avg_sim2_e4_lm_left_skew$epsilon_beta[3],
     avg_sim2_e7_lm_right_skew$epsilon_beta[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_beta[3],
     avg_sim2_e5_lm_left_skew$epsilon_beta[3],
     avg_sim2_e8_lm_right_skew$epsilon_beta[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_beta[3],
     avg_sim2_e6_lm_left_skew$epsilon_beta[3],
     avg_sim2_e9_lm_right_skew$epsilon_beta[3]  
 )

 sim2_summary_ER$sd_epsilon_beta = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_beta[6], #Need to rename tables
     avg_sim2_e4_lm_left_skew$epsilon_beta[6],
     avg_sim2_e7_lm_right_skew$epsilon_beta[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_beta[6],
     avg_sim2_e5_lm_left_skew$epsilon_beta[6],
     avg_sim2_e8_lm_right_skew$epsilon_beta[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_beta[6],
     avg_sim2_e6_lm_left_skew$epsilon_beta[6],
     avg_sim2_e9_lm_right_skew$epsilon_beta[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_beta[7], #Need to rename tables
     avg_sim2_e4_lm_left_skew$epsilon_beta[7],
     avg_sim2_e7_lm_right_skew$epsilon_beta[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_beta[7],
     avg_sim2_e5_lm_left_skew$epsilon_beta[7],
     avg_sim2_e8_lm_right_skew$epsilon_beta[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_beta[7],
     avg_sim2_e6_lm_left_skew$epsilon_beta[7],
     avg_sim2_e9_lm_right_skew$epsilon_beta[7]  
 )
 
 sim2_summary_ER$ff_p = c(
   sim2_tb2$ff_p[1],
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_p[1], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_p[1],
     avg_sim2_e7_lm_right_skew$ff_p[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_p[1],
     avg_sim2_e5_lm_left_skew$ff_p[1],
     avg_sim2_e8_lm_right_skew$ff_p[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_p[1],
     avg_sim2_e6_lm_left_skew$ff_p[1],
     avg_sim2_e9_lm_right_skew$ff_p[1]
   ), m)
 )
 
  sim2_summary_ER$sd_ff_p = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_p[5], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_p[5],
     avg_sim2_e7_lm_right_skew$ff_p[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_p[5],
     avg_sim2_e5_lm_left_skew$ff_p[5],
     avg_sim2_e8_lm_right_skew$ff_p[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_p[5],
     avg_sim2_e6_lm_left_skew$ff_p[5],
     avg_sim2_e9_lm_right_skew$ff_p[5]
   ), m)
 ) 

 sim2_summary_ER$ff_alpha = c(
   sim2_tb2$ff_alpha[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_alpha[2], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_alpha[2],
     avg_sim2_e7_lm_right_skew$ff_alpha[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_alpha[2],
     avg_sim2_e5_lm_left_skew$ff_alpha[2],
     avg_sim2_e8_lm_right_skew$ff_alpha[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_alpha[2],
     avg_sim2_e6_lm_left_skew$ff_alpha[2],
     avg_sim2_e9_lm_right_skew$ff_alpha[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_alpha[3], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_alpha[3],
     avg_sim2_e7_lm_right_skew$ff_alpha[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_alpha[3],
     avg_sim2_e5_lm_left_skew$ff_alpha[3],
     avg_sim2_e8_lm_right_skew$ff_alpha[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_alpha[3],
     avg_sim2_e6_lm_left_skew$ff_alpha[3],
     avg_sim2_e9_lm_right_skew$ff_alpha[3]  
 )

 sim2_summary_ER$sd_ff_alpha = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_alpha[6], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_alpha[6],
     avg_sim2_e7_lm_right_skew$ff_alpha[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_alpha[6],
     avg_sim2_e5_lm_left_skew$ff_alpha[6],
     avg_sim2_e8_lm_right_skew$ff_alpha[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_alpha[6],
     avg_sim2_e6_lm_left_skew$ff_alpha[6],
     avg_sim2_e9_lm_right_skew$ff_alpha[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_alpha[7], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_alpha[7],
     avg_sim2_e7_lm_right_skew$ff_alpha[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_alpha[7],
     avg_sim2_e5_lm_left_skew$ff_alpha[7],
     avg_sim2_e8_lm_right_skew$ff_alpha[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_alpha[7],
     avg_sim2_e6_lm_left_skew$ff_alpha[7],
     avg_sim2_e9_lm_right_skew$ff_alpha[7]  
 )  
  
  sim2_summary_ER$ff_beta = c(
   sim2_tb2$ff_beta[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_beta[2], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_beta[2],
     avg_sim2_e7_lm_right_skew$ff_beta[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_beta[2],
     avg_sim2_e5_lm_left_skew$ff_beta[2],
     avg_sim2_e8_lm_right_skew$ff_beta[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_beta[2],
     avg_sim2_e6_lm_left_skew$ff_beta[2],
     avg_sim2_e9_lm_right_skew$ff_beta[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_beta[3], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_beta[3],
     avg_sim2_e7_lm_right_skew$ff_beta[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_beta[3],
     avg_sim2_e5_lm_left_skew$ff_beta[3],
     avg_sim2_e8_lm_right_skew$ff_beta[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_beta[3],
     avg_sim2_e6_lm_left_skew$ff_beta[3],
     avg_sim2_e9_lm_right_skew$ff_beta[3]  
 )

 sim2_summary_ER$sd_ff_beta = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_beta[6], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_beta[6],
     avg_sim2_e7_lm_right_skew$ff_beta[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_beta[6],
     avg_sim2_e5_lm_left_skew$ff_beta[6],
     avg_sim2_e8_lm_right_skew$ff_beta[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_beta[6],
     avg_sim2_e6_lm_left_skew$ff_beta[6],
     avg_sim2_e9_lm_right_skew$ff_beta[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_beta[7], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_beta[7],
     avg_sim2_e7_lm_right_skew$ff_beta[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_beta[7],
     avg_sim2_e5_lm_left_skew$ff_beta[7],
     avg_sim2_e8_lm_right_skew$ff_beta[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_beta[7],
     avg_sim2_e6_lm_left_skew$ff_beta[7],
     avg_sim2_e9_lm_right_skew$ff_beta[7]  
 )  

 sim2_summary_ER$KIE_p = c(
   sim2_tb2$KIE_p[1],
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_p[1], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_p[1],
     avg_sim2_e7_lm_right_skew$KIE_p[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_p[1],
     avg_sim2_e5_lm_left_skew$KIE_p[1],
     avg_sim2_e8_lm_right_skew$KIE_p[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_p[1],
     avg_sim2_e6_lm_left_skew$KIE_p[1],
     avg_sim2_e9_lm_right_skew$KIE_p[1]
   ), m)
 )
 
  sim2_summary_ER$sd_KIE_p = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_p[5], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_p[5],
     avg_sim2_e7_lm_right_skew$KIE_p[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_p[5],
     avg_sim2_e5_lm_left_skew$KIE_p[5],
     avg_sim2_e8_lm_right_skew$KIE_p[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_p[5],
     avg_sim2_e6_lm_left_skew$KIE_p[5],
     avg_sim2_e9_lm_right_skew$KIE_p[5]
   ), m)
 )  

 sim2_summary_ER$KIE_alpha = c(
   sim2_tb2$KIE_alpha[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_alpha[2], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_alpha[2],
     avg_sim2_e7_lm_right_skew$KIE_alpha[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_alpha[2],
     avg_sim2_e5_lm_left_skew$KIE_alpha[2],
     avg_sim2_e8_lm_right_skew$KIE_alpha[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_alpha[2],
     avg_sim2_e6_lm_left_skew$KIE_alpha[2],
     avg_sim2_e9_lm_right_skew$KIE_alpha[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_alpha[3], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_alpha[3],
     avg_sim2_e7_lm_right_skew$KIE_alpha[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_alpha[3],
     avg_sim2_e5_lm_left_skew$KIE_alpha[3],
     avg_sim2_e8_lm_right_skew$KIE_alpha[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_alpha[3],
     avg_sim2_e6_lm_left_skew$KIE_alpha[3],
     avg_sim2_e9_lm_right_skew$KIE_alpha[3]  
 )

 sim2_summary_ER$sd_KIE_alpha = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_alpha[6], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_alpha[6],
     avg_sim2_e7_lm_right_skew$KIE_alpha[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_alpha[6],
     avg_sim2_e5_lm_left_skew$KIE_alpha[6],
     avg_sim2_e8_lm_right_skew$KIE_alpha[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_alpha[6],
     avg_sim2_e6_lm_left_skew$KIE_alpha[6],
     avg_sim2_e9_lm_right_skew$KIE_alpha[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_alpha[7], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_alpha[7],
     avg_sim2_e7_lm_right_skew$KIE_alpha[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_alpha[7],
     avg_sim2_e5_lm_left_skew$KIE_alpha[7],
     avg_sim2_e8_lm_right_skew$KIE_alpha[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_alpha[7],
     avg_sim2_e6_lm_left_skew$KIE_alpha[7],
     avg_sim2_e9_lm_right_skew$KIE_alpha[7]  
 )  
  
  sim2_summary_ER$KIE_beta = c(
   sim2_tb2$KIE_beta[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_beta[2], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_beta[2],
     avg_sim2_e7_lm_right_skew$KIE_beta[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_beta[2],
     avg_sim2_e5_lm_left_skew$KIE_beta[2],
     avg_sim2_e8_lm_right_skew$KIE_beta[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_beta[2],
     avg_sim2_e6_lm_left_skew$KIE_beta[2],
     avg_sim2_e9_lm_right_skew$KIE_beta[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_beta[3], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_beta[3],
     avg_sim2_e7_lm_right_skew$KIE_beta[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_beta[3],
     avg_sim2_e5_lm_left_skew$KIE_beta[3],
     avg_sim2_e8_lm_right_skew$KIE_beta[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_beta[3],
     avg_sim2_e6_lm_left_skew$KIE_beta[3],
     avg_sim2_e9_lm_right_skew$KIE_beta[3]  
 )

 sim2_summary_ER$sd_KIE_beta = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_beta[6], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_beta[6],
     avg_sim2_e7_lm_right_skew$KIE_beta[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_beta[6],
     avg_sim2_e5_lm_left_skew$KIE_beta[6],
     avg_sim2_e8_lm_right_skew$KIE_beta[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_beta[6],
     avg_sim2_e6_lm_left_skew$KIE_beta[6],
     avg_sim2_e9_lm_right_skew$KIE_beta[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_beta[7], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_beta[7],
     avg_sim2_e7_lm_right_skew$KIE_beta[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_beta[7],
     avg_sim2_e5_lm_left_skew$KIE_beta[7],
     avg_sim2_e8_lm_right_skew$KIE_beta[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_beta[7],
     avg_sim2_e6_lm_left_skew$KIE_beta[7],
     avg_sim2_e9_lm_right_skew$KIE_beta[7]  
 )  
           
(sim2_summary_ER) 

write.csv(sim2_summary_ER, here("data/output/sim2/sim2_summary_ER.csv"), row.names = TRUE)
```

#sim2_summary_ER_2: Paste mean +/- standard deviation (Expanded Rayleigh only)

##Table S10 is a subset of this table

Remove unneeded columns (standard error, etc)

When the .csv file is opened in Excel, a funky symbol is included with the +/- symbol, but that can be removed with find and replace.
```{r sim2_summary_ER_2}

(sim2_summary_ER_2 <- sim2_summary_ER %>% mutate(
  Multiple_R_squared = c(paste(sim2_summary_ER$Multiple_R_squared[1]),
    paste(round(as.numeric(sim2_summary_ER$Multiple_R_squared[2:19]), 2), "\u00B1", round(as.numeric(sim2_summary_ER$sd_R_squared[2:19]), 2))
  ),
  
  lm_RMSE = c(paste(sim2_summary_ER$lm_RMSE[1]),
    paste(round(as.numeric(sim2_summary_ER$lm_RMSE[2:19]), 2), "\u00B1", round(as.numeric(sim2_summary_ER$sd_lm_RMSE[2:19]), 2))
  ),
  
  nls_RMSE = c(paste(sim2_summary_ER$nls_RMSE[1]),
    paste(round(as.numeric(sim2_summary_ER$nls_RMSE[2:19]), 2), "\u00B1", round(as.numeric(sim2_summary_ER$sd_nls_RMSE[2:19]), 2))
  ),
  
  f_min = c(paste(sim2_summary_ER$f_min[1], "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$f_min[2:19]), 2), "\u00B1", round(as.numeric(sim2_summary_ER$sd_f_min[2:19]), 2))
  ),
  
  f_max = c(paste(sim2_summary_ER$f_max[1], "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$f_max[2:19]), 2), "\u00B1", round(as.numeric(sim2_summary_ER$sd_f_max[2:19]), 2))
  ),

  delta_s0 = c(paste(sim2_summary_ER$delta_s0[1], "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$delta_s0[2:19]), 2), "\u00B1", round(as.numeric(sim2_summary_ER$sd_delta_s0[2:19]), 2))
  ),  

  rho = c(paste(round(sim2_summary_ER$rho[1], 4), "\u00B1",  "NA"),
    paste(round(as.numeric(sim2_summary_ER$rho[2:19]), 4), "\u00B1", round(as.numeric(sim2_summary_ER$sd_rho[2:19]), 4))
  ),
  
  tau = c(paste(round(sim2_summary_ER$tau[1], 5), "\u00B1",  round(sim2_summary_ER$sd_tau[1], 8)),
    paste(round(as.numeric(sim2_summary_ER$tau[2:19]), 5), "\u00B1", round(as.numeric(sim2_summary_ER$sd_tau[2:19]), 8))
  ),   
   
  epsilon_p = c(paste(round(sim2_summary_ER$epsilon_p[1], 2), "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$epsilon_p[2:19]), 2), "\u00B1", round(as.numeric(sim2_summary_ER$sd_epsilon_p[2:19]), 2))
  ),  
  
  epsilon_alpha = c(paste(round(sim2_summary_ER$epsilon_alpha[1], 2), "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$epsilon_alpha[2:19]), 2), "\u00B1", round(as.numeric(sim2_summary_ER$sd_epsilon_alpha[2:19]), 2))
  ),  
  
  epsilon_beta = c(paste(round(sim2_summary_ER$epsilon_beta[1], 2), "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$epsilon_beta[2:19]), 2), "\u00B1", round(as.numeric(sim2_summary_ER$sd_epsilon_beta[2:19]), 2))
  ),  

  ff_p = c(paste(round(sim2_summary_ER$ff_p[1], 4), "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$ff_p[2:19]), 4), "\u00B1", round(as.numeric(sim2_summary_ER$sd_ff_p[2:19]), 4))
  ),
  
  ff_alpha = c(paste(round(sim2_summary_ER$ff_alpha[1], 4), "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$ff_alpha[2:19]), 4), "\u00B1", round(as.numeric(sim2_summary_ER$sd_ff_alpha[2:19]), 4))
  ),  
  
  ff_beta = c(paste(round(sim2_summary_ER$ff_beta[1], 4), "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$ff_beta[2:19]), 4), "\u00B1", round(as.numeric(sim2_summary_ER$sd_ff_beta[2:19]), 4))
  ),
  
  KIE_p = c(paste(round(sim2_summary_ER$KIE_p[1], 4), "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$KIE_p[2:19]), 4), "\u00B1", round(as.numeric(sim2_summary_ER$sd_KIE_p[2:19]), 4))
  ),
  
  KIE_alpha = c(paste(round(sim2_summary_ER$KIE_alpha[1], 4), "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$KIE_alpha[2:19]), 4), "\u00B1", round(as.numeric(sim2_summary_ER$sd_KIE_alpha[2:19]), 4))
  ),  
  
  KIE_beta = c(paste(round(sim2_summary_ER$KIE_beta[1], 4), "\u00B1", "NA"),
    paste(round(as.numeric(sim2_summary_ER$KIE_beta[2:19]), 4), "\u00B1", round(as.numeric(sim2_summary_ER$sd_KIE_beta[2:19]), 4))
  ),
  
)%>%
    select(-sd_R_squared, -sd_lm_RMSE, -sd_nls_RMSE, -sd_f_min, -sd_f_max, -sd_delta_s0, -sd_rho, -sd_tau, -sd_epsilon_p, -sd_epsilon_alpha, -sd_epsilon_beta, -sd_ff_p, -sd_ff_alpha, -sd_ff_beta, -sd_KIE_p, -sd_KIE_alpha, -sd_KIE_beta)
)

write.csv(sim2_summary_ER_2, here("data/output/sim2/sim2_summary_ER_2.csv"), row.names = TRUE)
```

#Make summary table with average values and standard deviations for 1000 simulations (no error and e1-e9) for standard Rayleigh and Expanded Rayleigh 1 and 2.
```{r sim2_summary_lm_ER}
#Include the actual values (used to generate the original, error-free dataset), the values for the Rayleigh equation by itself, and the combined results from the Rayleigh equation and the nonlinear models.

#number of rows = n*m = 1 actual +(e1:e9)*3 = 28
n = 28

#Make an empty table with the appropriate number of rows.
sim2_summary_lm_ER <- blank_sim2_summary_v2(n = n)

#m = number of models
m = 3

#Add simulation details
sim2_summary_lm_ER <- sim2_summary_lm_ER %>% mutate(
    Dataset = c("sim2",
      rep(c(
     "sim2_e1",
     "sim2_e4",
     "sim2_e7",
     "sim2_e2",
     "sim2_e5",
     "sim2_e8",
     "sim2_e3",
     "sim2_e6",
     "sim2_e9"
     ), m)
     ),
 
  Description = c("No error",
    rep(c(
     "Low error, no skew",
     "Low error, left skew",
     "Low error, right skew",
     "Medium error, no skew",
     "Medium error, left skew",
     "Medium error, right skew",
     "High error, no skew",
     "High error, left skew",
     "High error, right skew"
     ), m)
    ),  
   
  Model = c("Actual",
    rep(c(
    "Standard Rayleigh",  
    "Rayleigh + Nls1.2",
    "Rayleigh + Nls2.2"
  ), each = 9)
  ),
  
  Resid_size = c("None",
    rep(
    rep(c(
    "Low",
    "Medium",
    "High"
  ), each = 3), m)
  ),
  
  Resid_skew = c("No",
    rep(
    rep(c(
    "No",
    "Left",
    "Right"
  ), 3), m)
  ),
  
  Subset = rep("0.25 < f < 0.75", n)
)

sim2_summary_lm_ER$Multiple_R_squared = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$Multiple_R_squared[1],
     avg_sim2_e4_lm_left_skew$Multiple_R_squared[1],
     avg_sim2_e7_lm_right_skew$Multiple_R_squared[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$Multiple_R_squared[1],
     avg_sim2_e5_lm_left_skew$Multiple_R_squared[1],
     avg_sim2_e8_lm_right_skew$Multiple_R_squared[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$Multiple_R_squared[1],
     avg_sim2_e6_lm_left_skew$Multiple_R_squared[1],
     avg_sim2_e9_lm_right_skew$Multiple_R_squared[1]
   ), m)
 )

sim2_summary_lm_ER$sd_R_squared = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$Multiple_R_squared[5],
     avg_sim2_e4_lm_left_skew$Multiple_R_squared[5],
     avg_sim2_e7_lm_right_skew$Multiple_R_squared[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$Multiple_R_squared[5],
     avg_sim2_e5_lm_left_skew$Multiple_R_squared[5],
     avg_sim2_e8_lm_right_skew$Multiple_R_squared[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$Multiple_R_squared[5],
     avg_sim2_e6_lm_left_skew$Multiple_R_squared[5],
     avg_sim2_e9_lm_right_skew$Multiple_R_squared[5]
   ), m)
 )

sim2_summary_lm_ER$lm_RMSE = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[1],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[1],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[1],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[1],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[1],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[1],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[1]
   ), m)
 )


sim2_summary_lm_ER$sd_lm_RMSE = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[5],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[5],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[5],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[5],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[5],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[5],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[5]
   ), m)
 )

 sim2_summary_lm_ER$nls_RMSE = c(
   "NA",
   rep("NA", 9),
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[2],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[2],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[2],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[2],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[2],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[2],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[3],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[3],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[3],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[3],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[3],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[3],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[3]  
 )

 sim2_summary_lm_ER$sd_nls_RMSE = c(
   "NA",
   rep("NA", 9),
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[6],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[6],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[6],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[6],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[6],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[6],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$RMSE_delta_p[7],
     avg_sim2_e4_lm_left_skew$RMSE_delta_p[7],
     avg_sim2_e7_lm_right_skew$RMSE_delta_p[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$RMSE_delta_p[7],
     avg_sim2_e5_lm_left_skew$RMSE_delta_p[7],
     avg_sim2_e8_lm_right_skew$RMSE_delta_p[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$RMSE_delta_p[7],
     avg_sim2_e6_lm_left_skew$RMSE_delta_p[7],
     avg_sim2_e9_lm_right_skew$RMSE_delta_p[7]  
 )
 
 sim2_summary_lm_ER$f_min = c(
   min(sim2_tb2$f),
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$f_min[1],
     avg_sim2_e4_lm_left_skew$f_min[1],
     avg_sim2_e7_lm_right_skew$f_min[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$f_min[1],
     avg_sim2_e5_lm_left_skew$f_min[1],
     avg_sim2_e8_lm_right_skew$f_min[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$f_min[1],
     avg_sim2_e6_lm_left_skew$f_min[1],
     avg_sim2_e9_lm_right_skew$f_min[1]
   ), m)
 )
 
  sim2_summary_lm_ER$sd_f_min = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$f_min[5],
     avg_sim2_e4_lm_left_skew$f_min[5],
     avg_sim2_e7_lm_right_skew$f_min[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$f_min[5],
     avg_sim2_e5_lm_left_skew$f_min[5],
     avg_sim2_e8_lm_right_skew$f_min[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$f_min[5],
     avg_sim2_e6_lm_left_skew$f_min[5],
     avg_sim2_e9_lm_right_skew$f_min[5]
   ), m)
 )
 
 sim2_summary_lm_ER$f_max = c(
   max(sim2_tb2$f),
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$f_max[1],
     avg_sim2_e4_lm_left_skew$f_max[1],
     avg_sim2_e7_lm_right_skew$f_max[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$f_max[1],
     avg_sim2_e5_lm_left_skew$f_max[1],
     avg_sim2_e8_lm_right_skew$f_max[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$f_max[1],
     avg_sim2_e6_lm_left_skew$f_max[1],
     avg_sim2_e9_lm_right_skew$f_max[1]
   ), m)
 )
 
  sim2_summary_lm_ER$sd_f_max = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$f_max[5],
     avg_sim2_e4_lm_left_skew$f_max[5],
     avg_sim2_e7_lm_right_skew$f_max[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$f_max[5],
     avg_sim2_e5_lm_left_skew$f_max[5],
     avg_sim2_e8_lm_right_skew$f_max[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$f_max[5],
     avg_sim2_e6_lm_left_skew$f_max[5],
     avg_sim2_e9_lm_right_skew$f_max[5]
   ), m)
 )  

 sim2_summary_lm_ER$delta_s0 = c(
   sim2_tb2$delta_s0[1],
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$delta_s0[1],
     avg_sim2_e4_lm_left_skew$delta_s0[1],
     avg_sim2_e7_lm_right_skew$delta_s0[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$delta_s0[1],
     avg_sim2_e5_lm_left_skew$delta_s0[1],
     avg_sim2_e8_lm_right_skew$delta_s0[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$delta_s0[1],
     avg_sim2_e6_lm_left_skew$delta_s0[1],
     avg_sim2_e9_lm_right_skew$delta_s0[1]
   ), m)
 )
 
  sim2_summary_lm_ER$sd_delta_s0 = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$delta_s0[5],
     avg_sim2_e4_lm_left_skew$delta_s0[5],
     avg_sim2_e7_lm_right_skew$delta_s0[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$delta_s0[5],
     avg_sim2_e5_lm_left_skew$delta_s0[5],
     avg_sim2_e8_lm_right_skew$delta_s0[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$delta_s0[5],
     avg_sim2_e6_lm_left_skew$delta_s0[5],
     avg_sim2_e9_lm_right_skew$delta_s0[5]
   ), m)
 )
  
 sim2_summary_lm_ER$rho = c(
   mean(sim2_tb2$rho, na.rm = TRUE), #mean rho for f values between 0.7 & 0.3 (inclusive)
   rep("NA", 9),
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$rho[2],
     avg_sim2_e4_lm_left_skew$rho[2],
     avg_sim2_e7_lm_right_skew$rho[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$rho[2],
     avg_sim2_e5_lm_left_skew$rho[2],
     avg_sim2_e8_lm_right_skew$rho[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$rho[2],
     avg_sim2_e6_lm_left_skew$rho[2],
     avg_sim2_e9_lm_right_skew$rho[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$rho[3],
     avg_sim2_e4_lm_left_skew$rho[3],
     avg_sim2_e7_lm_right_skew$rho[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$rho[3],
     avg_sim2_e5_lm_left_skew$rho[3],
     avg_sim2_e8_lm_right_skew$rho[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$rho[3],
     avg_sim2_e6_lm_left_skew$rho[3],
     avg_sim2_e9_lm_right_skew$rho[3]  
 )

 sim2_summary_lm_ER$sd_rho = c(
   sd(sim2_tb2$rho, na.rm = TRUE),
   rep("NA", 9),
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$rho[6],
     avg_sim2_e4_lm_left_skew$rho[6],
     avg_sim2_e7_lm_right_skew$rho[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$rho[6],
     avg_sim2_e5_lm_left_skew$rho[6],
     avg_sim2_e8_lm_right_skew$rho[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$rho[6],
     avg_sim2_e6_lm_left_skew$rho[6],
     avg_sim2_e9_lm_right_skew$rho[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$rho[7],
     avg_sim2_e4_lm_left_skew$rho[7],
     avg_sim2_e7_lm_right_skew$rho[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$rho[7],
     avg_sim2_e5_lm_left_skew$rho[7],
     avg_sim2_e8_lm_right_skew$rho[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$rho[7],
     avg_sim2_e6_lm_left_skew$rho[7],
     avg_sim2_e9_lm_right_skew$rho[7]  
 )
 
  sim2_summary_lm_ER$tau = c(
   mean(sim2_tb2$tau, na.rm = TRUE), #mean tau for f values between 0.7 & 0.3 (inclusive)
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$tau[2],
     avg_sim2_e4_lm_left_skew$tau[2],
     avg_sim2_e7_lm_right_skew$tau[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$tau[2],
     avg_sim2_e5_lm_left_skew$tau[2],
     avg_sim2_e8_lm_right_skew$tau[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$tau[2],
     avg_sim2_e6_lm_left_skew$tau[2],
     avg_sim2_e9_lm_right_skew$tau[2]
   ), m)
 )
 
  sim2_summary_lm_ER$sd_tau = c(
   sd(sim2_tb2$tau, na.rm = TRUE),
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$tau[6],
     avg_sim2_e4_lm_left_skew$tau[6],
     avg_sim2_e7_lm_right_skew$tau[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$tau[6],
     avg_sim2_e5_lm_left_skew$tau[6],
     avg_sim2_e8_lm_right_skew$tau[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$tau[6],
     avg_sim2_e6_lm_left_skew$tau[6],
     avg_sim2_e9_lm_right_skew$tau[6]
   ), m)
 )

 sim2_summary_lm_ER$epsilon_p = c(
   sim2_tb2$epsilon_bulk[1],
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_p[1],
     avg_sim2_e4_lm_left_skew$epsilon_p[1],
     avg_sim2_e7_lm_right_skew$epsilon_p[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_p[1],
     avg_sim2_e5_lm_left_skew$epsilon_p[1],
     avg_sim2_e8_lm_right_skew$epsilon_p[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_p[1],
     avg_sim2_e6_lm_left_skew$epsilon_p[1],
     avg_sim2_e9_lm_right_skew$epsilon_p[1]
   ), m)
 )
 
  sim2_summary_lm_ER$sd_epsilon_p = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_p[5],
     avg_sim2_e4_lm_left_skew$epsilon_p[5],
     avg_sim2_e7_lm_right_skew$epsilon_p[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_p[5],
     avg_sim2_e5_lm_left_skew$epsilon_p[5],
     avg_sim2_e8_lm_right_skew$epsilon_p[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_p[5],
     avg_sim2_e6_lm_left_skew$epsilon_p[5],
     avg_sim2_e9_lm_right_skew$epsilon_p[5]
   ), m)
 )
  
 sim2_summary_lm_ER$epsilon_alpha = c(
   sim2_tb2$epsilon_alpha[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_alpha[1],
     avg_sim2_e4_lm_left_skew$epsilon_alpha[1],
     avg_sim2_e7_lm_right_skew$epsilon_alpha[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_alpha[1],
     avg_sim2_e5_lm_left_skew$epsilon_alpha[1],
     avg_sim2_e8_lm_right_skew$epsilon_alpha[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_alpha[1],
     avg_sim2_e6_lm_left_skew$epsilon_alpha[1],
     avg_sim2_e9_lm_right_skew$epsilon_alpha[1],   
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_alpha[2],
     avg_sim2_e4_lm_left_skew$epsilon_alpha[2],
     avg_sim2_e7_lm_right_skew$epsilon_alpha[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_alpha[2],
     avg_sim2_e5_lm_left_skew$epsilon_alpha[2],
     avg_sim2_e8_lm_right_skew$epsilon_alpha[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_alpha[2],
     avg_sim2_e6_lm_left_skew$epsilon_alpha[2],
     avg_sim2_e9_lm_right_skew$epsilon_alpha[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_alpha[3],
     avg_sim2_e4_lm_left_skew$epsilon_alpha[3],
     avg_sim2_e7_lm_right_skew$epsilon_alpha[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_alpha[3],
     avg_sim2_e5_lm_left_skew$epsilon_alpha[3],
     avg_sim2_e8_lm_right_skew$epsilon_alpha[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_alpha[3],
     avg_sim2_e6_lm_left_skew$epsilon_alpha[3],
     avg_sim2_e9_lm_right_skew$epsilon_alpha[3]  
 )

 sim2_summary_lm_ER$sd_epsilon_alpha = c(
   "NA",
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_alpha[5],
     avg_sim2_e4_lm_left_skew$epsilon_alpha[5],
     avg_sim2_e7_lm_right_skew$epsilon_alpha[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_alpha[5],
     avg_sim2_e5_lm_left_skew$epsilon_alpha[5],
     avg_sim2_e8_lm_right_skew$epsilon_alpha[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_alpha[5],
     avg_sim2_e6_lm_left_skew$epsilon_alpha[5],
     avg_sim2_e9_lm_right_skew$epsilon_alpha[5],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_alpha[6],
     avg_sim2_e4_lm_left_skew$epsilon_alpha[6],
     avg_sim2_e7_lm_right_skew$epsilon_alpha[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_alpha[6],
     avg_sim2_e5_lm_left_skew$epsilon_alpha[6],
     avg_sim2_e8_lm_right_skew$epsilon_alpha[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_alpha[6],
     avg_sim2_e6_lm_left_skew$epsilon_alpha[6],
     avg_sim2_e9_lm_right_skew$epsilon_alpha[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_alpha[7],
     avg_sim2_e4_lm_left_skew$epsilon_alpha[7],
     avg_sim2_e7_lm_right_skew$epsilon_alpha[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_alpha[7],
     avg_sim2_e5_lm_left_skew$epsilon_alpha[7],
     avg_sim2_e8_lm_right_skew$epsilon_alpha[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_alpha[7],
     avg_sim2_e6_lm_left_skew$epsilon_alpha[7],
     avg_sim2_e9_lm_right_skew$epsilon_alpha[7]  
 )
 
  sim2_summary_lm_ER$epsilon_beta = c(
   sim2_tb2$epsilon_beta[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_beta[1],
     avg_sim2_e4_lm_left_skew$epsilon_beta[1],
     avg_sim2_e7_lm_right_skew$epsilon_beta[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_beta[1],
     avg_sim2_e5_lm_left_skew$epsilon_beta[1],
     avg_sim2_e8_lm_right_skew$epsilon_beta[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_beta[1],
     avg_sim2_e6_lm_left_skew$epsilon_beta[1],
     avg_sim2_e9_lm_right_skew$epsilon_beta[1],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_beta[2],
     avg_sim2_e4_lm_left_skew$epsilon_beta[2],
     avg_sim2_e7_lm_right_skew$epsilon_beta[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_beta[2],
     avg_sim2_e5_lm_left_skew$epsilon_beta[2],
     avg_sim2_e8_lm_right_skew$epsilon_beta[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_beta[2],
     avg_sim2_e6_lm_left_skew$epsilon_beta[2],
     avg_sim2_e9_lm_right_skew$epsilon_beta[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_beta[3], #Need to rename tables
     avg_sim2_e4_lm_left_skew$epsilon_beta[3],
     avg_sim2_e7_lm_right_skew$epsilon_beta[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_beta[3],
     avg_sim2_e5_lm_left_skew$epsilon_beta[3],
     avg_sim2_e8_lm_right_skew$epsilon_beta[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_beta[3],
     avg_sim2_e6_lm_left_skew$epsilon_beta[3],
     avg_sim2_e9_lm_right_skew$epsilon_beta[3]  
 )

 sim2_summary_lm_ER$sd_epsilon_beta = c(
   "NA",
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_beta[5],
     avg_sim2_e4_lm_left_skew$epsilon_beta[5],
     avg_sim2_e7_lm_right_skew$epsilon_beta[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_beta[5],
     avg_sim2_e5_lm_left_skew$epsilon_beta[5],
     avg_sim2_e8_lm_right_skew$epsilon_beta[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_beta[5],
     avg_sim2_e6_lm_left_skew$epsilon_beta[5],
     avg_sim2_e9_lm_right_skew$epsilon_beta[5],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_beta[6],
     avg_sim2_e4_lm_left_skew$epsilon_beta[6],
     avg_sim2_e7_lm_right_skew$epsilon_beta[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_beta[6],
     avg_sim2_e5_lm_left_skew$epsilon_beta[6],
     avg_sim2_e8_lm_right_skew$epsilon_beta[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_beta[6],
     avg_sim2_e6_lm_left_skew$epsilon_beta[6],
     avg_sim2_e9_lm_right_skew$epsilon_beta[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$epsilon_beta[7],
     avg_sim2_e4_lm_left_skew$epsilon_beta[7],
     avg_sim2_e7_lm_right_skew$epsilon_beta[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$epsilon_beta[7],
     avg_sim2_e5_lm_left_skew$epsilon_beta[7],
     avg_sim2_e8_lm_right_skew$epsilon_beta[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$epsilon_beta[7],
     avg_sim2_e6_lm_left_skew$epsilon_beta[7],
     avg_sim2_e9_lm_right_skew$epsilon_beta[7]  
 )
 
 sim2_summary_lm_ER$ff_p = c(
   sim2_tb2$ff_p[1],
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_p[1], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_p[1],
     avg_sim2_e7_lm_right_skew$ff_p[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_p[1],
     avg_sim2_e5_lm_left_skew$ff_p[1],
     avg_sim2_e8_lm_right_skew$ff_p[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_p[1],
     avg_sim2_e6_lm_left_skew$ff_p[1],
     avg_sim2_e9_lm_right_skew$ff_p[1]
   ), m)
 )
 
  sim2_summary_lm_ER$sd_ff_p = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_p[5], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_p[5],
     avg_sim2_e7_lm_right_skew$ff_p[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_p[5],
     avg_sim2_e5_lm_left_skew$ff_p[5],
     avg_sim2_e8_lm_right_skew$ff_p[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_p[5],
     avg_sim2_e6_lm_left_skew$ff_p[5],
     avg_sim2_e9_lm_right_skew$ff_p[5]
   ), m)
 ) 

 sim2_summary_lm_ER$ff_alpha = c(
   sim2_tb2$ff_alpha[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_alpha[1],
     avg_sim2_e4_lm_left_skew$ff_alpha[1],
     avg_sim2_e7_lm_right_skew$ff_alpha[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_alpha[1],
     avg_sim2_e5_lm_left_skew$ff_alpha[1],
     avg_sim2_e8_lm_right_skew$ff_alpha[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_alpha[1],
     avg_sim2_e6_lm_left_skew$ff_alpha[1],
     avg_sim2_e9_lm_right_skew$ff_alpha[1],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_alpha[2],
     avg_sim2_e4_lm_left_skew$ff_alpha[2],
     avg_sim2_e7_lm_right_skew$ff_alpha[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_alpha[2],
     avg_sim2_e5_lm_left_skew$ff_alpha[2],
     avg_sim2_e8_lm_right_skew$ff_alpha[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_alpha[2],
     avg_sim2_e6_lm_left_skew$ff_alpha[2],
     avg_sim2_e9_lm_right_skew$ff_alpha[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_alpha[3],
     avg_sim2_e4_lm_left_skew$ff_alpha[3],
     avg_sim2_e7_lm_right_skew$ff_alpha[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_alpha[3],
     avg_sim2_e5_lm_left_skew$ff_alpha[3],
     avg_sim2_e8_lm_right_skew$ff_alpha[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_alpha[3],
     avg_sim2_e6_lm_left_skew$ff_alpha[3],
     avg_sim2_e9_lm_right_skew$ff_alpha[3]  
 )

 sim2_summary_lm_ER$sd_ff_alpha = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_alpha[5], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_alpha[5],
     avg_sim2_e7_lm_right_skew$ff_alpha[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_alpha[5],
     avg_sim2_e5_lm_left_skew$ff_alpha[5],
     avg_sim2_e8_lm_right_skew$ff_alpha[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_alpha[5],
     avg_sim2_e6_lm_left_skew$ff_alpha[5],
     avg_sim2_e9_lm_right_skew$ff_alpha[5],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_alpha[6], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_alpha[6],
     avg_sim2_e7_lm_right_skew$ff_alpha[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_alpha[6],
     avg_sim2_e5_lm_left_skew$ff_alpha[6],
     avg_sim2_e8_lm_right_skew$ff_alpha[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_alpha[6],
     avg_sim2_e6_lm_left_skew$ff_alpha[6],
     avg_sim2_e9_lm_right_skew$ff_alpha[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_alpha[7], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_alpha[7],
     avg_sim2_e7_lm_right_skew$ff_alpha[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_alpha[7],
     avg_sim2_e5_lm_left_skew$ff_alpha[7],
     avg_sim2_e8_lm_right_skew$ff_alpha[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_alpha[7],
     avg_sim2_e6_lm_left_skew$ff_alpha[7],
     avg_sim2_e9_lm_right_skew$ff_alpha[7]  
 )  
  
  sim2_summary_lm_ER$ff_beta = c(
   sim2_tb2$ff_beta[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_beta[1],
     avg_sim2_e4_lm_left_skew$ff_beta[1],
     avg_sim2_e7_lm_right_skew$ff_beta[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_beta[1],
     avg_sim2_e5_lm_left_skew$ff_beta[1],
     avg_sim2_e8_lm_right_skew$ff_beta[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_beta[1],
     avg_sim2_e6_lm_left_skew$ff_beta[1],
     avg_sim2_e9_lm_right_skew$ff_beta[1],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_beta[2],
     avg_sim2_e4_lm_left_skew$ff_beta[2],
     avg_sim2_e7_lm_right_skew$ff_beta[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_beta[2],
     avg_sim2_e5_lm_left_skew$ff_beta[2],
     avg_sim2_e8_lm_right_skew$ff_beta[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_beta[2],
     avg_sim2_e6_lm_left_skew$ff_beta[2],
     avg_sim2_e9_lm_right_skew$ff_beta[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_beta[3], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_beta[3],
     avg_sim2_e7_lm_right_skew$ff_beta[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_beta[3],
     avg_sim2_e5_lm_left_skew$ff_beta[3],
     avg_sim2_e8_lm_right_skew$ff_beta[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_beta[3],
     avg_sim2_e6_lm_left_skew$ff_beta[3],
     avg_sim2_e9_lm_right_skew$ff_beta[3]  
 )

 sim2_summary_lm_ER$sd_ff_beta = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_beta[5], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_beta[5],
     avg_sim2_e7_lm_right_skew$ff_beta[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_beta[5],
     avg_sim2_e5_lm_left_skew$ff_beta[5],
     avg_sim2_e8_lm_right_skew$ff_beta[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_beta[5],
     avg_sim2_e6_lm_left_skew$ff_beta[5],
     avg_sim2_e9_lm_right_skew$ff_beta[5],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_beta[6], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_beta[6],
     avg_sim2_e7_lm_right_skew$ff_beta[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_beta[6],
     avg_sim2_e5_lm_left_skew$ff_beta[6],
     avg_sim2_e8_lm_right_skew$ff_beta[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_beta[6],
     avg_sim2_e6_lm_left_skew$ff_beta[6],
     avg_sim2_e9_lm_right_skew$ff_beta[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$ff_beta[7], #Need to rename tables
     avg_sim2_e4_lm_left_skew$ff_beta[7],
     avg_sim2_e7_lm_right_skew$ff_beta[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$ff_beta[7],
     avg_sim2_e5_lm_left_skew$ff_beta[7],
     avg_sim2_e8_lm_right_skew$ff_beta[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$ff_beta[7],
     avg_sim2_e6_lm_left_skew$ff_beta[7],
     avg_sim2_e9_lm_right_skew$ff_beta[7]  
 )  

 sim2_summary_lm_ER$KIE_p = c(
   sim2_tb2$KIE_p[1],
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_p[1], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_p[1],
     avg_sim2_e7_lm_right_skew$KIE_p[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_p[1],
     avg_sim2_e5_lm_left_skew$KIE_p[1],
     avg_sim2_e8_lm_right_skew$KIE_p[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_p[1],
     avg_sim2_e6_lm_left_skew$KIE_p[1],
     avg_sim2_e9_lm_right_skew$KIE_p[1]
   ), m)
 )
 
  sim2_summary_lm_ER$sd_KIE_p = c(
   "NA",
   rep(c(
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_p[5], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_p[5],
     avg_sim2_e7_lm_right_skew$KIE_p[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_p[5],
     avg_sim2_e5_lm_left_skew$KIE_p[5],
     avg_sim2_e8_lm_right_skew$KIE_p[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_p[5],
     avg_sim2_e6_lm_left_skew$KIE_p[5],
     avg_sim2_e9_lm_right_skew$KIE_p[5]
   ), m)
 )  

 sim2_summary_lm_ER$KIE_alpha = c(
   sim2_tb2$KIE_alpha[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_alpha[1],
     avg_sim2_e4_lm_left_skew$KIE_alpha[1],
     avg_sim2_e7_lm_right_skew$KIE_alpha[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_alpha[1],
     avg_sim2_e5_lm_left_skew$KIE_alpha[1],
     avg_sim2_e8_lm_right_skew$KIE_alpha[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_alpha[1],
     avg_sim2_e6_lm_left_skew$KIE_alpha[1],
     avg_sim2_e9_lm_right_skew$KIE_alpha[1],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_alpha[2],
     avg_sim2_e4_lm_left_skew$KIE_alpha[2],
     avg_sim2_e7_lm_right_skew$KIE_alpha[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_alpha[2],
     avg_sim2_e5_lm_left_skew$KIE_alpha[2],
     avg_sim2_e8_lm_right_skew$KIE_alpha[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_alpha[2],
     avg_sim2_e6_lm_left_skew$KIE_alpha[2],
     avg_sim2_e9_lm_right_skew$KIE_alpha[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_alpha[3],
     avg_sim2_e4_lm_left_skew$KIE_alpha[3],
     avg_sim2_e7_lm_right_skew$KIE_alpha[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_alpha[3],
     avg_sim2_e5_lm_left_skew$KIE_alpha[3],
     avg_sim2_e8_lm_right_skew$KIE_alpha[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_alpha[3],
     avg_sim2_e6_lm_left_skew$KIE_alpha[3],
     avg_sim2_e9_lm_right_skew$KIE_alpha[3]  
 )

 sim2_summary_lm_ER$sd_KIE_alpha = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_alpha[5], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_alpha[5],
     avg_sim2_e7_lm_right_skew$KIE_alpha[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_alpha[5],
     avg_sim2_e5_lm_left_skew$KIE_alpha[5],
     avg_sim2_e8_lm_right_skew$KIE_alpha[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_alpha[5],
     avg_sim2_e6_lm_left_skew$KIE_alpha[5],
     avg_sim2_e9_lm_right_skew$KIE_alpha[5],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_alpha[6], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_alpha[6],
     avg_sim2_e7_lm_right_skew$KIE_alpha[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_alpha[6],
     avg_sim2_e5_lm_left_skew$KIE_alpha[6],
     avg_sim2_e8_lm_right_skew$KIE_alpha[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_alpha[6],
     avg_sim2_e6_lm_left_skew$KIE_alpha[6],
     avg_sim2_e9_lm_right_skew$KIE_alpha[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_alpha[7], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_alpha[7],
     avg_sim2_e7_lm_right_skew$KIE_alpha[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_alpha[7],
     avg_sim2_e5_lm_left_skew$KIE_alpha[7],
     avg_sim2_e8_lm_right_skew$KIE_alpha[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_alpha[7],
     avg_sim2_e6_lm_left_skew$KIE_alpha[7],
     avg_sim2_e9_lm_right_skew$KIE_alpha[7]  
 )  
  
  sim2_summary_lm_ER$KIE_beta = c(
   sim2_tb2$KIE_beta[1],
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_beta[1],
     avg_sim2_e4_lm_left_skew$KIE_beta[1],
     avg_sim2_e7_lm_right_skew$KIE_beta[1],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_beta[1],
     avg_sim2_e5_lm_left_skew$KIE_beta[1],
     avg_sim2_e8_lm_right_skew$KIE_beta[1],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_beta[1],
     avg_sim2_e6_lm_left_skew$KIE_beta[1],
     avg_sim2_e9_lm_right_skew$KIE_beta[1],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_beta[2],
     avg_sim2_e4_lm_left_skew$KIE_beta[2],
     avg_sim2_e7_lm_right_skew$KIE_beta[2],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_beta[2],
     avg_sim2_e5_lm_left_skew$KIE_beta[2],
     avg_sim2_e8_lm_right_skew$KIE_beta[2],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_beta[2],
     avg_sim2_e6_lm_left_skew$KIE_beta[2],
     avg_sim2_e9_lm_right_skew$KIE_beta[2],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_beta[3],
     avg_sim2_e4_lm_left_skew$KIE_beta[3],
     avg_sim2_e7_lm_right_skew$KIE_beta[3],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_beta[3],
     avg_sim2_e5_lm_left_skew$KIE_beta[3],
     avg_sim2_e8_lm_right_skew$KIE_beta[3],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_beta[3],
     avg_sim2_e6_lm_left_skew$KIE_beta[3],
     avg_sim2_e9_lm_right_skew$KIE_beta[3]  
 )

 sim2_summary_lm_ER$sd_KIE_beta = c(
   "NA",
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_beta[5], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_beta[5],
     avg_sim2_e7_lm_right_skew$KIE_beta[5],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_beta[5],
     avg_sim2_e5_lm_left_skew$KIE_beta[5],
     avg_sim2_e8_lm_right_skew$KIE_beta[5],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_beta[5],
     avg_sim2_e6_lm_left_skew$KIE_beta[5],
     avg_sim2_e9_lm_right_skew$KIE_beta[5],
   
     #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_beta[6], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_beta[6],
     avg_sim2_e7_lm_right_skew$KIE_beta[6],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_beta[6],
     avg_sim2_e5_lm_left_skew$KIE_beta[6],
     avg_sim2_e8_lm_right_skew$KIE_beta[6],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_beta[6],
     avg_sim2_e6_lm_left_skew$KIE_beta[6],
     avg_sim2_e9_lm_right_skew$KIE_beta[6],
   
    #Low error: e1, e4, e7
     avg_sim2_e1_lm_no_skew$KIE_beta[7], #Need to rename tables
     avg_sim2_e4_lm_left_skew$KIE_beta[7],
     avg_sim2_e7_lm_right_skew$KIE_beta[7],
     
     #Medium error: e2, e5, e8
     avg_sim2_e2_lm_no_skew$KIE_beta[7],
     avg_sim2_e5_lm_left_skew$KIE_beta[7],
     avg_sim2_e8_lm_right_skew$KIE_beta[7],
     
     #High error: e3, e6, e9
     avg_sim2_e3_lm_no_skew$KIE_beta[7],
     avg_sim2_e6_lm_left_skew$KIE_beta[7],
     avg_sim2_e9_lm_right_skew$KIE_beta[7]  
 )  
           
(sim2_summary_lm_ER) 

write.csv(sim2_summary_lm_ER, here("data/output/sim2/sim2_summary_lm_ER.csv"), row.names = TRUE)
```

#Make summary table that lists the est_diff and pval_diff values separately for each model.
```{r sim2_summary_all}

#n = number of datasets
n = 9

#m = number of models
m = 4

#Set vectors for indexing (not actually using these right now)
v1 = rep(0:3, each = n)
v2 = rep(1:9, m)

sim2_summary_all <- blank_sim_rep(n = n, m = m)

#sim2_e1: Low error, no skew
#row 1 for each model = (n*0:3 + 1)
sim2_summary_all[(n*0 +1), ] = avg_sim2_e1_lm_no_skew[1, ]
sim2_summary_all[(n*1 +1), ] = avg_sim2_e1_lm_no_skew[2, ]
sim2_summary_all[(n*2 +1), ] = avg_sim2_e1_lm_no_skew[3, ]
sim2_summary_all[(n*3 +1), ] = avg_sim2_e1_lm_no_skew[4, ]

#sim2_e2: Medium error, no skew
#row 4 for each model = (n*0:3 + 4)
sim2_summary_all[(n*0 +4), ] = avg_sim2_e2_lm_no_skew[1, ]
sim2_summary_all[(n*1 +4), ] = avg_sim2_e2_lm_no_skew[2, ]
sim2_summary_all[(n*2 +4), ] = avg_sim2_e2_lm_no_skew[3, ]
sim2_summary_all[(n*3 +4), ] = avg_sim2_e2_lm_no_skew[4, ]

#sim2_e3: High error, no skew
#row 7 for each model = (n*0:3 + 7)
sim2_summary_all[(n*0 +7), ] = avg_sim2_e3_lm_no_skew[1, ]
sim2_summary_all[(n*1 +7), ] = avg_sim2_e3_lm_no_skew[2, ]
sim2_summary_all[(n*2 +7), ] = avg_sim2_e3_lm_no_skew[3, ]
sim2_summary_all[(n*3 +7), ] = avg_sim2_e3_lm_no_skew[4, ]

#sim2_e4: Low error, left skew
#row 1 for each model = (n*0:3 + 2)
sim2_summary_all[(n*0 +2), ] = avg_sim2_e4_lm_left_skew[1, ]
sim2_summary_all[(n*1 +2), ] = avg_sim2_e4_lm_left_skew[2, ]
sim2_summary_all[(n*2 +2), ] = avg_sim2_e4_lm_left_skew[3, ]
sim2_summary_all[(n*3 +2), ] = avg_sim2_e4_lm_left_skew[4, ]

#sim2_e5: Medium error, left skew
#row 1 for each model = (n*0:3 + 5)
sim2_summary_all[(n*0 +5), ] = avg_sim2_e5_lm_left_skew[1, ]
sim2_summary_all[(n*1 +5), ] = avg_sim2_e5_lm_left_skew[2, ]
sim2_summary_all[(n*2 +5), ] = avg_sim2_e5_lm_left_skew[3, ]
sim2_summary_all[(n*3 +5), ] = avg_sim2_e5_lm_left_skew[4, ]

#sim2_e6: High error, left skew
#row 1 for each model = (n*0:3 + 8)
sim2_summary_all[(n*0 +8), ] = avg_sim2_e6_lm_left_skew[1, ]
sim2_summary_all[(n*1 +8), ] = avg_sim2_e6_lm_left_skew[2, ]
sim2_summary_all[(n*2 +8), ] = avg_sim2_e6_lm_left_skew[3, ]
sim2_summary_all[(n*3 +8), ] = avg_sim2_e6_lm_left_skew[4, ]

#sim2_e7: Low error, right skew
#row 1 for each model = (n*0:3 + 3)
sim2_summary_all[(n*0 +3), ] = avg_sim2_e7_lm_right_skew[1, ]
sim2_summary_all[(n*1 +3), ] = avg_sim2_e7_lm_right_skew[2, ]
sim2_summary_all[(n*2 +3), ] = avg_sim2_e7_lm_right_skew[3, ]
sim2_summary_all[(n*3 +3), ] = avg_sim2_e7_lm_right_skew[4, ]

#sim2_e8: Medium error, right skew
#row 1 for each model = (n*0:3 + 6)
sim2_summary_all[(n*0 +6), ] = avg_sim2_e8_lm_right_skew[1, ]
sim2_summary_all[(n*1 +6), ] = avg_sim2_e8_lm_right_skew[2, ]
sim2_summary_all[(n*2 +6), ] = avg_sim2_e8_lm_right_skew[3, ]
sim2_summary_all[(n*3 +6), ] = avg_sim2_e8_lm_right_skew[4, ]

#sim2_e9: High error, right skew
#row 1 for each model = (n*0:3 + 3)
sim2_summary_all[(n*0 +9), ] = avg_sim2_e9_lm_right_skew[1, ]
sim2_summary_all[(n*1 +9), ] = avg_sim2_e9_lm_right_skew[2, ]
sim2_summary_all[(n*2 +9), ] = avg_sim2_e9_lm_right_skew[3, ]
sim2_summary_all[(n*3 +9), ] = avg_sim2_e9_lm_right_skew[4, ]

(sim2_summary_all <- sim2_summary_all %>% mutate(
  
  Dataset = rep(c(
     "sim2_e1",
     "sim2_e4",
     "sim2_e7",
     "sim2_e2",
     "sim2_e5",
     "sim2_e8",
     "sim2_e3",
     "sim2_e6",
     "sim2_e9"
     ), m),
 
  Description = rep(c(
     "Low error, no skew",
     "Low error, left skew",
     "Low error, right skew",
     "Medium error, no skew",
     "Medium error, left skew",
     "Medium error, right skew",
     "High error, no skew",
     "High error, left skew",
     "High error, right skew"
     ), m),  
   
  Model = rep(c(
    "Linear",
    "Nonlinear 1.2",
    "Nonlinear 2.2",
    "Average tau"
  ), each = 9),
  
  Resid_size = rep(
    rep(c(
    "Low",
    "Medium",
    "High"
  ), each = 3), m
  ),
  
  Resid_skew = rep(
    rep(c(
    "No",
    "Left",
    "Right"
  ), 3), m
  )
) %>%
    select(`Dataset`, `Description`, `Model`, `Resid_size`, `Resid_skew`, everything())
)

write.csv(sim2_summary_all, here("data/output/sim2/sim2_summary_all.csv"), row.names = TRUE)
```

#Make color-blind palettes for ggplot.
```{r cbPalette}
#Reference: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette

# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

# To use for fills, add
  #scale_fill_manual(values=cbPalette)

# To use for line and point colors, add
  #scale_colour_manual(values=cbPalette)
```

#Import sim2_summary_all for making bar charts w/o rerunning simulations
```{r import_sim2_summary_all}
sim2_summary_all <- read.table(here("data/output/sim2/sim2_summary_all.csv"),sep = ",", header = TRUE )
```

#Figure S5A: Make two-panel bar chart with point estimates of 1000 simulations
```{r KIE_barchart_2}
#Make combined table with factored variables
sim2_summary_all_2 <- sim2_summary_all 

sim2_summary_all_2 <- mutate(sim2_summary_all_2,
  Model = rep(c(
    "Standard Rayleigh",
    "Expanded Rayleigh 1",
    "Expanded Rayleigh 2",
    "Average tau"
  ), each = 9)
)

sim2_summary_all_2 <- mutate(sim2_summary_all_2,
  Model = factor(sim2_summary_all_2$Model, levels = c('Standard Rayleigh', 'Expanded Rayleigh 1', 'Expanded Rayleigh 2', 'Average tau')),
  Resid_size = factor(sim2_summary_all_2$Resid_size, levels = c('Low', 'Medium', 'High')),
  Resid_skew = factor(sim2_summary_all_2$Resid_skew, levels = c('No', 'Left', 'Right'))
)

#Make table with KIE_alpha and KIE_beta values pivoted to one column
sim2_summary_all_3 <- sim2_summary_all_2 %>%
  select(Dataset, Description, Model, Resid_size, Resid_skew, diff_KIE_alpha, diff_KIE_beta) %>%
  pivot_longer(c(diff_KIE_alpha, diff_KIE_beta), names_to = "diff_KIE", values_to = "diff_KIE_values")

#Make facet labels with superscripts
my_labeller <- as_labeller(c(diff_KIE_alpha = "N^alpha", diff_KIE_beta = "N^beta"), default = label_parsed)

#Plot absolute relative difference in KIE_alpha and KIE_beta
(sim2_KIE_combo_barplot <- ggplot(sim2_summary_all_3[1:54, ], aes(fill=Model, y=diff_KIE_values, x=Resid_size)) + 
  geom_bar(position='dodge', stat='identity')+
  geom_point(aes(y=diff_KIE_values,group=Model, shape=Resid_skew),
           stat="identity",
           position=position_dodge(width = .9),
           alpha=.8,
           size=1
           ) +
  scale_fill_manual(values=c("#56B4E9", "#009E73", "#F0E442"))+
  scale_shape_manual(name = "Skewness",
    values = c(15, 17, 8)
  )+
  #Remove black dots from model legend
  guides(fill = guide_legend(override.aes = list(shape = NA)))+
  facet_wrap(~diff_KIE, labeller = my_labeller)+
  xlab("Error level")+ 
  ylab(expression(paste(bold("Abs. rel. diff. "), bold(KIE^15), bold(N))))+
  ggtitle(expression(paste(bold("Dataset 2: "), bold("Normal "), bold(KIE^15), bold(N^alpha), bold(", Normal "), bold(KIE^15), bold(N^beta))))+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())+
  
  #Remove legend from this plot (panel A) (will be included in panel B, below)
  theme(legend.position = "none")
)

#save figure
ggsave(sim2_KIE_combo_barplot, filename = here("graphs/sim2/sim2_KIE_combo_barplot.tiff"), height = 3, width = 5, units = "in")

```
#Figure S5B: Make a bar chart with average RMSE value for each set of 1000 simulations
```{r RMSE_barchart}
sim2_summary_all_4 <- sim2_summary_all 

sim2_summary_all_4 <- mutate(sim2_summary_all_4,
  Model = rep(c(
    "Standard Rayleigh",
    "Expanded Rayleigh 1",
    "Expanded Rayleigh 2",
    "Average tau"
  ), each = 9)
)

sim2_summary_all_4 <- mutate(sim2_summary_all_4,
  Model = factor(sim2_summary_all_4$Model, levels = c('Standard Rayleigh', 'Expanded Rayleigh 1', 'Expanded Rayleigh 2', 'Average tau')),
  Resid_size = factor(sim2_summary_all_4$Resid_size, levels = c('Low', 'Medium', 'High')),
  Resid_skew = factor(sim2_summary_all_4$Resid_skew, levels = c('No', 'Left', 'Right'))
)


#Plot RMSE values
(sim2_RMSE_barplot <- ggplot(sim2_summary_all_4[1:27, ], aes(fill=Model, y=RMSE_delta_p, x=Resid_size)) + 
  geom_bar(position='dodge', stat='identity')+
  geom_point(aes(y=RMSE_delta_p,group=Model, shape=Resid_skew),
           stat="identity",
           position=position_dodge(width = .9),
           alpha=.8,
           size=1
           ) +
  scale_fill_manual(values=c("#56B4E9", "#009E73", "#F0E442"))+
  scale_shape_manual(name = "Skewness",
    values = c(15, 17, 8)
  )+
  #Remove black dots from model legend
  guides(fill = guide_legend(override.aes = list(shape = NA)))+  
  xlab("Error level")+ 
  ylab(expression(paste(bold("Average RMSE"))))+
  #scale_fill_manual(`Model`, values = c(Low, Medium, High))+
  theme_bw()+
  theme(panel.grid.major = element_blank())+
  theme(panel.grid.minor = element_blank())
)

#save figure
ggsave(sim2_RMSE_barplot, filename = here("graphs/sim2/sim2_RMSE_barplot.tiff"), height = 3, width = 5, units = "in")
```

#Make empty table for p-value summary
```{r blank_pval}
#m = number of models

blank_pval <- function(m) {
  tibble(
    Dataset = vector(length = m, mode = "expression"),
    Model = vector(length = m, mode = "expression"),
    Coefficient = vector(length = m, mode = "expression"),
    mean_pval = vector(length = m, mode = "expression"),
    sd_pval = vector(length = m, mode = "expression"),
    max_pval = vector(length = m, mode = "expression"),
    count_sig_pval = vector(length = m, mode = "expression")
  )
}
```

#Make p-value summary table for each set of 1000 datasets
```{r sim2_e1_pval}
#m = number of models
m = 6

#make empty table
sim2_e1_pval <- blank_pval(m = m)

#Add model, coefficient descriptions
sim2_e1_pval$Dataset = "sim2_e1"
sim2_e1_pval$Model =  c("lm_delta_p", "lm_delta_alpha", "lm_delta_beta", "nls1.2", "nls2.2", "tau")
sim2_e1_pval$Coefficient = c("epsilon_p", "epsilon_alpha", "epsilon_beta", "rho", "rho", "avg_tau")

#Add mean pval and standard deviation
sim2_e1_pval$mean_pval[1] = avg_sim2_e1_lm_no_skew$pval[1]
sim2_e1_pval$mean_pval[2] = avg_sim2_e1_lm_no_skew$pval_slope_delta_alpha[1]
sim2_e1_pval$mean_pval[3] = avg_sim2_e1_lm_no_skew$pval_slope_delta_beta[1]
sim2_e1_pval$mean_pval[4:6] = avg_sim2_e1_lm_no_skew$pval[2:4]

sim2_e1_pval$sd_pval[1] = avg_sim2_e1_lm_no_skew$pval[5]
sim2_e1_pval$sd_pval[2] = avg_sim2_e1_lm_no_skew$pval_slope_delta_alpha[5]
sim2_e1_pval$sd_pval[3] = avg_sim2_e1_lm_no_skew$pval_slope_delta_beta[5]
sim2_e1_pval$sd_pval[4:6] = avg_sim2_e1_lm_no_skew$pval[6:8]

#Add max pval
sim2_e1_pval$max_pval[1] = max(sim2_e1_rep3$pval[1:1000])
sim2_e1_pval$max_pval[2] = max(sim2_e1_rep3$pval_slope_delta_alpha[1:1000])
sim2_e1_pval$max_pval[3] = max(sim2_e1_rep3$pval_slope_delta_beta[1:1000])
sim2_e1_pval$max_pval[4] = max(sim2_e1_rep3$pval[1001:2000])
sim2_e1_pval$max_pval[5] = max(sim2_e1_rep3$pval[2001:3000])
sim2_e1_pval$max_pval[6] = max(sim2_e1_rep3$pval[3001:4000])
  
#Count the final number of significant (pval < 0.05)  p-values for each model and add to final table.
sim2_e1_pval$count_sig_pval[1] = nrow(sim2_e1_lm_pval_sig)
sim2_e1_pval$count_sig_pval[2] = nrow(sim2_e1_lm_delta_alpha_pval_sig)
sim2_e1_pval$count_sig_pval[3] = nrow(sim2_e1_lm_delta_beta_pval_sig)
sim2_e1_pval$count_sig_pval[4] = nrow(sim2_e1_nls1_pval_sig)
sim2_e1_pval$count_sig_pval[5] = nrow(sim2_e1_nls2_pval_sig)
sim2_e1_pval$count_sig_pval[6] = nrow(sim2_e1_tau_pval_sig)

sim2_e1_pval <- sim2_e1_pval %>% mutate(
  mean_pval = unlist(.$mean_pval),
  sd_pval = unlist(.$sd_pval),
  max_pval = unlist(.$max_pval),
  count_sig_pval = unlist(.$count_sig_pval)
)

(sim2_e1_pval)
```

```{r sim2_e2_pval}
#m = number of models
m = 6

#make empty table
sim2_e2_pval <- blank_pval(m = m)

#Add model, coefficient descriptions
sim2_e2_pval$Dataset = "sim2_e2"
sim2_e2_pval$Model =  c("lm_delta_p", "lm_delta_alpha", "lm_delta_beta", "nls1.2", "nls2.2", "tau")
sim2_e2_pval$Coefficient = c("epsilon_p", "epsilon_alpha", "epsilon_beta", "rho", "rho", "avg_tau")

#Add mean pval and standard deviation
sim2_e2_pval$mean_pval[1] = avg_sim2_e2_lm_no_skew$pval[1]
sim2_e2_pval$mean_pval[2] = avg_sim2_e2_lm_no_skew$pval_slope_delta_alpha[1]
sim2_e2_pval$mean_pval[3] = avg_sim2_e2_lm_no_skew$pval_slope_delta_beta[1]
sim2_e2_pval$mean_pval[4:6] = avg_sim2_e2_lm_no_skew$pval[2:4]

sim2_e2_pval$sd_pval[1] = avg_sim2_e2_lm_no_skew$pval[5]
sim2_e2_pval$sd_pval[2] = avg_sim2_e2_lm_no_skew$pval_slope_delta_alpha[5]
sim2_e2_pval$sd_pval[3] = avg_sim2_e2_lm_no_skew$pval_slope_delta_beta[5]
sim2_e2_pval$sd_pval[4:6] = avg_sim2_e2_lm_no_skew$pval[6:8]

#Add max pval
sim2_e2_pval$max_pval[1] = max(sim2_e2_rep3$pval[1:1000])
sim2_e2_pval$max_pval[2] = max(sim2_e2_rep3$pval_slope_delta_alpha[1:1000])
sim2_e2_pval$max_pval[3] = max(sim2_e2_rep3$pval_slope_delta_beta[1:1000])
sim2_e2_pval$max_pval[4] = max(sim2_e2_rep3$pval[1001:2000])
sim2_e2_pval$max_pval[5] = max(sim2_e2_rep3$pval[2001:3000])
sim2_e2_pval$max_pval[6] = max(sim2_e2_rep3$pval[3001:4000])
  
#Count the final number of significant (pval < 0.05)  p-values for each model and add to final table.
sim2_e2_pval$count_sig_pval[1] = nrow(sim2_e2_lm_pval_sig)
sim2_e2_pval$count_sig_pval[2] = nrow(sim2_e2_lm_delta_alpha_pval_sig)
sim2_e2_pval$count_sig_pval[3] = nrow(sim2_e2_lm_delta_beta_pval_sig)
sim2_e2_pval$count_sig_pval[4] = nrow(sim2_e2_nls1_pval_sig)
sim2_e2_pval$count_sig_pval[5] = nrow(sim2_e2_nls2_pval_sig)
sim2_e2_pval$count_sig_pval[6] = nrow(sim2_e2_tau_pval_sig)

sim2_e2_pval <- sim2_e2_pval %>% mutate(
  mean_pval = unlist(.$mean_pval),
  sd_pval = unlist(.$sd_pval),
  max_pval = unlist(.$max_pval),
  count_sig_pval = unlist(.$count_sig_pval)
)

(sim2_e2_pval)
```

```{r sim2_e3_pval}
#m = number of models
m = 6

#make empty table
sim2_e3_pval <- blank_pval(m = m)

#Add model, coefficient descriptions
sim2_e3_pval$Dataset = "sim2_e3"
sim2_e3_pval$Model =  c("lm_delta_p", "lm_delta_alpha", "lm_delta_beta", "nls1.2", "nls2.2", "tau")
sim2_e3_pval$Coefficient = c("epsilon_p", "epsilon_alpha", "epsilon_beta", "rho", "rho", "avg_tau")

#Add mean pval and standard deviation
sim2_e3_pval$mean_pval[1] = avg_sim2_e3_lm_no_skew$pval[1]
sim2_e3_pval$mean_pval[2] = avg_sim2_e3_lm_no_skew$pval_slope_delta_alpha[1]
sim2_e3_pval$mean_pval[3] = avg_sim2_e3_lm_no_skew$pval_slope_delta_beta[1]
sim2_e3_pval$mean_pval[4:6] = avg_sim2_e3_lm_no_skew$pval[2:4]

sim2_e3_pval$sd_pval[1] = avg_sim2_e3_lm_no_skew$pval[5]
sim2_e3_pval$sd_pval[2] = avg_sim2_e3_lm_no_skew$pval_slope_delta_alpha[5]
sim2_e3_pval$sd_pval[3] = avg_sim2_e3_lm_no_skew$pval_slope_delta_beta[5]
sim2_e3_pval$sd_pval[4:6] = avg_sim2_e3_lm_no_skew$pval[6:8]

#Add max pval
sim2_e3_pval$max_pval[1] = max(sim2_e3_rep3$pval[1:1000])
sim2_e3_pval$max_pval[2] = max(sim2_e3_rep3$pval_slope_delta_alpha[1:1000])
sim2_e3_pval$max_pval[3] = max(sim2_e3_rep3$pval_slope_delta_beta[1:1000])
sim2_e3_pval$max_pval[4] = max(sim2_e3_rep3$pval[1001:2000])
sim2_e3_pval$max_pval[5] = max(sim2_e3_rep3$pval[2001:3000])
sim2_e3_pval$max_pval[6] = max(sim2_e3_rep3$pval[3001:4000])
  
#Count the final number of significant (pval < 0.05)  p-values for each model and add to final table.
sim2_e3_pval$count_sig_pval[1] = nrow(sim2_e3_lm_pval_sig)
sim2_e3_pval$count_sig_pval[2] = nrow(sim2_e3_lm_delta_alpha_pval_sig)
sim2_e3_pval$count_sig_pval[3] = nrow(sim2_e3_lm_delta_beta_pval_sig)
sim2_e3_pval$count_sig_pval[4] = nrow(sim2_e3_nls1_pval_sig)
sim2_e3_pval$count_sig_pval[5] = nrow(sim2_e3_nls2_pval_sig)
sim2_e3_pval$count_sig_pval[6] = nrow(sim2_e3_tau_pval_sig)

sim2_e3_pval <- sim2_e3_pval %>% mutate(
  mean_pval = unlist(.$mean_pval),
  sd_pval = unlist(.$sd_pval),
  max_pval = unlist(.$max_pval),
  count_sig_pval = unlist(.$count_sig_pval)
)

(sim2_e3_pval)
```

```{r sim2_e4_pval}
#m = number of models
m = 6

#make empty table
sim2_e4_pval <- blank_pval(m = m)

#Add model, coefficient descriptions
sim2_e4_pval$Dataset = "sim2_e4"
sim2_e4_pval$Model =  c("lm_delta_p", "lm_delta_alpha", "lm_delta_beta", "nls1.2", "nls2.2", "tau")
sim2_e4_pval$Coefficient = c("epsilon_p", "epsilon_alpha", "epsilon_beta", "rho", "rho", "avg_tau")

#Add mean pval and standard deviation
sim2_e4_pval$mean_pval[1] = avg_sim2_e4_lm_left_skew$pval[1]
sim2_e4_pval$mean_pval[2] = avg_sim2_e4_lm_left_skew$pval_slope_delta_alpha[1]
sim2_e4_pval$mean_pval[3] = avg_sim2_e4_lm_left_skew$pval_slope_delta_beta[1]
sim2_e4_pval$mean_pval[4:6] = avg_sim2_e4_lm_left_skew$pval[2:4]

sim2_e4_pval$sd_pval[1] = avg_sim2_e4_lm_left_skew$pval[5]
sim2_e4_pval$sd_pval[2] = avg_sim2_e4_lm_left_skew$pval_slope_delta_alpha[5]
sim2_e4_pval$sd_pval[3] = avg_sim2_e4_lm_left_skew$pval_slope_delta_beta[5]
sim2_e4_pval$sd_pval[4:6] = avg_sim2_e4_lm_left_skew$pval[6:8]

#Add max pval
sim2_e4_pval$max_pval[1] = max(sim2_e4_rep3$pval[1:1000])
sim2_e4_pval$max_pval[2] = max(sim2_e4_rep3$pval_slope_delta_alpha[1:1000])
sim2_e4_pval$max_pval[3] = max(sim2_e4_rep3$pval_slope_delta_beta[1:1000])
sim2_e4_pval$max_pval[4] = max(sim2_e4_rep3$pval[1001:2000])
sim2_e4_pval$max_pval[5] = max(sim2_e4_rep3$pval[2001:3000])
sim2_e4_pval$max_pval[6] = max(sim2_e4_rep3$pval[3001:4000])
  
#Count the final number of significant (pval < 0.05)  p-values for each model and add to final table.
sim2_e4_pval$count_sig_pval[1] = nrow(sim2_e4_lm_pval_sig)
sim2_e4_pval$count_sig_pval[2] = nrow(sim2_e4_lm_delta_alpha_pval_sig)
sim2_e4_pval$count_sig_pval[3] = nrow(sim2_e4_lm_delta_beta_pval_sig)
sim2_e4_pval$count_sig_pval[4] = nrow(sim2_e4_nls1_pval_sig)
sim2_e4_pval$count_sig_pval[5] = nrow(sim2_e4_nls2_pval_sig)
sim2_e4_pval$count_sig_pval[6] = nrow(sim2_e4_tau_pval_sig)

sim2_e4_pval <- sim2_e4_pval %>% mutate(
  mean_pval = unlist(.$mean_pval),
  sd_pval = unlist(.$sd_pval),
  max_pval = unlist(.$max_pval),
  count_sig_pval = unlist(.$count_sig_pval)
)

(sim2_e4_pval)
```

```{r sim2_e5_pval}
#m = number of models
m = 6

#make empty table
sim2_e5_pval <- blank_pval(m = m)

#Add model, coefficient descriptions
sim2_e5_pval$Dataset = "sim2_e5"
sim2_e5_pval$Model =  c("lm_delta_p", "lm_delta_alpha", "lm_delta_beta", "nls1.2", "nls2.2", "tau")
sim2_e5_pval$Coefficient = c("epsilon_p", "epsilon_alpha", "epsilon_beta", "rho", "rho", "avg_tau")

#Add mean pval and standard deviation
sim2_e5_pval$mean_pval[1] = avg_sim2_e5_lm_left_skew$pval[1]
sim2_e5_pval$mean_pval[2] = avg_sim2_e5_lm_left_skew$pval_slope_delta_alpha[1]
sim2_e5_pval$mean_pval[3] = avg_sim2_e5_lm_left_skew$pval_slope_delta_beta[1]
sim2_e5_pval$mean_pval[4:6] = avg_sim2_e5_lm_left_skew$pval[2:4]

sim2_e5_pval$sd_pval[1] = avg_sim2_e5_lm_left_skew$pval[5]
sim2_e5_pval$sd_pval[2] = avg_sim2_e5_lm_left_skew$pval_slope_delta_alpha[5]
sim2_e5_pval$sd_pval[3] = avg_sim2_e5_lm_left_skew$pval_slope_delta_beta[5]
sim2_e5_pval$sd_pval[4:6] = avg_sim2_e5_lm_left_skew$pval[6:8]

#Add max pval
sim2_e5_pval$max_pval[1] = max(sim2_e5_rep3$pval[1:1000])
sim2_e5_pval$max_pval[2] = max(sim2_e5_rep3$pval_slope_delta_alpha[1:1000])
sim2_e5_pval$max_pval[3] = max(sim2_e5_rep3$pval_slope_delta_beta[1:1000])
sim2_e5_pval$max_pval[4] = max(sim2_e5_rep3$pval[1001:2000])
sim2_e5_pval$max_pval[5] = max(sim2_e5_rep3$pval[2001:3000])
sim2_e5_pval$max_pval[6] = max(sim2_e5_rep3$pval[3001:4000])
  
#Count the final number of significant (pval < 0.05)  p-values for each model and add to final table.
sim2_e5_pval$count_sig_pval[1] = nrow(sim2_e5_lm_pval_sig)
sim2_e5_pval$count_sig_pval[2] = nrow(sim2_e5_lm_delta_alpha_pval_sig)
sim2_e5_pval$count_sig_pval[3] = nrow(sim2_e5_lm_delta_beta_pval_sig)
sim2_e5_pval$count_sig_pval[4] = nrow(sim2_e5_nls1_pval_sig)
sim2_e5_pval$count_sig_pval[5] = nrow(sim2_e5_nls2_pval_sig)
sim2_e5_pval$count_sig_pval[6] = nrow(sim2_e5_tau_pval_sig)

sim2_e5_pval <- sim2_e5_pval %>% mutate(
  mean_pval = unlist(.$mean_pval),
  sd_pval = unlist(.$sd_pval),
  max_pval = unlist(.$max_pval),
  count_sig_pval = unlist(.$count_sig_pval)
)

(sim2_e5_pval)
```

```{r sim2_e6_pval}
#m = number of models
m = 6

#make empty table
sim2_e6_pval <- blank_pval(m = m)

#Add model, coefficient descriptions
sim2_e6_pval$Dataset = "sim2_e6"
sim2_e6_pval$Model =  c("lm_delta_p", "lm_delta_alpha", "lm_delta_beta", "nls1.2", "nls2.2", "tau")
sim2_e6_pval$Coefficient = c("epsilon_p", "epsilon_alpha", "epsilon_beta", "rho", "rho", "avg_tau")

#Add mean pval and standard deviation
sim2_e6_pval$mean_pval[1] = avg_sim2_e6_lm_left_skew$pval[1]
sim2_e6_pval$mean_pval[2] = avg_sim2_e6_lm_left_skew$pval_slope_delta_alpha[1]
sim2_e6_pval$mean_pval[3] = avg_sim2_e6_lm_left_skew$pval_slope_delta_beta[1]
sim2_e6_pval$mean_pval[4:6] = avg_sim2_e6_lm_left_skew$pval[2:4]

sim2_e6_pval$sd_pval[1] = avg_sim2_e6_lm_left_skew$pval[5]
sim2_e6_pval$sd_pval[2] = avg_sim2_e6_lm_left_skew$pval_slope_delta_alpha[5]
sim2_e6_pval$sd_pval[3] = avg_sim2_e6_lm_left_skew$pval_slope_delta_beta[5]
sim2_e6_pval$sd_pval[4:6] = avg_sim2_e6_lm_left_skew$pval[6:8]

#Add max pval
sim2_e6_pval$max_pval[1] = max(sim2_e6_rep3$pval[1:1000])
sim2_e6_pval$max_pval[2] = max(sim2_e6_rep3$pval_slope_delta_alpha[1:1000])
sim2_e6_pval$max_pval[3] = max(sim2_e6_rep3$pval_slope_delta_beta[1:1000])
sim2_e6_pval$max_pval[4] = max(sim2_e6_rep3$pval[1001:2000])
sim2_e6_pval$max_pval[5] = max(sim2_e6_rep3$pval[2001:3000])
sim2_e6_pval$max_pval[6] = max(sim2_e6_rep3$pval[3001:4000])
  
#Count the final number of significant (pval < 0.05)  p-values for each model and add to final table.
sim2_e6_pval$count_sig_pval[1] = nrow(sim2_e6_lm_pval_sig)
sim2_e6_pval$count_sig_pval[2] = nrow(sim2_e6_lm_delta_alpha_pval_sig)
sim2_e6_pval$count_sig_pval[3] = nrow(sim2_e6_lm_delta_beta_pval_sig)
sim2_e6_pval$count_sig_pval[4] = nrow(sim2_e6_nls1_pval_sig)
sim2_e6_pval$count_sig_pval[5] = nrow(sim2_e6_nls2_pval_sig)
sim2_e6_pval$count_sig_pval[6] = nrow(sim2_e6_tau_pval_sig)

sim2_e6_pval <- sim2_e6_pval %>% mutate(
  mean_pval = unlist(.$mean_pval),
  sd_pval = unlist(.$sd_pval),
  max_pval = unlist(.$max_pval),
  count_sig_pval = unlist(.$count_sig_pval)
)

(sim2_e6_pval)
```

```{r sim2_e7_pval}
#m = number of models
m = 6

#make empty table
sim2_e7_pval <- blank_pval(m = m)

#Add model, coefficient descriptions
sim2_e7_pval$Dataset = "sim2_e7"
sim2_e7_pval$Model =  c("lm_delta_p", "lm_delta_alpha", "lm_delta_beta", "nls1.2", "nls2.2", "tau")
sim2_e7_pval$Coefficient = c("epsilon_p", "epsilon_alpha", "epsilon_beta", "rho", "rho", "avg_tau")

#Add mean pval and standard deviation
sim2_e7_pval$mean_pval[1] = avg_sim2_e7_lm_right_skew$pval[1]
sim2_e7_pval$mean_pval[2] = avg_sim2_e7_lm_right_skew$pval_slope_delta_alpha[1]
sim2_e7_pval$mean_pval[3] = avg_sim2_e7_lm_right_skew$pval_slope_delta_beta[1]
sim2_e7_pval$mean_pval[4:6] = avg_sim2_e7_lm_right_skew$pval[2:4]

sim2_e7_pval$sd_pval[1] = avg_sim2_e7_lm_right_skew$pval[5]
sim2_e7_pval$sd_pval[2] = avg_sim2_e7_lm_right_skew$pval_slope_delta_alpha[5]
sim2_e7_pval$sd_pval[3] = avg_sim2_e7_lm_right_skew$pval_slope_delta_beta[5]
sim2_e7_pval$sd_pval[4:6] = avg_sim2_e7_lm_right_skew$pval[6:8]

#Add max pval
sim2_e7_pval$max_pval[1] = max(sim2_e7_rep3$pval[1:1000])
sim2_e7_pval$max_pval[2] = max(sim2_e7_rep3$pval_slope_delta_alpha[1:1000])
sim2_e7_pval$max_pval[3] = max(sim2_e7_rep3$pval_slope_delta_beta[1:1000])
sim2_e7_pval$max_pval[4] = max(sim2_e7_rep3$pval[1001:2000])
sim2_e7_pval$max_pval[5] = max(sim2_e7_rep3$pval[2001:3000])
sim2_e7_pval$max_pval[6] = max(sim2_e7_rep3$pval[3001:4000])
  
#Count the final number of significant (pval < 0.05)  p-values for each model and add to final table.
sim2_e7_pval$count_sig_pval[1] = nrow(sim2_e7_lm_pval_sig)
sim2_e7_pval$count_sig_pval[2] = nrow(sim2_e7_lm_delta_alpha_pval_sig)
sim2_e7_pval$count_sig_pval[3] = nrow(sim2_e7_lm_delta_beta_pval_sig)
sim2_e7_pval$count_sig_pval[4] = nrow(sim2_e7_nls1_pval_sig)
sim2_e7_pval$count_sig_pval[5] = nrow(sim2_e7_nls2_pval_sig)
sim2_e7_pval$count_sig_pval[6] = nrow(sim2_e7_tau_pval_sig)

sim2_e7_pval <- sim2_e7_pval %>% mutate(
  mean_pval = unlist(.$mean_pval),
  sd_pval = unlist(.$sd_pval),
  max_pval = unlist(.$max_pval),
  count_sig_pval = unlist(.$count_sig_pval)
)

(sim2_e7_pval)
```

```{r sim2_e8_pval}
#m = number of models
m = 6

#make empty table
sim2_e8_pval <- blank_pval(m = m)

#Add model, coefficient descriptions
sim2_e8_pval$Dataset = "sim2_e8"
sim2_e8_pval$Model =  c("lm_delta_p", "lm_delta_alpha", "lm_delta_beta", "nls1.2", "nls2.2", "tau")
sim2_e8_pval$Coefficient = c("epsilon_p", "epsilon_alpha", "epsilon_beta", "rho", "rho", "avg_tau")

#Add mean pval and standard deviation
sim2_e8_pval$mean_pval[1] = avg_sim2_e8_lm_right_skew$pval[1]
sim2_e8_pval$mean_pval[2] = avg_sim2_e8_lm_right_skew$pval_slope_delta_alpha[1]
sim2_e8_pval$mean_pval[3] = avg_sim2_e8_lm_right_skew$pval_slope_delta_beta[1]
sim2_e8_pval$mean_pval[4:6] = avg_sim2_e8_lm_right_skew$pval[2:4]

sim2_e8_pval$sd_pval[1] = avg_sim2_e8_lm_right_skew$pval[5]
sim2_e8_pval$sd_pval[2] = avg_sim2_e8_lm_right_skew$pval_slope_delta_alpha[5]
sim2_e8_pval$sd_pval[3] = avg_sim2_e8_lm_right_skew$pval_slope_delta_beta[5]
sim2_e8_pval$sd_pval[4:6] = avg_sim2_e8_lm_right_skew$pval[6:8]

#Add max pval
sim2_e8_pval$max_pval[1] = max(sim2_e8_rep3$pval[1:1000])
sim2_e8_pval$max_pval[2] = max(sim2_e8_rep3$pval_slope_delta_alpha[1:1000])
sim2_e8_pval$max_pval[3] = max(sim2_e8_rep3$pval_slope_delta_beta[1:1000])
sim2_e8_pval$max_pval[4] = max(sim2_e8_rep3$pval[1001:2000])
sim2_e8_pval$max_pval[5] = max(sim2_e8_rep3$pval[2001:3000])
sim2_e8_pval$max_pval[6] = max(sim2_e8_rep3$pval[3001:4000])
  
#Count the final number of significant (pval < 0.05)  p-values for each model and add to final table.
sim2_e8_pval$count_sig_pval[1] = nrow(sim2_e8_lm_pval_sig)
sim2_e8_pval$count_sig_pval[2] = nrow(sim2_e8_lm_delta_alpha_pval_sig)
sim2_e8_pval$count_sig_pval[3] = nrow(sim2_e8_lm_delta_beta_pval_sig)
sim2_e8_pval$count_sig_pval[4] = nrow(sim2_e8_nls1_pval_sig)
sim2_e8_pval$count_sig_pval[5] = nrow(sim2_e8_nls2_pval_sig)
sim2_e8_pval$count_sig_pval[6] = nrow(sim2_e8_tau_pval_sig)

sim2_e8_pval <- sim2_e8_pval %>% mutate(
  mean_pval = unlist(.$mean_pval),
  sd_pval = unlist(.$sd_pval),
  max_pval = unlist(.$max_pval),
  count_sig_pval = unlist(.$count_sig_pval)
)

(sim2_e8_pval)
```

```{r sim2_e9_pval}
#m = number of models
m = 6

#make empty table
sim2_e9_pval <- blank_pval(m = m)

#Add model, coefficient descriptions
sim2_e9_pval$Dataset = "sim2_e9"
sim2_e9_pval$Model =  c("lm_delta_p", "lm_delta_alpha", "lm_delta_beta", "nls1.2", "nls2.2", "tau")
sim2_e9_pval$Coefficient = c("epsilon_p", "epsilon_alpha", "epsilon_beta", "rho", "rho", "avg_tau")

#Add mean pval and standard deviation
sim2_e9_pval$mean_pval[1] = avg_sim2_e9_lm_right_skew$pval[1]
sim2_e9_pval$mean_pval[2] = avg_sim2_e9_lm_right_skew$pval_slope_delta_alpha[1]
sim2_e9_pval$mean_pval[3] = avg_sim2_e9_lm_right_skew$pval_slope_delta_beta[1]
sim2_e9_pval$mean_pval[4:6] = avg_sim2_e9_lm_right_skew$pval[2:4]

sim2_e9_pval$sd_pval[1] = avg_sim2_e9_lm_right_skew$pval[5]
sim2_e9_pval$sd_pval[2] = avg_sim2_e9_lm_right_skew$pval_slope_delta_alpha[5]
sim2_e9_pval$sd_pval[3] = avg_sim2_e9_lm_right_skew$pval_slope_delta_beta[5]
sim2_e9_pval$sd_pval[4:6] = avg_sim2_e9_lm_right_skew$pval[6:8]

#Add max pval
sim2_e9_pval$max_pval[1] = max(sim2_e9_rep3$pval[1:1000])
sim2_e9_pval$max_pval[2] = max(sim2_e9_rep3$pval_slope_delta_alpha[1:1000])
sim2_e9_pval$max_pval[3] = max(sim2_e9_rep3$pval_slope_delta_beta[1:1000])
sim2_e9_pval$max_pval[4] = max(sim2_e9_rep3$pval[1001:2000])
sim2_e9_pval$max_pval[5] = max(sim2_e9_rep3$pval[2001:3000])
sim2_e9_pval$max_pval[6] = max(sim2_e9_rep3$pval[3001:4000])
  
#Count the final number of significant (pval < 0.05)  p-values for each model and add to final table.
sim2_e9_pval$count_sig_pval[1] = nrow(sim2_e9_lm_pval_sig)
sim2_e9_pval$count_sig_pval[2] = nrow(sim2_e9_lm_delta_alpha_pval_sig)
sim2_e9_pval$count_sig_pval[3] = nrow(sim2_e9_lm_delta_beta_pval_sig)
sim2_e9_pval$count_sig_pval[4] = nrow(sim2_e9_nls1_pval_sig)
sim2_e9_pval$count_sig_pval[5] = nrow(sim2_e9_nls2_pval_sig)
sim2_e9_pval$count_sig_pval[6] = nrow(sim2_e9_tau_pval_sig)

sim2_e9_pval <- sim2_e9_pval %>% mutate(
  mean_pval = unlist(.$mean_pval),
  sd_pval = unlist(.$sd_pval),
  max_pval = unlist(.$max_pval),
  count_sig_pval = unlist(.$count_sig_pval)
)

(sim2_e9_pval)
```

#Combine all pval tables (e1-e9)
```{r sim2_all_pval}
(sim2_all_pval<- rbind(
  sim2_e1_pval,
  sim2_e2_pval,
  sim2_e3_pval,
  sim2_e4_pval,
  sim2_e5_pval,
  sim2_e6_pval,
  sim2_e7_pval,
  sim2_e8_pval,
  sim2_e9_pval
)
)

write.csv(sim2_all_pval, here("data/output/sim2/sim2_all_pval.csv"), row.names = TRUE)
```
